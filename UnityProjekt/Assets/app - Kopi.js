import System;

var retning : String;

var hoejde : float = 0.0;
var bredde : float = 0.0;
var datahoejde = 0.0;
var tab = 0.0;


//Load og save
var grundoplysninger1 : String[];
var inputs1 : String[];
var noegletal1 : float[];
var datanavn1 : String;
var datatid1 : String;

var grundoplysninger2 : String[];
var inputs2 : String[];
var noegletal2 : float[];
var datanavn2 : String;
var datatid2 : String;

var grundoplysninger3 : String[];
var inputs3 : String[];
var noegletal3 : float[];
var datanavn3 : String;
var datatid3 : String;

var grundoplysninger4 : String[];
var inputs4 : String[];
var noegletal4 : float[];
var datanavn4 : String;
var datatid4 : String;

var grundoplysninger5 : String[];
var inputs5 : String[];
var noegletal5 : float[];
var datanavn5 : String;
var datatid5 : String;

var grundoplysninger6 : String[];
var inputs6 : String[];
var noegletal6 : float[];
var datanavn6 : String;
var datatid6 : String;

var grundoplysninger7 : String[];
var inputs7 : String[];
var noegletal7 : float[];
var datanavn7 : String;
var datatid7 : String;

var grundoplysninger8 : String[];
var inputs8 : String[];
var noegletal8 : float[];
var datanavn8 : String;
var datatid8 : String;

var grundoplysninger9 : String[];
var inputs9 : String[];
var noegletal9 : float[];
var datanavn9 : String;
var datatid9 : String;

var grundoplysninger10 : String[];
var inputs10 : String[];
var noegletal10 : float[];
var datanavn10 : String;
var datatid10 : String;

var slot = 0.0;
private var timelimit1 = 14400.0; //Total
private var timelimit2 = 3600.0; //Senest

//Dropdown
private var showList = false;
private var listEntry = 0;
private var list : GUIContent[];
var listStyle : GUIStyle;
private var picked1 = false;
private var hej:String = "Vælg";

//Grundlæggende oplysninger
private var go1 : String = "";
private var go2 : String = "";
private var go3 : String = "";
private var go4 : String = "";
private var go5 : String = "";
private var go6 : String = "";
private var go7 : String = "";
private var go8 : String = "Vælg";
private var go9 : String = "";
private var go10 : String = "";
private var go11 : String = "";
private var go12 : String = "";
private var go13 : String = "";


//Variable til inputs
private var input1  : String = "";
private var input2  : String = "";
private var input3  : String = "";
private var input4  : String = "";
private var input5  : String = "";
private var input6  : String = "";
private var input7  : String = "";
private var picked2 = false;
private var picked3 = false;
private var picked4 = false;
private var picked5 = false;
private var picked6 = false;
private var showList2 = false;
private var showList3 = false;
private var showList4 = false;
private var showList5 = false;
private var showList6 = false;
private var list2 : GUIContent[];
private var list3 : GUIContent[];
private var list4 : GUIContent[];
private var list5 : GUIContent[];
private var list6 : GUIContent[];
private var listEntry2 = 0;
private var listEntry3 = 2;
private var listEntry4 = 0;
private var listEntry5 = 0;
private var listEntry6 = 0;
var scrollPosition : Vector2 = Vector2.zero;
var scrollPosition2 : Vector2 = Vector2.zero;
var scrollPosition3 : Vector2 = Vector2.zero;
private var input8  : String = "";
private var input9  : String = "";
private var input10  : String = "";

var afstand: float;
var fartgraense: float;
var hastmargin: float;
var fraktilstr: float;
var konfidensniveau: float;
var signifikansniveauchi: float;
var signifikansniveauhyp: float;
var inputkontrolvar = 0.0;
var tidligeredatakontrolvar = 0.0;
var preantal = 0.0;
var pregnms = 0.0;
var prespred = 0.0;

var timer = 0.0;
var temptid;
var fart = 0.0;
var farttemp = 0.0;
var visfart = 0.0;
var sum = 0.0;
var sumtemp = 0.0;
var xitemp = 0.0;
var xi2 = 0.0;
var spred = 0.0;
var visspred = 0.0;
var gnms = 0.0;
var fartmax = 0.0;
var fartmin = 0.0;
var antal = 0.0;
var senestetid = 0.0;
var senestehastighed = 0.0;
var tidstemp = 0.0;
private var reaktionstid = 0.2;

var startstop:String = "Start";
var counter = false;
var tidarr = new Array ();
var tidlogarr = new Array ();
var gpslogarrlat = new Array ();
var gpslogarrlong = new Array ();
//var tidarr = new Array (0.50, 0.64, 0.64, 0.50, 0.74, 0.58, 0.78, 0.68, 0.60, 0.78, 0.84, 0.56, 0.38, 0.66, 0.70, 0.52, 0.66, 0.68, 0.52, 0.62, 0.66, 0.80, 0.62, 0.52, 0.60, 0.66, 0.54, 0.56, 0.74, 0.58, 0.70);
var fartarr = new Array ();
var sortarr = new Array ();

//variable til test
var normfraktilvaerdi = 0.0;
var overskridelsesandel = 0.0;
var overraekke = 0.0;
var gnmsforskel = 0.0;
var foroevre = 0.0;
var fornedre = 0.0;
var midoevre = 0.0;
var midnedre = 0.0;
var alfakonf = 0.0;
var kritisktalfa = 0.0;
var kritisktalfa1 = 0.0;
var sp = 0.0;
var test12alfa = 0.0;
var test12t = 0.0;
var test34alfa = 0.0;
var test34t = 0.0;
var fartgraensetest:String = "";
var forskelstest:String = "";
var fartgraensetestvar = 0.0;
var forskelstestvar = 0.0;
var test1 = 0.0;
var test2 = 0.0;
var test3 = 0.0;
var test4 = 0.0;
var testtemp1 = 0.0;
var testtemp2 = 0.0;
var testtemp3 = 0.0;
var visnormfraktilvaerdi = 0.0;
var visoverskridelsesandel = 0.0;
var vismidnedre = 0.0;
var vismidoevre = 0.0;
var visfornedre = 0.0;
var visforoevre = 0.0;
var visgnmsforskel = 0.0;
var normfraktilvaerdinedre = 0.0;
var normfraktilvaerdioevre = 0.0;
var overraekkenedre = 0.0;
var overskridelsesandelnedre = 0.0;
var overraekkeoevre = 0.0;
var overskridelsesandeloevre = 0.0;


//Variable til chitest
var antalinterval = 0.0;
var chifrihedsgrader = 0.0;
var tempinterval = 0.0;
var tempinterpolation = 0.0;
var tempaflaesningned = 0.0;
var chitemp1 = 0.0;
var chitemp2 = 0.0;
var chitemp3 = 0.0;
var chitemp4 = 0.0;
var chitemp5 = 0.0;
var forventetfrekvens = 0.0;
var sumoiei = 0.0;
var forkastgraense = 0.0;
var normaltest = 0.0;
var testbesked:String = "";

//Arrays til chi
var delintervalarr = new Array ();
var oensketfraktilarr = new Array ();
var aflaesningoparr = new Array ();
var aflaesningnedarr = new Array ();
var interpolationsdeci1larr = new Array ();
var zvaerdifraktil = new Array ();
var oevregraensearr = new Array ();
var nedregraensearr = new Array ();
var antaliintervalarr = new Array ();
var oieiarr = new Array ();

//Tabeller
var normalarr = new Array (0.0000004792, 0.0000005042, 0.0000005304, 0.0000005580, 0.0000005869, 0.0000006173, 0.0000006492, 0.0000006827, 0.0000007178, 0.0000007547, 0.0000007933, 0.0000008339, 0.0000008765, 0.0000009211, 0.0000009680, 0.0000010171, 0.0000010686, 0.0000011226, 0.0000011792, 0.0000012386, 0.0000013008, 0.0000013660, 0.0000014344, 0.0000015060, 0.0000015810, 0.0000016597, 0.0000017420, 0.0000018283, 0.0000019187, 0.0000020133, 0.0000021125, 0.0000022162, 0.0000023249, 0.0000024386, 0.0000025577, 0.0000026823, 0.0000028127, 0.0000029492, 0.0000030920, 0.0000032414, 0.0000033977, 0.0000035612, 0.0000037322, 0.0000039110, 0.0000040980, 0.0000042935, 0.0000044979, 0.0000047117, 0.0000049350, 0.0000051685, 0.0000054125, 0.0000056675, 0.0000059340, 0.0000062123, 0.0000065031, 0.0000068069, 0.0000071241, 0.0000074555, 0.0000078015, 0.0000081627, 0.0000085399, 0.0000089337, 0.0000093447, 0.0000097736, 0.0000102213, 0.0000106885, 0.0000111760, 0.0000116846, 0.0000122151, 0.0000127685, 0.0000133457, 0.0000139477, 0.0000145755, 0.0000152300, 0.0000159124, 0.0000166238, 0.0000173653, 0.0000181382, 0.0000189436, 0.0000197830, 0.0000206575, 0.0000215687, 0.0000225179, 0.0000235066, 0.0000245364, 0.0000256088, 0.0000267256, 0.0000278884, 0.0000290991, 0.0000303594, 0.0000316712, 0.0000330366, 0.0000344576, 0.0000359363, 0.0000374749, 0.0000390756, 0.0000407408, 0.0000424729, 0.0000442745, 0.0000461481, 0.0000480963, 0.0000501221, 0.0000522282, 0.0000544177, 0.0000566935, 0.0000590589, 0.0000615172, 0.0000640716, 0.0000667258, 0.0000694834, 0.0000723480, 0.0000753236, 0.0000784142, 0.0000816238, 0.0000849567, 0.0000884173, 0.0000920101, 0.0000957399, 0.0000996114, 0.0001036296, 0.0001077997, 0.0001121270, 0.0001166170, 0.0001212752, 0.0001261076, 0.0001311202, 0.0001363190, 0.0001417106, 0.0001473015, 0.0001530985, 0.0001591086, 0.0001653390, 0.0001717971, 0.0001784906, 0.0001854274, 0.0001926156, 0.0002000635, 0.0002077798, 0.0002157734, 0.0002240533, 0.0002326291, 0.0002415103, 0.0002507069, 0.0002602292, 0.0002700877, 0.0002802933, 0.0002908571, 0.0003017906, 0.0003131057, 0.0003248144, 0.0003369293, 0.0003494631, 0.0003624291, 0.0003758409, 0.0003897124, 0.0004040578, 0.0004188919, 0.0004342299, 0.0004500872, 0.0004664799, 0.0004834241, 0.0005009369, 0.0005190354, 0.0005377374, 0.0005570611, 0.0005770250, 0.0005976485, 0.0006189511, 0.0006409530, 0.0006636749, 0.0006871379, 0.0007113640, 0.0007363753, 0.0007621947, 0.0007888457, 0.0008163523, 0.0008447392, 0.0008740315, 0.0009042552, 0.0009354367, 0.0009676032, 0.0010007825, 0.0010350030, 0.0010702939, 0.0011066850, 0.0011442068, 0.0011828907, 0.0012227687, 0.0012638734, 0.0013062384, 0.0013498980, 0.0013948872, 0.0014412419, 0.0014889987, 0.0015381952, 0.0015888696, 0.0016410612, 0.0016948100, 0.0017501569, 0.0018071438, 0.0018658133, 0.0019262091, 0.0019883759, 0.0020523590, 0.0021182050, 0.0021859615, 0.0022556767, 0.0023274002, 0.0024011825, 0.0024770750, 0.0025551303, 0.0026354021, 0.0027179449, 0.0028028146, 0.0028900681, 0.0029797632, 0.0030719592, 0.0031667163, 0.0032640958, 0.0033641604, 0.0034669738, 0.0035726010, 0.0036811080, 0.0037925623, 0.0039070326, 0.0040245885, 0.0041453014, 0.0042692434, 0.0043964883, 0.0045271111, 0.0046611880, 0.0047987966, 0.0049400158, 0.0050849257, 0.0052336082, 0.0053861460, 0.0055426234, 0.0057031263, 0.0058677417, 0.0060365581, 0.0062096653, 0.0063871548, 0.0065691191, 0.0067556526, 0.0069468508, 0.0071428107, 0.0073436310, 0.0075494114, 0.0077602536, 0.0079762603, 0.0081975359, 0.0084241864, 0.0086563190, 0.0088940426, 0.0091374675, 0.0093867055, 0.0096418699, 0.0099030756, 0.0101704387, 0.0104440771, 0.0107241100, 0.0110106583, 0.0113038442, 0.0116037915, 0.0119106254, 0.0122244727, 0.0125454614, 0.0128737214, 0.0132093838, 0.0135525811, 0.0139034475, 0.0142621184, 0.0146287308, 0.0150034230, 0.0153863348, 0.0157776074, 0.0161773834, 0.0165858067, 0.0170030226, 0.0174291779, 0.0178644206, 0.0183088999, 0.0187627664, 0.0192261722, 0.0196992704, 0.0201822154, 0.0206751629, 0.0211782696, 0.0216916938, 0.0222155944, 0.0227501319, 0.0232954678, 0.0238517643, 0.0244191853, 0.0249978951, 0.0255880595, 0.0261898449, 0.0268034189, 0.0274289497, 0.0280666067, 0.0287165598, 0.0293789800, 0.0300540390, 0.0307419089, 0.0314427630, 0.0321567748, 0.0328841187, 0.0336249694, 0.0343795024, 0.0351478936, 0.0359303191, 0.0367269557, 0.0375379803, 0.0383635704, 0.0392039033, 0.0400591569, 0.0409295090, 0.0418151376, 0.0427162208, 0.0436329365, 0.0445654628, 0.0455139773, 0.0464786579, 0.0474596818, 0.0484572263, 0.0494714680, 0.0505025835, 0.0515507485, 0.0526161385, 0.0536989281, 0.0547992917, 0.0559174025, 0.0570534332, 0.0582075556, 0.0593799406, 0.0605707580, 0.0617801767, 0.0630083645, 0.0642554878, 0.0655217121, 0.0668072013, 0.0681121180, 0.0694366233, 0.0707808770, 0.0721450370, 0.0735292596, 0.0749336995, 0.0763585095, 0.0778038405, 0.0792698415, 0.0807566592, 0.0822644387, 0.0837933224, 0.0853434508, 0.0869149619, 0.0885079914, 0.0901226725, 0.0917591357, 0.0934175090, 0.0950979178, 0.0968004846, 0.0985253290, 0.1002725680, 0.1020423151, 0.1038346811, 0.1056497737, 0.1074876971, 0.1093485524, 0.1112324374, 0.1131394464, 0.1150696702, 0.1170231960, 0.1190001075, 0.1210004844, 0.1230244031, 0.1250719356, 0.1271431506, 0.1292381122, 0.1313568810, 0.1334995132, 0.1356660609, 0.1378565720, 0.1400710901, 0.1423096544, 0.1445722997, 0.1468590564, 0.1491699503, 0.1515050028, 0.1538642304, 0.1562476450, 0.1586552539, 0.1610870595, 0.1635430593, 0.1660232461, 0.1685276075, 0.1710561263, 0.1736087803, 0.1761855422, 0.1787863796, 0.1814112549, 0.1840601253, 0.1867329430, 0.1894296548, 0.1921502021, 0.1948945213, 0.1976625431, 0.2004541933, 0.2032693918, 0.2061080536, 0.2089700879, 0.2118553986, 0.2147638842, 0.2176954376, 0.2206499463, 0.2236272924, 0.2266273524, 0.2296499972, 0.2326950923, 0.2357624978, 0.2388520681, 0.2419636522, 0.2450970937, 0.2482522305, 0.2514288951, 0.2546269147, 0.2578461108, 0.2610862997, 0.2643472921, 0.2676288935, 0.2709309038, 0.2742531178, 0.2775953248, 0.2809573089, 0.2843388490, 0.2877397188, 0.2911596868, 0.2945985162, 0.2980559654, 0.3015317875, 0.3050257309, 0.3085375387, 0.3120669494, 0.3156136965, 0.3191775088, 0.3227581103, 0.3263552203, 0.3299685537, 0.3335978206, 0.3372427268, 0.3409029738, 0.3445782584, 0.3482682735, 0.3519727076, 0.3556912452, 0.3594235668, 0.3631693488, 0.3669282640, 0.3706999811, 0.3744841653, 0.3782804782, 0.3820885778, 0.3859081188, 0.3897387524, 0.3935801268, 0.3974318868, 0.4012936743, 0.4051651283, 0.4090458849, 0.4129355774, 0.4168338365, 0.4207402906, 0.4246545653, 0.4285762841, 0.4325050683, 0.4364405371, 0.4403823076, 0.4443299952, 0.4482832133, 0.4522415740, 0.4562046875, 0.4601721627, 0.4641436074, 0.4681186280, 0.4720968298, 0.4760778173, 0.4800611942, 0.4840465631, 0.4880335266, 0.4920216863, 0.4960106437, 0.5000000000, 0.5039893563, 0.5079783137, 0.5119664734, 0.5159534369, 0.5199388058, 0.5239221827, 0.5279031702, 0.5318813720, 0.5358563926, 0.5398278373, 0.5437953125, 0.5477584260, 0.5517167867, 0.5556700048, 0.5596176924, 0.5635594629, 0.5674949317, 0.5714237159, 0.5753454347, 0.5792597094, 0.5831661635, 0.5870644226, 0.5909541151, 0.5948348717, 0.5987063257, 0.6025681132, 0.6064198732, 0.6102612476, 0.6140918812, 0.6179114222, 0.6217195218, 0.6255158347, 0.6293000189, 0.6330717360, 0.6368306512, 0.6405764332, 0.6443087548, 0.6480272924, 0.6517317265, 0.6554217416, 0.6590970262, 0.6627572732, 0.6664021794, 0.6700314463, 0.6736447797, 0.6772418897, 0.6808224912, 0.6843863035, 0.6879330506, 0.6914624613, 0.6949742691, 0.6984682125, 0.7019440346, 0.7054014838, 0.7088403132, 0.7122602812, 0.7156611510, 0.7190426911, 0.7224046752, 0.7257468822, 0.7290690962, 0.7323711065, 0.7356527079, 0.7389137003, 0.7421538892, 0.7453730853, 0.7485711049, 0.7517477695, 0.7549029063, 0.7580363478, 0.7611479319, 0.7642375022, 0.7673049077, 0.7703500028, 0.7733726476, 0.7763727076, 0.7793500537, 0.7823045624, 0.7852361158, 0.7881446014, 0.7910299121, 0.7938919464, 0.7967306082, 0.7995458067, 0.8023374569, 0.8051054787, 0.8078497979, 0.8105703452, 0.8132670570, 0.8159398747, 0.8185887451, 0.8212136204, 0.8238144578, 0.8263912197, 0.8289438737, 0.8314723925, 0.8339767539, 0.8364569407, 0.8389129405, 0.8413447461, 0.8437523550, 0.8461357696, 0.8484949972, 0.8508300497, 0.8531409436, 0.8554277003, 0.8576903456, 0.8599289099, 0.8621434280, 0.8643339391, 0.8665004868, 0.8686431190, 0.8707618878, 0.8728568494, 0.8749280644, 0.8769755969, 0.8789995156, 0.8809998925, 0.8829768040, 0.8849303298, 0.8868605536, 0.8887675626, 0.8906514476, 0.8925123029, 0.8943502263, 0.8961653189, 0.8979576849, 0.8997274320, 0.9014746710, 0.9031995154, 0.9049020822, 0.9065824910, 0.9082408643, 0.9098773275, 0.9114920086, 0.9130850381, 0.9146565492, 0.9162066776, 0.9177355613, 0.9192433408, 0.9207301585, 0.9221961595, 0.9236414905, 0.9250663005, 0.9264707404, 0.9278549630, 0.9292191230, 0.9305633767, 0.9318878820, 0.9331927987, 0.9344782879, 0.9357445122, 0.9369916355, 0.9382198233, 0.9394292420, 0.9406200594, 0.9417924444, 0.9429465668, 0.9440825975, 0.9452007083, 0.9463010719, 0.9473838615, 0.9484492515, 0.9494974165, 0.9505285320, 0.9515427737, 0.9525403182, 0.9535213421, 0.9544860227, 0.9554345372, 0.9563670635, 0.9572837792, 0.9581848624, 0.9590704910, 0.9599408431, 0.9607960967, 0.9616364296, 0.9624620197, 0.9632730443, 0.9640696809, 0.9648521064, 0.9656204976, 0.9663750306, 0.9671158813, 0.9678432252, 0.9685572370, 0.9692580911, 0.9699459610, 0.9706210200, 0.9712834402, 0.9719333933, 0.9725710503, 0.9731965811, 0.9738101551, 0.9744119405, 0.9750021049, 0.9755808147, 0.9761482357, 0.9767045322, 0.9772498681, 0.9777844056, 0.9783083062, 0.9788217304, 0.9793248371, 0.9798177846, 0.9803007296, 0.9807738278, 0.9812372336, 0.9816911001, 0.9821355794, 0.9825708221, 0.9829969774, 0.9834141933, 0.9838226166, 0.9842223926, 0.9846136652, 0.9849965770, 0.9853712692, 0.9857378816, 0.9860965525, 0.9864474189, 0.9867906162, 0.9871262786, 0.9874545386, 0.9877755273, 0.9880893746, 0.9883962085, 0.9886961558, 0.9889893417, 0.9892758900, 0.9895559229, 0.9898295613, 0.9900969244, 0.9903581301, 0.9906132945, 0.9908625325, 0.9911059574, 0.9913436810, 0.9915758136, 0.9918024641, 0.9920237397, 0.9922397464, 0.9924505886, 0.9926563690, 0.9928571893, 0.9930531492, 0.9932443474, 0.9934308809, 0.9936128452, 0.9937903347, 0.9939634419, 0.9941322583, 0.9942968737, 0.9944573766, 0.9946138540, 0.9947663918, 0.9949150743, 0.9950599842, 0.9952012034, 0.9953388120, 0.9954728889, 0.9956035117, 0.9957307566, 0.9958546986, 0.9959754115, 0.9960929674, 0.9962074377, 0.9963188920, 0.9964273990, 0.9965330262, 0.9966358396, 0.9967359042, 0.9968332837, 0.9969280408, 0.9970202368, 0.9971099319, 0.9971971854, 0.9972820551, 0.9973645979, 0.9974448697, 0.9975229250, 0.9975988175, 0.9976725998, 0.9977443233, 0.9978140385, 0.9978817950, 0.9979476410, 0.9980116241, 0.9980737909, 0.9981341867, 0.9981928562, 0.9982498431, 0.9983051900, 0.9983589388, 0.9984111304, 0.9984618048, 0.9985110013, 0.9985587581, 0.9986051128, 0.9986501020, 0.9986937616, 0.9987361266, 0.9987772313, 0.9988171093, 0.9988557932, 0.9988933150, 0.9989297061, 0.9989649970, 0.9989992175, 0.9990323968, 0.9990645633, 0.9990957448, 0.9991259685, 0.9991552608, 0.9991836477, 0.9992111543, 0.9992378053, 0.9992636247, 0.9992886360, 0.9993128621, 0.9993363251, 0.9993590470, 0.9993810489, 0.9994023515, 0.9994229750, 0.9994429389, 0.9994622626, 0.9994809646, 0.9994990631, 0.9995165759, 0.9995335201, 0.9995499128, 0.9995657701, 0.9995811081, 0.9995959422, 0.9996102876, 0.9996241591, 0.9996375709, 0.9996505369, 0.9996630707, 0.9996751856, 0.9996868943, 0.9996982094, 0.9997091429, 0.9997197067, 0.9997299123, 0.9997397708, 0.9997492931, 0.9997584897, 0.9997673709, 0.9997759467, 0.9997842266, 0.9997922202, 0.9997999365, 0.9998073844, 0.9998145726, 0.9998215094, 0.9998282029, 0.9998346610, 0.9998408914, 0.9998469015, 0.9998526985, 0.9998582894, 0.9998636810, 0.9998688798, 0.9998738924, 0.9998787248, 0.9998833830, 0.9998878730, 0.9998922003, 0.9998963704, 0.9999003886, 0.9999042601, 0.9999079899, 0.9999115827, 0.9999150433, 0.9999183762, 0.9999215858, 0.9999246764, 0.9999276520, 0.9999305166, 0.9999332742, 0.9999359284, 0.9999384828, 0.9999409411, 0.9999433065, 0.9999455823, 0.9999477718, 0.9999498779, 0.9999519037, 0.9999538519, 0.9999557255, 0.9999575271, 0.9999592592, 0.9999609244, 0.9999625251, 0.9999640637, 0.9999655424, 0.9999669634, 0.9999683288, 0.9999696406, 0.9999709009, 0.9999721116, 0.9999732744, 0.9999743912, 0.9999754636, 0.9999764934, 0.9999774821, 0.9999784313, 0.9999793425, 0.9999802170, 0.9999810564, 0.9999818618, 0.9999826347, 0.9999833762, 0.9999840876, 0.9999847700, 0.9999854245, 0.9999860523, 0.9999866543, 0.9999872315, 0.9999877849, 0.9999883154, 0.9999888240, 0.9999893115, 0.9999897787, 0.9999902264, 0.9999906553, 0.9999910663, 0.9999914601, 0.9999918373, 0.9999921985, 0.9999925445, 0.9999928759, 0.9999931931, 0.9999934969, 0.9999937877, 0.9999940660, 0.9999943325, 0.9999945875, 0.9999948315, 0.9999950650, 0.9999952883, 0.9999955021, 0.9999957065, 0.9999959020, 0.9999960890, 0.9999962678, 0.9999964388, 0.9999966023, 0.9999967586, 0.9999969080, 0.9999970508, 0.9999971873, 0.9999973177, 0.9999974423, 0.9999975614, 0.9999976751, 0.9999977838, 0.9999978875, 0.9999979867, 0.9999980813, 0.9999981717, 0.9999982580, 0.9999983403, 0.9999984190, 0.9999984940, 0.9999985656, 0.9999986340, 0.9999986992, 0.9999987614, 0.9999988208, 0.9999988774, 0.9999989314, 0.9999989829, 0.9999990320, 0.9999990789, 0.9999991235, 0.9999991661, 0.9999992067, 0.9999992453, 0.9999992822, 0.9999993173, 0.9999993508, 0.9999993827, 0.9999994131, 0.9999994420, 0.9999994696, 0.9999994958, 0.9999995208);
var invnormalarr = new Array (-3.0902323062, -2.8781617391, -2.7477813854, -2.6520698079, -2.5758293035, -2.5121443279, -2.4572633902, -2.4089155458, -2.3656181269, -2.3263478740, -2.2903678779, -2.2571292445, -2.2262117693, -2.1972863766, -2.1700903776, -2.1444106209, -2.1200716897, -2.0969274292, -2.0748547344, -2.0537489106, -2.0335201493, -2.0140908120, -1.9953933102, -1.9773684282, -1.9599639845, -1.9431337511, -1.9268365733, -1.9110356475, -1.8956979240, -1.8807936082, -1.8662957435, -1.8521798588, -1.8384236692, -1.8250068211, -1.8119106730, -1.7991181068, -1.7866133655, -1.7743819103, -1.7624102979, -1.7506860713, -1.7391976653, -1.7279343224, -1.7168860184, -1.7060433969, -1.6953977103, -1.6849407679, -1.6746648890, -1.6645628612, -1.6546279024, -1.6448536270, -1.6352340154, -1.6257633862, -1.6164363711, -1.6072478919, -1.5981931399, -1.5892675571, -1.5804668184, -1.5717868165, -1.5632236469, -1.5547735946, -1.5464331223, -1.5381988586, -1.5300675881, -1.5220362417, -1.5141018876, -1.5062617233, -1.4985130679, -1.4908533552, -1.4832801273, -1.4757910282, -1.4683837982, -1.4610562692, -1.4538063589, -1.4466320672, -1.4395314709, -1.4325027208, -1.4255440371, -1.4186537062, -1.4118300775, -1.4050715603, -1.3983766208, -1.3917437794, -1.3851716082, -1.3786587286, -1.3722038090, -1.3658055626, -1.3594627454, -1.3531741545, -1.3469386261, -1.3407550337, -1.3346222867, -1.3285393289, -1.3225051367, -1.3165187184, -1.3105791122, -1.3046853852, -1.2988366326, -1.2930319761, -1.2872705631, -1.2815515655, -1.2758741791, -1.2702376224, -1.2646411357, -1.2590839804, -1.2535654385, -1.2480848111, -1.2426414186, -1.2372345992, -1.2318637087, -1.2265281200, -1.2212272221, -1.2159604197, -1.2107271328, -1.2055267960, -1.2003588580, -1.1952227814, -1.1901180419, -1.1850441279, -1.1800005403, -1.1749867921, -1.1700024075, -1.1650469223, -1.1601198830, -1.1552208466, -1.1503493804, -1.1455050614, -1.1406874763, -1.1358962212, -1.1311309008, -1.1263911290, -1.1216765279, -1.1169867279, -1.1123213672, -1.1076800921, -1.1030625562, -1.0984684203, -1.0938973526, -1.0893490279, -1.0848231279, -1.0803193408, -1.0758373610, -1.0713768893, -1.0669376322, -1.0625193023, -1.0581216177, -1.0537443021, -1.0493870847, -1.0450496997, -1.0407318865, -1.0364333895, -1.0321539580, -1.0278933458, -1.0236513116, -1.0194276182, -1.0152220332, -1.0110343281, -1.0068642788, -1.0027116650, -0.9985762706, -0.9944578832, -0.9903562942, -0.9862712987, -0.9822026953, -0.9781502863, -0.9741138771, -0.9700932766, -0.9660882971, -0.9620987539, -0.9581244654, -0.9541652531, -0.9502209415, -0.9462913580, -0.9423763326, -0.9384756984, -0.9345892911, -0.9307169489, -0.9268585128, -0.9230138263, -0.9191827351, -0.9153650878, -0.9115607351, -0.9077695299, -0.9039913276, -0.9002259857, -0.8964733640, -0.8927333243, -0.8890057306, -0.8852904488, -0.8815873470, -0.8778962951, -0.8742171649, -0.8705498302, -0.8668941666, -0.8632500516, -0.8596173642, -0.8559959855, -0.8523857980, -0.8487866859, -0.8451985353, -0.8416212336, -0.8380546699, -0.8344987348, -0.8309533206, -0.8274183207, -0.8238936303, -0.8203791460, -0.8168747655, -0.8133803882, -0.8098959147, -0.8064212470, -0.8029562883, -0.7995009431, -0.7960551173, -0.7926187177, -0.7891916527, -0.7857738315, -0.7823651649, -0.7789655643, -0.7755749428, -0.7721932142, -0.7688202935, -0.7654560967, -0.7621005410, -0.7587535445, -0.7554150264, -0.7520849067, -0.7487631066, -0.7454495482, -0.7421441544, -0.7388468492, -0.7355575574, -0.7322762047, -0.7290027178, -0.7257370241, -0.7224790519, -0.7192287304, -0.7159859896, -0.7127507602, -0.7095229738, -0.7063025628, -0.7030894603, -0.6998836002, -0.6966849171, -0.6934933463, -0.6903088239, -0.6871312868, -0.6839606724, -0.6807969188, -0.6776399649, -0.6744897502, -0.6713462149, -0.6682092997, -0.6650789462, -0.6619550963, -0.6588376927, -0.6557266788, -0.6526219983, -0.6495235958, -0.6464314163, -0.6433454054, -0.6402655092, -0.6371916745, -0.6341238485, -0.6310619791, -0.6280060144, -0.6249559035, -0.6219115956, -0.6188730405, -0.6158401887, -0.6128129910, -0.6097913987, -0.6067753635, -0.6037648378, -0.6007597742, -0.5977601260, -0.5947658468, -0.5917768906, -0.5887932119, -0.5858147657, -0.5828415073, -0.5798733924, -0.5769103773, -0.5739524186, -0.5709994731, -0.5680514983, -0.5651084520, -0.5621702923, -0.5592369776, -0.5563084670, -0.5533847196, -0.5504656950, -0.5475513533, -0.5446416548, -0.5417365601, -0.5388360303, -0.5359400266, -0.5330485109, -0.5301614451, -0.5272787914, -0.5244005127, -0.5215265718, -0.5186569321, -0.5157915570, -0.5129304106, -0.5100734570, -0.5072206606, -0.5043719862, -0.5015273990, -0.4986868641, -0.4958503473, -0.4930178145, -0.4901892317, -0.4873645655, -0.4845437824, -0.4817268496, -0.4789137341, -0.4761044035, -0.4732988254, -0.4704969679, -0.4676987991, -0.4649042875, -0.4621134018, -0.4593261108, -0.4565423838, -0.4537621902, -0.4509854994, -0.4482122815, -0.4454425063, -0.4426761442, -0.4399131657, -0.4371535414, -0.4343972423, -0.4316442394, -0.4288945041, -0.4261480078, -0.4234047224, -0.4206646196, -0.4179276717, -0.4151938508, -0.4124631294, -0.4097354803, -0.4070108763, -0.4042892903, -0.4015706956, -0.3988550656, -0.3961423739, -0.3934325941, -0.3907257002, -0.3880216662, -0.3853204664, -0.3826220752, -0.3799264670, -0.3772336168, -0.3745434992, -0.3718560894, -0.3691713625, -0.3664892939, -0.3638098590, -0.3611330336, -0.3584587933, -0.3557871140, -0.3531179720, -0.3504513433, -0.3477872043, -0.3451255315, -0.3424663015, -0.3398094910, -0.3371550770, -0.3345030364, -0.3318533464, -0.3292059843, -0.3265609274, -0.3239181533, -0.3212776395, -0.3186393640, -0.3160033044, -0.3133694389, -0.3107377455, -0.3081082024, -0.3054807881, -0.3028554809, -0.3002322594, -0.2976111022, -0.2949919882, -0.2923748962, -0.2897598052, -0.2871466943, -0.2845355427, -0.2819263296, -0.2793190344, -0.2767136367, -0.2741101160, -0.2715084520, -0.2689086245, -0.2663106132, -0.2637143982, -0.2611199595, -0.2585272773, -0.2559363317, -0.2533471031, -0.2507595719, -0.2481737185, -0.2455895234, -0.2430069674, -0.2404260311, -0.2378466954, -0.2352689411, -0.2326927492, -0.2301181007, -0.2275449766, -0.2249733583, -0.2224032269, -0.2198345638, -0.2172673503, -0.2147015680, -0.2121371983, -0.2095742229, -0.2070126234, -0.2044523815, -0.2018934791, -0.1993358981, -0.1967796202, -0.1942246276, -0.1916709022, -0.1891184263, -0.1865671818, -0.1840171512, -0.1814683165, -0.1789206603, -0.1763741648, -0.1738288125, -0.1712845859, -0.1687414676, -0.1661994402, -0.1636584862, -0.1611185885, -0.1585797298, -0.1560418928, -0.1535050604, -0.1509692155, -0.1484343411, -0.1459004200, -0.1433674355, -0.1408353704, -0.1383042080, -0.1357739313, -0.1332445236, -0.1307159681, -0.1281882481, -0.1256613469, -0.1231352477, -0.1206099341, -0.1180853894, -0.1155615971, -0.1130385406, -0.1105162036, -0.1079945694, -0.1054736218, -0.1029533443, -0.1004337205, -0.0979147342, -0.0953963691, -0.0928786088, -0.0903614371, -0.0878448379, -0.0853287949, -0.0828132919, -0.0802983129, -0.0777838416, -0.0752698621, -0.0727563582, -0.0702433138, -0.0677307130, -0.0652185397, -0.0627067779, -0.0601954117, -0.0576844251, -0.0551738021, -0.0526635269, -0.0501535835, -0.0476439560, -0.0451346285, -0.0426255852, -0.0401168102, -0.0376082877, -0.0351000018, -0.0325919367, -0.0300840766, -0.0275764057, -0.0250689083, -0.0225615684, -0.0200543704, -0.0175472984, -0.0150403367, -0.0125334695, -0.0100266811, -0.0075199557, -0.0050132775, -0.0025066309, 0.0000000000, 0.0025066309, 0.0050132775, 0.0075199557, 0.0100266811, 0.0125334695, 0.0150403367, 0.0175472984, 0.0200543704, 0.0225615684, 0.0250689083, 0.0275764057, 0.0300840766, 0.0325919367, 0.0351000018, 0.0376082877, 0.0401168102, 0.0426255852, 0.0451346285, 0.0476439560, 0.0501535835, 0.0526635269, 0.0551738021, 0.0576844251, 0.0601954117, 0.0627067779, 0.0652185397, 0.0677307130, 0.0702433138, 0.0727563582, 0.0752698621, 0.0777838416, 0.0802983129, 0.0828132919, 0.0853287949, 0.0878448379, 0.0903614371, 0.0928786088, 0.0953963691, 0.0979147342, 0.1004337205, 0.1029533443, 0.1054736218, 0.1079945694, 0.1105162036, 0.1130385406, 0.1155615971, 0.1180853894, 0.1206099341, 0.1231352477, 0.1256613469, 0.1281882481, 0.1307159681, 0.1332445236, 0.1357739313, 0.1383042080, 0.1408353704, 0.1433674355, 0.1459004200, 0.1484343411, 0.1509692155, 0.1535050604, 0.1560418928, 0.1585797298, 0.1611185885, 0.1636584862, 0.1661994402, 0.1687414676, 0.1712845859, 0.1738288125, 0.1763741648, 0.1789206603, 0.1814683165, 0.1840171512, 0.1865671818, 0.1891184263, 0.1916709022, 0.1942246276, 0.1967796202, 0.1993358981, 0.2018934791, 0.2044523815, 0.2070126234, 0.2095742229, 0.2121371983, 0.2147015680, 0.2172673503, 0.2198345638, 0.2224032269, 0.2249733583, 0.2275449766, 0.2301181007, 0.2326927492, 0.2352689411, 0.2378466954, 0.2404260311, 0.2430069674, 0.2455895234, 0.2481737185, 0.2507595719, 0.2533471031, 0.2559363317, 0.2585272773, 0.2611199595, 0.2637143982, 0.2663106132, 0.2689086245, 0.2715084520, 0.2741101160, 0.2767136367, 0.2793190344, 0.2819263296, 0.2845355427, 0.2871466943, 0.2897598052, 0.2923748962, 0.2949919882, 0.2976111022, 0.3002322594, 0.3028554809, 0.3054807881, 0.3081082024, 0.3107377455, 0.3133694389, 0.3160033044, 0.3186393640, 0.3212776395, 0.3239181533, 0.3265609274, 0.3292059843, 0.3318533464, 0.3345030364, 0.3371550770, 0.3398094910, 0.3424663015, 0.3451255315, 0.3477872043, 0.3504513433, 0.3531179720, 0.3557871140, 0.3584587933, 0.3611330336, 0.3638098590, 0.3664892939, 0.3691713625, 0.3718560894, 0.3745434992, 0.3772336168, 0.3799264670, 0.3826220752, 0.3853204664, 0.3880216662, 0.3907257002, 0.3934325941, 0.3961423739, 0.3988550656, 0.4015706956, 0.4042892903, 0.4070108763, 0.4097354803, 0.4124631294, 0.4151938508, 0.4179276717, 0.4206646196, 0.4234047224, 0.4261480078, 0.4288945041, 0.4316442394, 0.4343972423, 0.4371535414, 0.4399131657, 0.4426761442, 0.4454425063, 0.4482122815, 0.4509854994, 0.4537621902, 0.4565423838, 0.4593261108, 0.4621134018, 0.4649042875, 0.4676987991, 0.4704969679, 0.4732988254, 0.4761044035, 0.4789137341, 0.4817268496, 0.4845437824, 0.4873645655, 0.4901892317, 0.4930178145, 0.4958503473, 0.4986868641, 0.5015273990, 0.5043719862, 0.5072206606, 0.5100734570, 0.5129304106, 0.5157915570, 0.5186569321, 0.5215265718, 0.5244005127, 0.5272787914, 0.5301614451, 0.5330485109, 0.5359400266, 0.5388360303, 0.5417365601, 0.5446416548, 0.5475513533, 0.5504656950, 0.5533847196, 0.5563084670, 0.5592369776, 0.5621702923, 0.5651084520, 0.5680514983, 0.5709994731, 0.5739524186, 0.5769103773, 0.5798733924, 0.5828415073, 0.5858147657, 0.5887932119, 0.5917768906, 0.5947658468, 0.5977601260, 0.6007597742, 0.6037648378, 0.6067753635, 0.6097913987, 0.6128129910, 0.6158401887, 0.6188730405, 0.6219115956, 0.6249559035, 0.6280060144, 0.6310619791, 0.6341238485, 0.6371916745, 0.6402655092, 0.6433454054, 0.6464314163, 0.6495235958, 0.6526219983, 0.6557266788, 0.6588376927, 0.6619550963, 0.6650789462, 0.6682092997, 0.6713462149, 0.6744897502, 0.6776399649, 0.6807969188, 0.6839606724, 0.6871312868, 0.6903088239, 0.6934933463, 0.6966849171, 0.6998836002, 0.7030894603, 0.7063025628, 0.7095229738, 0.7127507602, 0.7159859896, 0.7192287304, 0.7224790519, 0.7257370241, 0.7290027178, 0.7322762047, 0.7355575574, 0.7388468492, 0.7421441544, 0.7454495482, 0.7487631066, 0.7520849067, 0.7554150264, 0.7587535445, 0.7621005410, 0.7654560967, 0.7688202935, 0.7721932142, 0.7755749428, 0.7789655643, 0.7823651649, 0.7857738315, 0.7891916527, 0.7926187177, 0.7960551173, 0.7995009431, 0.8029562883, 0.8064212470, 0.8098959147, 0.8133803882, 0.8168747655, 0.8203791460, 0.8238936303, 0.8274183207, 0.8309533206, 0.8344987348, 0.8380546699, 0.8416212336, 0.8451985353, 0.8487866859, 0.8523857980, 0.8559959855, 0.8596173642, 0.8632500516, 0.8668941666, 0.8705498302, 0.8742171649, 0.8778962951, 0.8815873470, 0.8852904488, 0.8890057306, 0.8927333243, 0.8964733640, 0.9002259857, 0.9039913276, 0.9077695299, 0.9115607351, 0.9153650878, 0.9191827351, 0.9230138263, 0.9268585128, 0.9307169489, 0.9345892911, 0.9384756984, 0.9423763326, 0.9462913580, 0.9502209415, 0.9541652531, 0.9581244654, 0.9620987539, 0.9660882971, 0.9700932766, 0.9741138771, 0.9781502863, 0.9822026953, 0.9862712987, 0.9903562942, 0.9944578832, 0.9985762706, 1.0027116650, 1.0068642788, 1.0110343281, 1.0152220332, 1.0194276182, 1.0236513116, 1.0278933458, 1.0321539580, 1.0364333895, 1.0407318865, 1.0450496997, 1.0493870847, 1.0537443021, 1.0581216177, 1.0625193023, 1.0669376322, 1.0713768893, 1.0758373610, 1.0803193408, 1.0848231279, 1.0893490279, 1.0938973526, 1.0984684203, 1.1030625562, 1.1076800921, 1.1123213672, 1.1169867279, 1.1216765279, 1.1263911290, 1.1311309008, 1.1358962212, 1.1406874763, 1.1455050614, 1.1503493804, 1.1552208466, 1.1601198830, 1.1650469223, 1.1700024075, 1.1749867921, 1.1800005403, 1.1850441279, 1.1901180419, 1.1952227814, 1.2003588580, 1.2055267960, 1.2107271328, 1.2159604197, 1.2212272221, 1.2265281200, 1.2318637087, 1.2372345992, 1.2426414186, 1.2480848111, 1.2535654385, 1.2590839804, 1.2646411357, 1.2702376224, 1.2758741791, 1.2815515655, 1.2872705631, 1.2930319761, 1.2988366326, 1.3046853852, 1.3105791122, 1.3165187184, 1.3225051367, 1.3285393289, 1.3346222867, 1.3407550337, 1.3469386261, 1.3531741545, 1.3594627454, 1.3658055626, 1.3722038090, 1.3786587286, 1.3851716082, 1.3917437794, 1.3983766208, 1.4050715603, 1.4118300775, 1.4186537062, 1.4255440371, 1.4325027208, 1.4395314709, 1.4466320672, 1.4538063589, 1.4610562692, 1.4683837982, 1.4757910282, 1.4832801273, 1.4908533552, 1.4985130679, 1.5062617233, 1.5141018876, 1.5220362417, 1.5300675881, 1.5381988586, 1.5464331223, 1.5547735946, 1.5632236469, 1.5717868165, 1.5804668184, 1.5892675571, 1.5981931399, 1.6072478919, 1.6164363711, 1.6257633862, 1.6352340154, 1.6448536270, 1.6546279024, 1.6645628612, 1.6746648890, 1.6849407679, 1.6953977103, 1.7060433969, 1.7168860184, 1.7279343224, 1.7391976653, 1.7506860713, 1.7624102979, 1.7743819103, 1.7866133655, 1.7991181068, 1.8119106730, 1.8250068211, 1.8384236692, 1.8521798588, 1.8662957435, 1.8807936082, 1.8956979240, 1.9110356475, 1.9268365733, 1.9431337511, 1.9599639845, 1.9773684282, 1.9953933102, 2.0140908120, 2.0335201493, 2.0537489106, 2.0748547344, 2.0969274292, 2.1200716897, 2.1444106209, 2.1700903776, 2.1972863766, 2.2262117693, 2.2571292445, 2.2903678779, 2.3263478740, 2.3656181269, 2.4089155458, 2.4572633902, 2.5121443279, 2.5758293035, 2.6520698079, 2.7477813854, 2.8781617391, 3.0902323062);
var chi005arr = new Array (7.8794386909, 10.5966347332, 12.8381564442, 14.8602590008, 16.7496023749, 18.5475841788, 20.2777398607, 21.9549549910, 23.5893507821, 25.1881795724, 26.7568489162, 28.2995188226, 29.8194712290, 31.3193496232, 32.8013206462, 34.2671865376, 35.7184656574, 37.1564514527, 38.5822565473, 39.9968463000, 41.4010647510, 42.7956549689, 44.1812752067, 45.5585119397, 46.9278901643, 48.2898823381, 49.6449153064, 50.9933762782, 52.3356177983, 53.6719619459, 55.0027038995, 56.3281149837, 57.6484452851, 58.9639259108, 60.2747709469, 61.5811791645, 62.8833355121, 64.1814124254, 65.4755709821, 66.7659619232);
var chi01arr = new Array (6.6348967118, 9.2103403721, 11.3448666752, 13.2767041362, 15.0862724748, 16.8118938301, 18.4753069054, 20.0902350301, 21.6659943349, 23.2092511594, 24.7249703102, 26.2169673061, 27.6882496111, 29.1412377413, 30.5779141669, 31.9999269072, 33.4086636001, 34.8053057241, 36.1908691096, 37.5662347537, 38.9321726858, 40.2893604409, 41.6383981238, 42.9798201465, 44.3141049062, 45.6416826800, 46.9629421433, 48.2782357947, 49.5878845045, 50.8921813517, 52.1913948836, 53.4857718986, 54.7755398362, 56.0609088397, 57.3420734268, 58.6192144927, 59.8925000340, 61.1620867501, 62.4281209997, 63.6907397318);
var chi025arr = new Array (5.0238864702, 7.3777589083, 9.3484035677, 11.1432867821, 12.8325020135, 14.4493753358, 16.0127642696, 17.5345461399, 19.0227678027, 20.4831773513, 21.9200492558, 23.3366641592, 24.7356048859, 26.1189480457, 27.4883928617, 28.8453507152, 30.1910091003, 31.5263784418, 32.8523268642, 34.1696069072, 35.4788759133, 36.7807120964, 38.0756272697, 39.3640770556, 40.6464691621, 41.9231701548, 43.1945109630, 44.4607918314, 45.7222857969, 46.9792422334, 48.2318895804, 49.4804377243, 50.7250800419, 51.9659951640, 53.2033485030, 54.4372935834, 55.6679732050, 56.8955204634, 58.1200596489, 59.3417070413);
var chi05arr = new Array (3.8414591495, 5.9914645472, 7.8147277639, 9.4877290370, 11.0704977546, 12.5915872441, 14.0671404330, 15.5073130563, 16.9189776161, 18.3070380538, 19.6751375727, 21.0260698181, 22.3620324966, 23.6847913055, 24.9957901322, 26.2962276056, 27.5871116397, 28.8692994337, 30.1435272130, 31.4104328589, 32.6705733677, 33.9244385166, 35.1724616254, 36.4150284984, 37.6524841271, 38.8851386494, 40.1132720532, 41.3371381275, 42.5569677704, 43.7729717791, 44.9853432178, 46.1942594381, 47.3998838132, 48.6023673789, 49.8018495831, 50.9984601847, 52.1923197539, 53.3835406526, 54.5722277955, 55.7584793235);
var chi1arr = new Array (2.7055439714, 4.6051701861, 6.2513884569, 7.7794403400, 9.2363569382, 10.6446406760, 12.0170365593, 13.3615661370, 14.6836566160, 15.9871791727, 17.2750085156, 18.5493477874, 19.8119293127, 21.0641442138, 22.3071295820, 23.5418289239, 24.7690353480, 25.9894230961, 27.2035710629, 28.4119805841, 29.6150894339, 30.8132823377, 32.0068996687, 33.1962442647, 34.3815869773, 35.5631712082, 36.7412167538, 37.9159225537, 39.0874697840, 40.2560237579, 41.4217358570, 42.5847451206, 43.7451796104, 44.9031575863, 46.0587885255, 47.2121740091, 48.3634084971, 49.5125798112, 50.6597704729, 51.8050571870);
var chi25arr = new Array (1.3233047212, 2.7725887223, 4.1083444970, 5.3852690580, 6.6256798899, 7.8408041210, 9.0371474517, 10.2188549708, 11.3887514810, 12.5488613976, 13.7006927124, 14.8454036718, 15.9839062200, 17.1169335969, 18.2450855969, 19.3688602216, 20.4886762401, 21.6048897968, 22.7178067392, 23.8276920187, 24.9347770168, 26.0392650324, 27.1413360129, 28.2411500467, 29.3388503184, 30.4345655040, 31.5284116155, 32.6204940902, 33.7109085873, 34.7997424905, 35.8870758164, 36.9729820551, 38.0575288911, 39.1407788254, 40.2227899478, 41.3036155599, 42.3833057463, 43.4619070198, 44.5394628039, 45.6160137123);
var t005arr = new Array (63.6567411520, 9.9248432005, 5.8409093094, 4.6040948712, 4.0321429833, 3.7074280204, 3.4994832973, 3.3553873311, 3.2498355411, 3.1692726716, 3.1058065136, 3.0545395860, 3.0122758331, 2.9768427340, 2.9467128828, 2.9207816215, 2.8982305183, 2.8784404709, 2.8609346040, 2.8453397066, 2.8313595541, 2.8187560557, 2.8073356778, 2.7969394976, 2.7874358052, 2.7787145234, 2.7706829457, 2.7632624424, 2.7563859021, 2.7499956518, 2.7440419172, 2.7384814797, 2.7332766397, 2.7283943641, 2.7238055859, 2.7194846268, 2.7154087176, 2.7115575976, 2.7079131788, 2.7044592623, 2.7011812980, 2.6980661802, 2.6951020727, 2.6922782588, 2.6895850120, 2.6870134844, 2.6845556096, 2.6822040182, 2.6799519643, 2.6777932611, 2.6757222238, 2.6737336198, 2.6718226249, 2.6699847839, 2.6682159761, 2.6665123846, 2.6648704688, 2.6632869395, 2.6617587376, 2.6602830137, 2.6588571110, 2.6574785487, 2.6561450083, 2.6548543201, 2.6536044515, 2.6523934966, 2.6512196662, 2.6500812791, 2.6489767542, 2.6479046030, 2.6468634230, 2.6458518913, 2.6448687597, 2.6439128487, 2.6429830435, 2.6420783086, 2.6411976067, 2.6403400105, 2.6395046225, 2.6386905913, 2.6378971082, 2.6371234051, 2.6363687515, 2.6356324525, 2.6349138466, 2.6342123036, 2.6335272231, 2.6328580324, 2.6322041850, 2.6315651593, 2.6309404569, 2.6303296017, 2.6297321384, 2.6291476314, 2.6285756638, 2.6280158364, 2.6274677668, 2.6269310884, 2.6264054498, 2.6258905139, 2.6253859570, 2.6248914685, 2.6244067501, 2.6239315150, 2.6234654877, 2.6230084032, 2.6225600064, 2.6221200521, 2.6216883040, 2.6212645347, 2.6208485251, 2.6204400639, 2.6200389477, 2.6196449799, 2.6192579714, 2.6188777392, 2.6185041069, 2.6181369043, 2.6177759667, 2.6174211352, 2.6170722561, 2.6167291810, 2.6163917662, 2.6160598727, 2.6157333662, 2.6154121165, 2.6150959977, 2.6147848879, 2.6144786690, 2.6141772265, 2.6138804496, 2.6135882307, 2.6133004657, 2.6130170535, 2.6127378961, 2.6124628985, 2.6121919682, 2.6119250158, 2.6116619542, 2.6114026991, 2.6111471684, 2.6108952824, 2.6106469637, 2.6104021371, 2.6101607295, 2.6099226696, 2.6096878883, 2.6094563184, 2.6092278945, 2.6090025528, 2.6087802314, 2.6085608700, 2.6083444099, 2.6081307938, 2.6079199662, 2.6077118727, 2.6075064605, 2.6073036781, 2.6071034754, 2.6069058034, 2.6067106144, 2.6065178620, 2.6063275008, 2.6061394866, 2.6059537763, 2.6057703277, 2.6055890998, 2.6054100526, 2.6052331468, 2.6050583444, 2.6048856080, 2.6047149012, 2.6045461884, 2.6043794350, 2.6042146069, 2.6040516711, 2.6038905951, 2.6037313472, 2.6035738966, 2.6034182129, 2.6032642667, 2.6031120289, 2.6029614712, 2.6028125661, 2.6026652865, 2.6025196059, 2.6023754983, 2.6022329385, 2.6020919017, 2.6019523635, 2.6018143003, 2.6016776887, 2.6015425059, 2.6014087298, 2.6012763384, 2.6011453104, 2.6010156247, 2.6008872610, 2.6007601989, 2.6006344190, 2.6005099018, 2.6003866285, 2.6002645804, 2.6001437395, 2.6000240879, 2.5999056081, 2.5997882829, 2.5996720957, 2.5995570299, 2.5994430694, 2.5993301983, 2.5992184010, 2.5991076624, 2.5989979674, 2.5988893014, 2.5987816499, 2.5986749989, 2.5985693344, 2.5984646428, 2.5983609107, 2.5982581251, 2.5981562729, 2.5980553416, 2.5979553187, 2.5978561921, 2.5977579496, 2.5976605796, 2.5975640704, 2.5974684108, 2.5973735895, 2.5972795956, 2.5971864182, 2.5970940468, 2.5970024710, 2.5969116806, 2.5968216654, 2.5967324156, 2.5966439215, 2.5965561735, 2.5964691622, 2.5963828784, 2.5962973130, 2.5962124571, 2.5961283018, 2.5960448386, 2.5959620589, 2.5958799544, 2.5957985168, 2.5957177380, 2.5956376102, 2.5955581254, 2.5954792759, 2.5954010542, 2.5953234527, 2.5952464642, 2.5951700814, 2.5950942972, 2.5950191046, 2.5949444966, 2.5948704665, 2.5947970076, 2.5947241134, 2.5946517772, 2.5945799928, 2.5945087538, 2.5944380541, 2.5943678876, 2.5942982481, 2.5942291300, 2.5941605272, 2.5940924341, 2.5940248450, 2.5939577543, 2.5938911565, 2.5938250463, 2.5937594182, 2.5936942671, 2.5936295877, 2.5935653749, 2.5935016238, 2.5934383293, 2.5933754866, 2.5933130908, 2.5932511372, 2.5931896212, 2.5931285380, 2.5930678831, 2.5930076521, 2.5929478406, 2.5928884440, 2.5928294583, 2.5927708790, 2.5927127020, 2.5926549233, 2.5925975386, 2.5925405440, 2.5924839356, 2.5924277093, 2.5923718615, 2.5923163882, 2.5922612856, 2.5922065502, 2.5921521782, 2.5920981661, 2.5920445102, 2.5919912070, 2.5919382532, 2.5918856452, 2.5918333797, 2.5917814534, 2.5917298629, 2.5916786050, 2.5916276766, 2.5915770744, 2.5915267953, 2.5914768363, 2.5914271942, 2.5913778661, 2.5913288490, 2.5912801400, 2.5912317362, 2.5911836348, 2.5911358328, 2.5910883275, 2.5910411162, 2.5909941961, 2.5909475646, 2.5909012190, 2.5908551567, 2.5908093750, 2.5907638715, 2.5907186436, 2.5906736888, 2.5906290046, 2.5905845886, 2.5905404385, 2.5904965517, 2.5904529260, 2.5904095591, 2.5903664486, 2.5903235923, 2.5902809879, 2.5902386333, 2.5901965262, 2.5901546645, 2.5901130460, 2.5900716686, 2.5900305302, 2.5899896289, 2.5899489624, 2.5899085288, 2.5898683262, 2.5898283525, 2.5897886058, 2.5897490841, 2.5897097856, 2.5896707084, 2.5896318506, 2.5895932103, 2.5895547858, 2.5895165752, 2.5894785768, 2.5894407888, 2.5894032094, 2.5893658369, 2.5893286697, 2.5892917060, 2.5892549442, 2.5892183826, 2.5891820196, 2.5891458536, 2.5891098830, 2.5890741061, 2.5890385216, 2.5890031277, 2.5889679229, 2.5889329058, 2.5888980749, 2.5888634287, 2.5888289657, 2.5887946844, 2.5887605834, 2.5887266614, 2.5886929169, 2.5886593485, 2.5886259548, 2.5885927345, 2.5885596863, 2.5885268087, 2.5884941005, 2.5884615604, 2.5884291871, 2.5883969793, 2.5883649357, 2.5883330551, 2.5883013363, 2.5882697779, 2.5882383789, 2.5882071380, 2.5881760539, 2.5881451257, 2.5881143519, 2.5880837316, 2.5880532635, 2.5880229466, 2.5879927796, 2.5879627616, 2.5879328914, 2.5879031678, 2.5878735899, 2.5878441566, 2.5878148667, 2.5877857194, 2.5877567134, 2.5877278478, 2.5876991216, 2.5876705338, 2.5876420834, 2.5876137693, 2.5875855906, 2.5875575464, 2.5875296357, 2.5875018575, 2.5874742108, 2.5874466948, 2.5874193086, 2.5873920512, 2.5873649216, 2.5873379191, 2.5873110427, 2.5872842915, 2.5872576647, 2.5872311614, 2.5872047808, 2.5871785219, 2.5871523840, 2.5871263662, 2.5871004677, 2.5870746876, 2.5870490253, 2.5870234797, 2.5869980503, 2.5869727361, 2.5869475364, 2.5869224504, 2.5868974774, 2.5868726165, 2.5868478671, 2.5868232284, 2.5867986996, 2.5867742800, 2.5867499689, 2.5867257655, 2.5867016692, 2.5866776793, 2.5866537950, 2.5866300156, 2.5866063404, 2.5865827689, 2.5865593002, 2.5865359337, 2.5865126688, 2.5864895047, 2.5864664409, 2.5864434767, 2.5864206114, 2.5863978444, 2.5863751751, 2.5863526028, 2.5863301270, 2.5863077469, 2.5862854621, 2.5862632718, 2.5862411755, 2.5862191726, 2.5861972625, 2.5861754446, 2.5861537183, 2.5861320831, 2.5861105384, 2.5860890836, 2.5860677182, 2.5860464415, 2.5860252531, 2.5860041525, 2.5859831389, 2.5859622120, 2.5859413711, 2.5859206159, 2.5858999456, 2.5858793598, 2.5858588581, 2.5858384398, 2.5858181044, 2.5857978516, 2.5857776807, 2.5857575912, 2.5857375827, 2.5857176548, 2.5856978068, 2.5856780383, 2.5856583489, 2.5856387380, 2.5856192052, 2.5855997501, 2.5855803722, 2.5855610709, 2.5855418459, 2.5855226967, 2.5855036229, 2.5854846240, 2.5854656996, 2.5854468492, 2.5854280724, 2.5854093688, 2.5853907379, 2.5853721794, 2.5853536927, 2.5853352776, 2.5853169335, 2.5852986601, 2.5852804569, 2.5852623236, 2.5852442597, 2.5852262649, 2.5852083388, 2.5851904809, 2.5851726908, 2.5851549683, 2.5851373129, 2.5851197242, 2.5851022018, 2.5850847454, 2.5850673546, 2.5850500291, 2.5850327684, 2.5850155722, 2.5849984401, 2.5849813719, 2.5849643670, 2.5849474253, 2.5849305462, 2.5849137295, 2.5848969749, 2.5848802820, 2.5848636503, 2.5848470798, 2.5848305698, 2.5848141203, 2.5847977307, 2.5847814008, 2.5847651303, 2.5847489188, 2.5847327660, 2.5847166717, 2.5847006354, 2.5846846568, 2.5846687358, 2.5846528718, 2.5846370648, 2.5846213142, 2.5846056199, 2.5845899815, 2.5845743987, 2.5845588713, 2.5845433989, 2.5845279813, 2.5845126181, 2.5844973091, 2.5844820540, 2.5844668525, 2.5844517043, 2.5844366092, 2.5844215668, 2.5844065768, 2.5843916392, 2.5843767534, 2.5843619193, 2.5843471366, 2.5843324050, 2.5843177244, 2.5843030943, 2.5842885145, 2.5842739849, 2.5842595050, 2.5842450748, 2.5842306938, 2.5842163620, 2.5842020789, 2.5841878444, 2.5841736582, 2.5841595201, 2.5841454298, 2.5841313871, 2.5841173918, 2.5841034435, 2.5840895421, 2.5840756874, 2.5840618790, 2.5840481169, 2.5840344006, 2.5840207301, 2.5840071050, 2.5839935252, 2.5839799904, 2.5839665004, 2.5839530550, 2.5839396540, 2.5839262970, 2.5839129841, 2.5838997148, 2.5838864890, 2.5838733065, 2.5838601670, 2.5838470704, 2.5838340165, 2.5838210050, 2.5838080357, 2.5837951085, 2.5837822230, 2.5837693792, 2.5837565768, 2.5837438157, 2.5837310955, 2.5837184162, 2.5837057775, 2.5836931792, 2.5836806211, 2.5836681031, 2.5836556250, 2.5836431865, 2.5836307875, 2.5836184278, 2.5836061072, 2.5835938255, 2.5835815825, 2.5835693781, 2.5835572120, 2.5835450841, 2.5835329943, 2.5835209422, 2.5835089278, 2.5834969509, 2.5834850113, 2.5834731088, 2.5834612433, 2.5834494145, 2.5834376224, 2.5834258667, 2.5834141472, 2.5834024639, 2.5833908165, 2.5833792049, 2.5833676289, 2.5833560883, 2.5833445830, 2.5833331128, 2.5833216776, 2.5833102772, 2.5832989114, 2.5832875801, 2.5832762832, 2.5832650204, 2.5832537916, 2.5832425967, 2.5832314355, 2.5832203078, 2.5832092136, 2.5831981526, 2.5831871247, 2.5831761298, 2.5831651677, 2.5831542383, 2.5831433413, 2.5831324768, 2.5831216444, 2.5831108442, 2.5831000759, 2.5830893394, 2.5830786346, 2.5830679613, 2.5830573193, 2.5830467087, 2.5830361291, 2.5830255805, 2.5830150627, 2.5830045756, 2.5829941191, 2.5829836930, 2.5829732973, 2.5829629317, 2.5829525961, 2.5829422904, 2.5829320145, 2.5829217683, 2.5829115516, 2.5829013642, 2.5828912062, 2.5828810772, 2.5828709773, 2.5828609063, 2.5828508640, 2.5828408504, 2.5828308653, 2.5828209086, 2.5828109802, 2.5828010799, 2.5827912077, 2.5827813634, 2.5827715469, 2.5827617581, 2.5827519968, 2.5827422630, 2.5827325566, 2.5827228773, 2.5827132252, 2.5827036000, 2.5826940017, 2.5826844302, 2.5826748854, 2.5826653671, 2.5826558752, 2.5826464096, 2.5826369703, 2.5826275570, 2.5826181698, 2.5826088084, 2.5825994728, 2.5825901629, 2.5825808786, 2.5825716197, 2.5825623862, 2.5825531780, 2.5825439949, 2.5825348368, 2.5825257037, 2.5825165955, 2.5825075119, 2.5824984531, 2.5824894187, 2.5824804089, 2.5824714233, 2.5824624620, 2.5824535249, 2.5824446118, 2.5824357226, 2.5824268573, 2.5824180158, 2.5824091980, 2.5824004037, 2.5823916328, 2.5823828854, 2.5823741613, 2.5823654603, 2.5823567825, 2.5823481276, 2.5823394957, 2.5823308867, 2.5823223003, 2.5823137366, 2.5823051955, 2.5822966768, 2.5822881805, 2.5822797066, 2.5822712548, 2.5822628251, 2.5822544175, 2.5822460318, 2.5822376680, 2.5822293259, 2.5822210056, 2.5822127068, 2.5822044296, 2.5821961738, 2.5821879394, 2.5821797262, 2.5821715342, 2.5821633633, 2.5821552135, 2.5821470846, 2.5821389766, 2.5821308893, 2.5821228228, 2.5821147769, 2.5821067515, 2.5820987466, 2.5820907621, 2.5820827979, 2.5820748539, 2.5820669301, 2.5820590263, 2.5820511426, 2.5820432788, 2.5820354349, 2.5820276107, 2.5820198062, 2.5820120214, 2.5820042561, 2.5819965103, 2.5819887839, 2.5819810768, 2.5819733891, 2.5819657204, 2.5819580710, 2.5819504405, 2.5819428291, 2.5819352365, 2.5819276628, 2.5819201078, 2.5819125716, 2.5819050539, 2.5818975548, 2.5818900743, 2.5818826121, 2.5818751683, 2.5818677427, 2.5818603354, 2.5818529463, 2.5818455752, 2.5818382221, 2.5818308870, 2.5818235698, 2.5818162704, 2.5818089887, 2.5818017248, 2.5817944785, 2.5817872497, 2.5817800384, 2.5817728446, 2.5817656681, 2.5817585090, 2.5817513671, 2.5817442424, 2.5817371348, 2.5817300442, 2.5817229707, 2.5817159141, 2.5817088744, 2.5817018515, 2.5816948453, 2.5816878559, 2.5816808830, 2.5816739268, 2.5816669871, 2.5816600638, 2.5816531570, 2.5816462665, 2.5816393922, 2.5816325343, 2.5816256924, 2.5816188667, 2.5816120571, 2.5816052634, 2.5815984857, 2.5815917239, 2.5815849779, 2.5815782477, 2.5815715332, 2.5815648343, 2.5815581511, 2.5815514835, 2.5815448313, 2.5815381946, 2.5815315733, 2.5815249673, 2.5815183766, 2.5815118012, 2.5815052409, 2.5814986957, 2.5814921657, 2.5814856507, 2.5814791506, 2.5814726654, 2.5814661952, 2.5814597397, 2.5814532990, 2.5814468731, 2.5814404618, 2.5814340651, 2.5814276830, 2.5814213154, 2.5814149623, 2.5814086236, 2.5814022992, 2.5813959892, 2.5813896935, 2.5813834120, 2.5813771446, 2.5813708914, 2.5813646523, 2.5813584272, 2.5813522161, 2.5813460189, 2.5813398356, 2.5813336662, 2.5813275105, 2.5813213686, 2.5813152405, 2.5813091259, 2.5813030250, 2.5812969377, 2.5812908639, 2.5812848036, 2.5812787567, 2.5812727232, 2.5812667030, 2.5812606961, 2.5812547025, 2.5812487221, 2.5812427549, 2.5812368008, 2.5812308598, 2.5812249318, 2.5812190169, 2.5812131148, 2.5812072257, 2.5812013495, 2.5811954861, 2.5811896355, 2.5811837976, 2.5811779724, 2.5811721599, 2.5811663600, 2.5811605727, 2.5811547979, 2.5811490356, 2.5811432857, 2.5811375483, 2.5811318233, 2.5811261106, 2.5811204102, 2.5811147220, 2.5811090461, 2.5811033823, 2.5810977307, 2.5810920912, 2.5810864637, 2.5810808483, 2.5810752448, 2.5810696533, 2.5810640737, 2.5810585060, 2.5810529501, 2.5810474060, 2.5810418736, 2.5810363530, 2.5810308440, 2.5810253467, 2.5810198610, 2.5810143869, 2.5810089243, 2.5810034732, 2.5809980336, 2.5809926054, 2.5809871885, 2.5809817831, 2.5809763889, 2.5809710060, 2.5809656344, 2.5809602740, 2.5809549248, 2.5809495867, 2.5809442597, 2.5809389438, 2.5809336389, 2.5809283450, 2.5809230621, 2.5809177902, 2.5809125291, 2.5809072789, 2.5809020395, 2.5808968110, 2.5808915932, 2.5808863861, 2.5808811898, 2.5808760041, 2.5808708290, 2.5808656646, 2.5808605107, 2.5808553673, 2.5808502345, 2.5808451121, 2.5808400002, 2.5808348987, 2.5808298075, 2.5808247267, 2.5808196563, 2.5808145961, 2.5808095461, 2.5808045064, 2.5807994768, 2.5807944575, 2.5807894482, 2.5807844491, 2.5807794600, 2.5807744809, 2.5807695119, 2.5807645528, 2.5807596037, 2.5807546645, 2.5807497351, 2.5807448157, 2.5807399060, 2.5807350062, 2.5807301161, 2.5807252358, 2.5807203652, 2.5807155042, 2.5807106529, 2.5807058113, 2.5807009792, 2.5806961567, 2.5806913437, 2.5806865403, 2.5806817463, 2.5806769618, 2.5806721867, 2.5806674210, 2.5806626647, 2.5806579177, 2.5806531800, 2.5806484516, 2.5806437325, 2.5806390226, 2.5806343220, 2.5806296305, 2.5806249481, 2.5806202749, 2.5806156108, 2.5806109557, 2.5806063097, 2.5806016727, 2.5805970447, 2.5805924257, 2.5805878156, 2.5805832144, 2.5805786221, 2.5805740387, 2.5805694642, 2.5805648984, 2.5805603414, 2.5805557932, 2.5805512537, 2.5805467229, 2.5805422009, 2.5805376874, 2.5805331826, 2.5805286865, 2.5805241989, 2.5805197199, 2.5805152494, 2.5805107874, 2.5805063339, 2.5805018889, 2.5804974523, 2.5804930241, 2.5804886044, 2.5804841930, 2.5804797899, 2.5804753952, 2.5804710088, 2.5804666306, 2.5804622607, 2.5804578990, 2.5804535455, 2.5804492002, 2.5804448631, 2.5804405341, 2.5804362132, 2.5804319004, 2.5804275957, 2.5804232990, 2.5804190103, 2.5804147297, 2.5804104570, 2.5804061923, 2.5804019355, 2.5803976866, 2.5803934456, 2.5803892124, 2.5803849872, 2.5803807697, 2.5803765600, 2.5803723582, 2.5803681640, 2.5803639776, 2.5803597990, 2.5803556280, 2.5803514647, 2.5803473090, 2.5803431610, 2.5803390206, 2.5803348878, 2.5803307625, 2.5803266448, 2.5803225346, 2.5803184319, 2.5803143368, 2.5803102490, 2.5803061687, 2.5803020959, 2.5802980304, 2.5802939724, 2.5802899217, 2.5802858783, 2.5802818422, 2.5802778135, 2.5802737921, 2.5802697779, 2.5802657709, 2.5802617712, 2.5802577787, 2.5802537934, 2.5802498152, 2.5802458442, 2.5802418803, 2.5802379235, 2.5802339738, 2.5802300312, 2.5802260956, 2.5802221671, 2.5802182456, 2.5802143311, 2.5802104235, 2.5802065229, 2.5802026293, 2.5801987426, 2.5801948627, 2.5801909898, 2.5801871237, 2.5801832645, 2.5801794121, 2.5801755665, 2.5801717277, 2.5801678957, 2.5801640704, 2.5801602519, 2.5801564401, 2.5801526350, 2.5801488366, 2.5801450448, 2.5801412597, 2.5801374813, 2.5801337094, 2.5801299442, 2.5801261855, 2.5801224334, 2.5801186879, 2.5801149488, 2.5801112163, 2.5801074903, 2.5801037708, 2.5801000577, 2.5800963511, 2.5800926509, 2.5800889571, 2.5800852697, 2.5800815887, 2.5800779140, 2.5800742457, 2.5800705837, 2.5800669281, 2.5800632787, 2.5800596356, 2.5800559988, 2.5800523682, 2.5800487439, 2.5800451257, 2.5800415138, 2.5800379080, 2.5800343085, 2.5800307150, 2.5800271278, 2.5800235466, 2.5800199715, 2.5800164025, 2.5800128396, 2.5800092828, 2.5800057320, 2.5800021872, 2.5799986485, 2.5799951157, 2.5799915889, 2.5799880681, 2.5799845532, 2.5799810443, 2.5799775413, 2.5799740442, 2.5799705530, 2.5799670676, 2.5799635882, 2.5799601145, 2.5799566468, 2.5799531848, 2.5799497286, 2.5799462782, 2.5799428336, 2.5799393948, 2.5799359616, 2.5799325343, 2.5799291126, 2.5799256967, 2.5799222864, 2.5799188818, 2.5799154828, 2.5799120896, 2.5799087019, 2.5799053198, 2.5799019434, 2.5798985725, 2.5798952073, 2.5798918476, 2.5798884934, 2.5798851448, 2.5798818016, 2.5798784640, 2.5798751319, 2.5798718053, 2.5798684841, 2.5798651684, 2.5798618581, 2.5798585533, 2.5798552538, 2.5798519598, 2.5798486711, 2.5798453879, 2.5798421099, 2.5798388374, 2.5798355701, 2.5798323082, 2.5798290516, 2.5798258003, 2.5798225542, 2.5798193134, 2.5798160779, 2.5798128477, 2.5798096226, 2.5798064028, 2.5798031882, 2.5797999788, 2.5797967745, 2.5797935754, 2.5797903815, 2.5797871927, 2.5797840091, 2.5797808305, 2.5797776571, 2.5797744888, 2.5797713255, 2.5797681673, 2.5797650142, 2.5797618661, 2.5797587231, 2.5797555850, 2.5797524520, 2.5797493240, 2.5797462009, 2.5797430829, 2.5797399698, 2.5797368616, 2.5797337584, 2.5797306601, 2.5797275667, 2.5797244782, 2.5797213946, 2.5797183159, 2.5797152420, 2.5797121730, 2.5797091089, 2.5797060495, 2.5797029950, 2.5796999453, 2.5796969005, 2.5796938603, 2.5796908250, 2.5796877944, 2.5796847686, 2.5796817476, 2.5796787312, 2.5796757196, 2.5796727127, 2.5796697105, 2.5796667129, 2.5796637201, 2.5796607319, 2.5796577484, 2.5796547695, 2.5796517952, 2.5796488256, 2.5796458605, 2.5796429001, 2.5796399443, 2.5796369930, 2.5796340463, 2.5796311042, 2.5796281666, 2.5796252335, 2.5796223050, 2.5796193810, 2.5796164615, 2.5796135465, 2.5796106360, 2.5796077299, 2.5796048283, 2.5796019312, 2.5795990385, 2.5795961502, 2.5795932664, 2.5795903869, 2.5795875119, 2.5795846413, 2.5795817750, 2.5795789131, 2.5795760556, 2.5795732025, 2.5795703536, 2.5795675091, 2.5795646690, 2.5795618331, 2.5795590016, 2.5795561743, 2.5795533513, 2.5795505326, 2.5795477182, 2.5795449080, 2.5795421020, 2.5795393003, 2.5795365028, 2.5795337096, 2.5795309205, 2.5795281356, 2.5795253550, 2.5795225784, 2.5795198061, 2.5795170379, 2.5795142739, 2.5795115140, 2.5795087583, 2.5795060066, 2.5795032591, 2.5795005157, 2.5794977764, 2.5794950411, 2.5794923100, 2.5794895829, 2.5794868599, 2.5794841409, 2.5794814259, 2.5794787150, 2.5794760081, 2.5794733052, 2.5794706063, 2.5794679114, 2.5794652205, 2.5794625336, 2.5794598507, 2.5794571717, 2.5794544966, 2.5794518255, 2.5794491583, 2.5794464951, 2.5794438358, 2.5794411804, 2.5794385288, 2.5794358812, 2.5794332374, 2.5794305976, 2.5794279615, 2.5794253294, 2.5794227011, 2.5794200766, 2.5794174560, 2.5794148392, 2.5794122261, 2.5794096169, 2.5794070115, 2.5794044099, 2.5794018121, 2.5793992180, 2.5793966278, 2.5793940412, 2.5793914584, 2.5793888794, 2.5793863041, 2.5793837325, 2.5793811646, 2.5793786004, 2.5793760399, 2.5793734832, 2.5793709301, 2.5793683806, 2.5793658349, 2.5793632928, 2.5793607544, 2.5793582196, 2.5793556884, 2.5793531609, 2.5793506370, 2.5793481167, 2.5793456000, 2.5793430869, 2.5793405774, 2.5793380714, 2.5793355691, 2.5793330703, 2.5793305751, 2.5793280834, 2.5793255953, 2.5793231107, 2.5793206296, 2.5793181521, 2.5793156780, 2.5793132075, 2.5793107405, 2.5793082769, 2.5793058169, 2.5793033603, 2.5793009072, 2.5792984576, 2.5792960114, 2.5792935686, 2.5792911293, 2.5792886935, 2.5792862610, 2.5792838320, 2.5792814064, 2.5792789842, 2.5792765654, 2.5792741500, 2.5792717379, 2.5792693292, 2.5792669239, 2.5792645220, 2.5792621234, 2.5792597282, 2.5792573363, 2.5792549477, 2.5792525625, 2.5792501806, 2.5792478020, 2.5792454267, 2.5792430547, 2.5792406860, 2.5792383206, 2.5792359584, 2.5792335995, 2.5792312439, 2.5792288916, 2.5792265425, 2.5792241966, 2.5792218540, 2.5792195146, 2.5792171785, 2.5792148455, 2.5792125158, 2.5792101892, 2.5792078659, 2.5792055458, 2.5792032288, 2.5792009150, 2.5791986044, 2.5791962970, 2.5791939927, 2.5791916916, 2.5791893936, 2.5791870987, 2.5791848070, 2.5791825184, 2.5791802329, 2.5791779506, 2.5791756713, 2.5791733952, 2.5791711221, 2.5791688521, 2.5791665853, 2.5791643214, 2.5791620607, 2.5791598030, 2.5791575484, 2.5791552968, 2.5791530483, 2.5791508028, 2.5791485603, 2.5791463209, 2.5791440845, 2.5791418511, 2.5791396207, 2.5791373933, 2.5791351689, 2.5791329475, 2.5791307291, 2.5791285136, 2.5791263012, 2.5791240917, 2.5791218851, 2.5791196815, 2.5791174809, 2.5791152832, 2.5791130884, 2.5791108966, 2.5791087076, 2.5791065216, 2.5791043386, 2.5791021584, 2.5790999811, 2.5790978067, 2.5790956352, 2.5790934666, 2.5790913009, 2.5790891380, 2.5790869780, 2.5790848209, 2.5790826666, 2.5790805152, 2.5790783666, 2.5790762208, 2.5790740779, 2.5790719378, 2.5790698006, 2.5790676661, 2.5790655345, 2.5790634056, 2.5790612796, 2.5790591563, 2.5790570359, 2.5790549182, 2.5790528033, 2.5790506912, 2.5790485818, 2.5790464752, 2.5790443714, 2.5790422703, 2.5790401719, 2.5790380763, 2.5790359834, 2.5790338933, 2.5790318058, 2.5790297211, 2.5790276391, 2.5790255598, 2.5790234832, 2.5790214093, 2.5790193381, 2.5790172696, 2.5790152038, 2.5790131406, 2.5790110801, 2.5790090223, 2.5790069672, 2.5790049146, 2.5790028648, 2.5790008176, 2.5789987730, 2.5789967311, 2.5789946917, 2.5789926551, 2.5789906210, 2.5789885895, 2.5789865607, 2.5789845344, 2.5789825108, 2.5789804898, 2.5789784713, 2.5789764554, 2.5789744421, 2.5789724314, 2.5789704233, 2.5789684177, 2.5789664146, 2.5789644142, 2.5789624162, 2.5789604209, 2.5789584280, 2.5789564377, 2.5789544499, 2.5789524647, 2.5789504820, 2.5789485018, 2.5789465241, 2.5789445489, 2.5789425762, 2.5789406060, 2.5789386383, 2.5789366731, 2.5789347103, 2.5789327501, 2.5789307923, 2.5789288370, 2.5789268841, 2.5789249337, 2.5789229858, 2.5789210403, 2.5789190973, 2.5789171566, 2.5789152185, 2.5789132828, 2.5789113494, 2.5789094186, 2.5789074901, 2.5789055640, 2.5789036404, 2.5789017192, 2.5788998003, 2.5788978839, 2.5788959698, 2.5788940581, 2.5788921489, 2.5788902419, 2.5788883374, 2.5788864352, 2.5788845354, 2.5788826380, 2.5788807429, 2.5788788502, 2.5788769598, 2.5788750717, 2.5788731860, 2.5788713026, 2.5788694216, 2.5788675429, 2.5788656665, 2.5788637924, 2.5788619206, 2.5788600511, 2.5788581840, 2.5788563191, 2.5788544565, 2.5788525963, 2.5788507383, 2.5788488826, 2.5788470291, 2.5788451780, 2.5788433291, 2.5788414825, 2.5788396381, 2.5788377960, 2.5788359561, 2.5788341185, 2.5788322832, 2.5788304501, 2.5788286192, 2.5788267905, 2.5788249641, 2.5788231399, 2.5788213180, 2.5788194982, 2.5788176806, 2.5788158653, 2.5788140522, 2.5788122412, 2.5788104325, 2.5788086260, 2.5788068216, 2.5788050194, 2.5788032194, 2.5788014216, 2.5787996260, 2.5787978325, 2.5787960412, 2.5787942520, 2.5787924650, 2.5787906802, 2.5787888975, 2.5787871170, 2.5787853386, 2.5787835623, 2.5787817881, 2.5787800161, 2.5787782463, 2.5787764785, 2.5787747129, 2.5787729493, 2.5787711879, 2.5787694286, 2.5787676714, 2.5787659163, 2.5787641633, 2.5787624124, 2.5787606635, 2.5787589168, 2.5787571721, 2.5787554295, 2.5787536890, 2.5787519506, 2.5787502142, 2.5787484799, 2.5787467476, 2.5787450174, 2.5787432892, 2.5787415631, 2.5787398391, 2.5787381170, 2.5787363970, 2.5787346791, 2.5787329632, 2.5787312492, 2.5787295374, 2.5787278275, 2.5787261197, 2.5787244138, 2.5787227100, 2.5787210082, 2.5787193084, 2.5787176105, 2.5787159147, 2.5787142209, 2.5787125290, 2.5787108391, 2.5787091512, 2.5787074653, 2.5787057814, 2.5787040994, 2.5787024194, 2.5787007414, 2.5786990653, 2.5786973911, 2.5786957190, 2.5786940487, 2.5786923804, 2.5786907141, 2.5786890497, 2.5786873872, 2.5786857267, 2.5786840681, 2.5786824114, 2.5786807566, 2.5786791038, 2.5786774529, 2.5786758038, 2.5786741567, 2.5786725115, 2.5786708682, 2.5786692268, 2.5786675873, 2.5786659497, 2.5786643140, 2.5786626801, 2.5786610482, 2.5786594181, 2.5786577899, 2.5786561636, 2.5786545391, 2.5786529165, 2.5786512958, 2.5786496769, 2.5786480599, 2.5786464447, 2.5786448314, 2.5786432199, 2.5786416103, 2.5786400025, 2.5786383965, 2.5786367924, 2.5786351901, 2.5786335897, 2.5786319911, 2.5786303942, 2.5786287993, 2.5786272061, 2.5786256147, 2.5786240252, 2.5786224374, 2.5786208515, 2.5786192673, 2.5786176850, 2.5786161044, 2.5786145256, 2.5786129487, 2.5786113735, 2.5786098001, 2.5786082284, 2.5786066586, 2.5786050905, 2.5786035242, 2.5786019596, 2.5786003969, 2.5785988358, 2.5785972766, 2.5785957191, 2.5785941633, 2.5785926093, 2.5785910570, 2.5785895065, 2.5785879577, 2.5785864107, 2.5785848654, 2.5785833218, 2.5785817799, 2.5785802398, 2.5785787014, 2.5785771647, 2.5785756298, 2.5785740965, 2.5785725650, 2.5785710352, 2.5785695070, 2.5785679806, 2.5785664559, 2.5785649328, 2.5785634115, 2.5785618919, 2.5785603739, 2.5785588576, 2.5785573431, 2.5785558302, 2.5785543189, 2.5785528094, 2.5785513015, 2.5785497953, 2.5785482907, 2.5785467878, 2.5785452866, 2.5785437870, 2.5785422891, 2.5785407929, 2.5785392983, 2.5785378053, 2.5785363140, 2.5785348243, 2.5785333363, 2.5785318499, 2.5785303651, 2.5785288819, 2.5785274004, 2.5785259205, 2.5785244423, 2.5785229656, 2.5785214906, 2.5785200172, 2.5785185454, 2.5785170752, 2.5785156066, 2.5785141396, 2.5785126742, 2.5785112105, 2.5785097483, 2.5785082877, 2.5785068287, 2.5785053713, 2.5785039154, 2.5785024612, 2.5785010085, 2.5784995575, 2.5784981079, 2.5784966600, 2.5784952136, 2.5784937688, 2.5784923256, 2.5784908839, 2.5784894438, 2.5784880053, 2.5784865683, 2.5784851328, 2.5784836989, 2.5784822666, 2.5784808358, 2.5784794065, 2.5784779788, 2.5784765526, 2.5784751280, 2.5784737048, 2.5784722832, 2.5784708632, 2.5784694447, 2.5784680276, 2.5784666122, 2.5784651982, 2.5784637857, 2.5784623748, 2.5784609653, 2.5784595574, 2.5784581510, 2.5784567461, 2.5784553427, 2.5784539407, 2.5784525403, 2.5784511414, 2.5784497440, 2.5784483480, 2.5784469535, 2.5784455606, 2.5784441691, 2.5784427791, 2.5784413905, 2.5784400034, 2.5784386179, 2.5784372337, 2.5784358511, 2.5784344699, 2.5784330902, 2.5784317119, 2.5784303351, 2.5784289597, 2.5784275858, 2.5784262134, 2.5784248424, 2.5784234728, 2.5784221047, 2.5784207381, 2.5784193728, 2.5784180091, 2.5784166467, 2.5784152858, 2.5784139263, 2.5784125682, 2.5784112116, 2.5784098564, 2.5784085026, 2.5784071502, 2.5784057993, 2.5784044498, 2.5784031016, 2.5784017549, 2.5784004096, 2.5783990657, 2.5783977232, 2.5783963822, 2.5783950425, 2.5783937042, 2.5783923673, 2.5783910318, 2.5783896977, 2.5783883649, 2.5783870336, 2.5783857036, 2.5783843751, 2.5783830479, 2.5783817221, 2.5783803976, 2.5783790746, 2.5783777529, 2.5783764326, 2.5783751136, 2.5783737960, 2.5783724798, 2.5783711649, 2.5783698514, 2.5783685393, 2.5783672285, 2.5783659190, 2.5783646110, 2.5783633042, 2.5783619988, 2.5783606948, 2.5783593921, 2.5783580907, 2.5783567907, 2.5783554920, 2.5783541946, 2.5783528986, 2.5783516039, 2.5783503105, 2.5783490184, 2.5783477277, 2.5783464383, 2.5783451502, 2.5783438635, 2.5783425780, 2.5783412939, 2.5783400111, 2.5783387296, 2.5783374493, 2.5783361704, 2.5783348928, 2.5783336166, 2.5783323416, 2.5783310679, 2.5783297955, 2.5783285243, 2.5783272545, 2.5783259860, 2.5783247188, 2.5783234528, 2.5783221881, 2.5783209247, 2.5783196626, 2.5783184018, 2.5783171422, 2.5783158840, 2.5783146270, 2.5783133712, 2.5783121167, 2.5783108635, 2.5783096116, 2.5783083609, 2.5783071115, 2.5783058634, 2.5783046165, 2.5783033708, 2.5783021264, 2.5783008833, 2.5782996414, 2.5782984007, 2.5782971613, 2.5782959232, 2.5782946863, 2.5782934506, 2.5782922162, 2.5782909830, 2.5782897510);
var t01arr = new Array (31.8205159483, 6.9645567340, 4.5407028584, 3.7469473878, 3.3649299974, 3.1426684031, 2.9979515664, 2.8964594462, 2.8214379214, 2.7637694578, 2.7180791832, 2.6809979920, 2.6503088360, 2.6244940645, 2.6024802904, 2.5834871787, 2.5669339747, 2.5523796182, 2.5394831892, 2.5279770009, 2.5176480136, 2.5083245498, 2.4998667357, 2.4921594686, 2.4851071699, 2.4786298171, 2.4726599043, 2.4671400892, 2.4620213501, 2.4572615310, 2.4528241805, 2.4486776192, 2.4447941838, 2.4411496102, 2.4377225276, 2.4344940399, 2.4314473967, 2.4285676267, 2.4258414052, 2.4232567744, 2.4208029864, 2.4184703538, 2.4162501225, 2.4141343615, 2.4121158685, 2.4101880885, 2.4083450422, 2.4065812646, 2.4048917503, 2.4032719069, 2.4017175128, 2.4002246805, 2.3987898247, 2.3974096328, 2.3960810399, 2.3948012062, 2.3935674962, 2.3923774610, 2.3912288222, 2.3901194570, 2.3890473854, 2.3880107580, 2.3870078460, 2.3860370311, 2.3850967969, 2.3841857210, 2.3833024680, 2.3824457826, 2.3816144840, 2.3808074604, 2.3800236640, 2.3792621062, 2.3785218539, 2.3778020255, 2.3771017874, 2.3764203505, 2.3757569678, 2.3751109313, 2.3744815694, 2.3738682448, 2.3732703523, 2.3726873167, 2.3721185911, 2.3715636552, 2.3710220133, 2.3704931936, 2.3699767460, 2.3694722414, 2.3689792704, 2.3684974418, 2.3680263822, 2.3675657346, 2.3671151574, 2.3666743519, 2.3662429504, 2.3658206806, 2.3654072556, 2.3650024006, 2.3646058517, 2.3642173560, 2.3638366706, 2.3634635623, 2.3630978072, 2.3627391900, 2.3623875038, 2.3620425497, 2.3617041360, 2.3613720787, 2.3610462002, 2.3607263297, 2.3604123026, 2.3601039602, 2.3598011496, 2.3595037232, 2.3592115387, 2.3589244587, 2.3586423506, 2.3583650864, 2.3580925424, 2.3578245990, 2.3575611408, 2.3573020561, 2.3570472369, 2.3567965787, 2.3565499803, 2.3563073441, 2.3560685752, 2.3558335819, 2.3556022755, 2.3553745696, 2.3551503811, 2.3549296290, 2.3547122348, 2.3544981226, 2.3542872186, 2.3540794512, 2.3538747510, 2.3536730505, 2.3534742843, 2.3532783888, 2.3530853023, 2.3528949648, 2.3527073180, 2.3525223053, 2.3523398715, 2.3521599632, 2.3519825282, 2.3518075159, 2.3516348770, 2.3514645636, 2.3512965289, 2.3511307276, 2.3509671155, 2.3508056493, 2.3506462874, 2.3504889886, 2.3503337133, 2.3501804226, 2.3500290788, 2.3498796449, 2.3497320851, 2.3495863644, 2.3494424484, 2.3493003040, 2.3491598987, 2.3490212006, 2.3488841789, 2.3487488033, 2.3486150444, 2.3484828733, 2.3483522620, 2.3482231831, 2.3480956096, 2.3479695154, 2.3478448750, 2.3477216634, 2.3475998560, 2.3474794291, 2.3473603593, 2.3472426238, 2.3471262003, 2.3470110670, 2.3468972025, 2.3467845860, 2.3466731972, 2.3465630159, 2.3464540228, 2.3463461986, 2.3462395248, 2.3461339828, 2.3460295550, 2.3459262236, 2.3458239716, 2.3457227820, 2.3456226385, 2.3455235249, 2.3454254253, 2.3453283243, 2.3452322068, 2.3451370578, 2.3450428629, 2.3449496076, 2.3448572781, 2.3447658606, 2.3446753416, 2.3445857081, 2.3444969469, 2.3444090456, 2.3443219916, 2.3442357728, 2.3441503772, 2.3440657930, 2.3439820087, 2.3438990132, 2.3438167952, 2.3437353439, 2.3436546486, 2.3435746988, 2.3434954843, 2.3434169950, 2.3433392209, 2.3432621524, 2.3431857798, 2.3431100937, 2.3430350851, 2.3429607447, 2.3428870638, 2.3428140335, 2.3427416454, 2.3426698909, 2.3425987618, 2.3425282499, 2.3424583473, 2.3423890460, 2.3423203384, 2.3422522169, 2.3421846740, 2.3421177023, 2.3420512946, 2.3419854439, 2.3419201432, 2.3418553856, 2.3417911643, 2.3417274727, 2.3416643043, 2.3416016527, 2.3415395116, 2.3414778747, 2.3414167359, 2.3413560892, 2.3412959288, 2.3412362487, 2.3411770432, 2.3411183068, 2.3410600338, 2.3410022188, 2.3409448565, 2.3408879414, 2.3408314684, 2.3407754324, 2.3407198284, 2.3406646513, 2.3406098962, 2.3405555584, 2.3405016330, 2.3404481154, 2.3403950010, 2.3403422853, 2.3402899638, 2.3402380320, 2.3401864856, 2.3401353204, 2.3400845322, 2.3400341167, 2.3399840700, 2.3399343879, 2.3398850665, 2.3398361020, 2.3397874903, 2.3397392278, 2.3396913107, 2.3396437352, 2.3395964978, 2.3395495949, 2.3395030229, 2.3394567783, 2.3394108577, 2.3393652577, 2.3393199749, 2.3392750061, 2.3392303480, 2.3391859974, 2.3391419511, 2.3390982059, 2.3390547590, 2.3390116071, 2.3389687472, 2.3389261766, 2.3388838921, 2.3388418910, 2.3388001703, 2.3387587274, 2.3387175594, 2.3386766637, 2.3386360374, 2.3385956780, 2.3385555829, 2.3385157494, 2.3384761750, 2.3384368572, 2.3383977935, 2.3383589814, 2.3383204185, 2.3382821025, 2.3382440309, 2.3382062015, 2.3381686119, 2.3381312598, 2.3380941431, 2.3380572595, 2.3380206067, 2.3379841827, 2.3379479853, 2.3379120124, 2.3378762619, 2.3378407318, 2.3378054200, 2.3377703246, 2.3377354435, 2.3377007747, 2.3376663164, 2.3376320667, 2.3375980236, 2.3375641853, 2.3375305499, 2.3374971157, 2.3374638808, 2.3374308435, 2.3373980019, 2.3373653544, 2.3373328992, 2.3373006347, 2.3372685592, 2.3372366710, 2.3372049684, 2.3371734500, 2.3371421140, 2.3371109588, 2.3370799830, 2.3370491850, 2.3370185633, 2.3369881163, 2.3369578425, 2.3369277405, 2.3368978089, 2.3368680461, 2.3368384508, 2.3368090215, 2.3367797569, 2.3367506555, 2.3367217161, 2.3366929372, 2.3366643176, 2.3366358559, 2.3366075508, 2.3365794010, 2.3365514052, 2.3365235623, 2.3364958709, 2.3364683297, 2.3364409377, 2.3364136936, 2.3363865961, 2.3363596441, 2.3363328365, 2.3363061720, 2.3362796496, 2.3362532681, 2.3362270263, 2.3362009232, 2.3361749577, 2.3361491287, 2.3361234352, 2.3360978759, 2.3360724500, 2.3360471563, 2.3360219939, 2.3359969617, 2.3359720587, 2.3359472839, 2.3359226363, 2.3358981150, 2.3358737189, 2.3358494472, 2.3358252989, 2.3358012729, 2.3357773685, 2.3357535847, 2.3357299205, 2.3357063752, 2.3356829477, 2.3356596372, 2.3356364428, 2.3356133637, 2.3355903990, 2.3355675478, 2.3355448094, 2.3355221828, 2.3354996673, 2.3354772621, 2.3354549663, 2.3354327791, 2.3354106998, 2.3353887275, 2.3353668615, 2.3353451010, 2.3353234453, 2.3353018935, 2.3352804450, 2.3352590991, 2.3352378548, 2.3352167117, 2.3351956689, 2.3351747257, 2.3351538814, 2.3351331353, 2.3351124867, 2.3350919350, 2.3350714794, 2.3350511194, 2.3350308541, 2.3350106830, 2.3349906053, 2.3349706206, 2.3349507280, 2.3349309270, 2.3349112170, 2.3348915972, 2.3348720672, 2.3348526263, 2.3348332738, 2.3348140092, 2.3347948318, 2.3347757412, 2.3347567366, 2.3347378176, 2.3347189835, 2.3347002338, 2.3346815679, 2.3346629852, 2.3346444852, 2.3346260673, 2.3346077311, 2.3345894758, 2.3345713011, 2.3345532064, 2.3345351911, 2.3345172548, 2.3344993969, 2.3344816169, 2.3344639143, 2.3344462885, 2.3344287392, 2.3344112657, 2.3343938677, 2.3343765445, 2.3343592958, 2.3343421211, 2.3343250198, 2.3343079916, 2.3342910359, 2.3342741522, 2.3342573402, 2.3342405994, 2.3342239292, 2.3342073294, 2.3341907993, 2.3341743387, 2.3341579470, 2.3341416238, 2.3341253687, 2.3341091813, 2.3340930611, 2.3340770077, 2.3340610208, 2.3340450998, 2.3340292444, 2.3340134542, 2.3339977288, 2.3339820678, 2.3339664708, 2.3339509374, 2.3339354672, 2.3339200598, 2.3339047148, 2.3338894320, 2.3338742108, 2.3338590509, 2.3338439520, 2.3338289137, 2.3338139356, 2.3337990173, 2.3337841585, 2.3337693589, 2.3337546181, 2.3337399357, 2.3337253114, 2.3337107449, 2.3336962357, 2.3336817837, 2.3336673883, 2.3336530494, 2.3336387665, 2.3336245394, 2.3336103677, 2.3335962511, 2.3335821892, 2.3335681819, 2.3335542286, 2.3335403292, 2.3335264833, 2.3335126906, 2.3334989508, 2.3334852635, 2.3334716286, 2.3334580457, 2.3334445145, 2.3334310347, 2.3334176060, 2.3334042281, 2.3333909007, 2.3333776236, 2.3333643965, 2.3333512190, 2.3333380909, 2.3333250120, 2.3333119819, 2.3332990004, 2.3332860672, 2.3332731821, 2.3332603447, 2.3332475548, 2.3332348121, 2.3332221165, 2.3332094675, 2.3331968650, 2.3331843088, 2.3331717984, 2.3331593338, 2.3331469147, 2.3331345407, 2.3331222117, 2.3331099274, 2.3330976876, 2.3330854920, 2.3330733404, 2.3330612326, 2.3330491682, 2.3330371472, 2.3330251692, 2.3330132340, 2.3330013414, 2.3329894912, 2.3329776831, 2.3329659169, 2.3329541924, 2.3329425094, 2.3329308676, 2.3329192669, 2.3329077070, 2.3328961876, 2.3328847087, 2.3328732699, 2.3328618711, 2.3328505121, 2.3328391926, 2.3328279124, 2.3328166714, 2.3328054693, 2.3327943059, 2.3327831811, 2.3327720945, 2.3327610462, 2.3327500357, 2.3327390630, 2.3327281279, 2.3327172301, 2.3327063695, 2.3326955458, 2.3326847589, 2.3326740087, 2.3326632948, 2.3326526172, 2.3326419756, 2.3326313698, 2.3326207998, 2.3326102653, 2.3325997660, 2.3325893020, 2.3325788729, 2.3325684786, 2.3325581189, 2.3325477936, 2.3325375027, 2.3325272458, 2.3325170229, 2.3325068337, 2.3324966782, 2.3324865561, 2.3324764672, 2.3324664115, 2.3324563887, 2.3324463987, 2.3324364413, 2.3324265163, 2.3324166237, 2.3324067632, 2.3323969348, 2.3323871381, 2.3323773731, 2.3323676397, 2.3323579376, 2.3323482668, 2.3323386270, 2.3323290182, 2.3323194401, 2.3323098926, 2.3323003757, 2.3322908890, 2.3322814326, 2.3322720062, 2.3322626097, 2.3322532429, 2.3322439058, 2.3322345982, 2.3322253199, 2.3322160708, 2.3322068508, 2.3321976597, 2.3321884973, 2.3321793637, 2.3321702585, 2.3321611818, 2.3321521333, 2.3321431129, 2.3321341206, 2.3321251561, 2.3321162193, 2.3321073101, 2.3320984284, 2.3320895741, 2.3320807469, 2.3320719469, 2.3320631739, 2.3320544277, 2.3320457082, 2.3320370154, 2.3320283490, 2.3320197090, 2.3320110952, 2.3320025075, 2.3319939459, 2.3319854101, 2.3319769001, 2.3319684158, 2.3319599570, 2.3319515236, 2.3319431156, 2.3319347327, 2.3319263749, 2.3319180421, 2.3319097341, 2.3319014509, 2.3318931923, 2.3318849582, 2.3318767486, 2.3318685632, 2.3318604021, 2.3318522651, 2.3318441520, 2.3318360628, 2.3318279974, 2.3318199557, 2.3318119375, 2.3318039428, 2.3317959715, 2.3317880234, 2.3317800985, 2.3317721966, 2.3317643177, 2.3317564616, 2.3317486283, 2.3317408177, 2.3317330296, 2.3317252639, 2.3317175207, 2.3317097997, 2.3317021008, 2.3316944241, 2.3316867693, 2.3316791364, 2.3316715254, 2.3316639360, 2.3316563682, 2.3316488219, 2.3316412971, 2.3316337936, 2.3316263113, 2.3316188502, 2.3316114102, 2.3316039911, 2.3315965929, 2.3315892155, 2.3315818588, 2.3315745228, 2.3315672072, 2.3315599122, 2.3315526375, 2.3315453830, 2.3315381488, 2.3315309347, 2.3315237405, 2.3315165664, 2.3315094121, 2.3315022776, 2.3314951627, 2.3314880675, 2.3314809919, 2.3314739356, 2.3314668988, 2.3314598812, 2.3314528829, 2.3314459037, 2.3314389435, 2.3314320023, 2.3314250801, 2.3314181766, 2.3314112919, 2.3314044259, 2.3313975784, 2.3313907495, 2.3313839390, 2.3313771469, 2.3313703731, 2.3313636176, 2.3313568801, 2.3313501608, 2.3313434594, 2.3313367760, 2.3313301104, 2.3313234626, 2.3313168326, 2.3313102202, 2.3313036253, 2.3312970480, 2.3312904881, 2.3312839456, 2.3312774203, 2.3312709123, 2.3312644215, 2.3312579477, 2.3312514910, 2.3312450512, 2.3312386283, 2.3312322223, 2.3312258330, 2.3312194604, 2.3312131044, 2.3312067650, 2.3312004421, 2.3311941356, 2.3311878455, 2.3311815717, 2.3311753142, 2.3311690728, 2.3311628476, 2.3311566384, 2.3311504452, 2.3311442679, 2.3311381065, 2.3311319609, 2.3311258311, 2.3311197169, 2.3311136184, 2.3311075354, 2.3311014680, 2.3310954159, 2.3310893793, 2.3310833581, 2.3310773520, 2.3310713613, 2.3310653856, 2.3310594251, 2.3310534796, 2.3310475491, 2.3310416335, 2.3310357328, 2.3310298469, 2.3310239758, 2.3310181194, 2.3310122776, 2.3310064504, 2.3310006378, 2.3309948397, 2.3309890560, 2.3309832866, 2.3309775316, 2.3309717909, 2.3309660644, 2.3309603520, 2.3309546538, 2.3309489696, 2.3309432994, 2.3309376432, 2.3309320009, 2.3309263725, 2.3309207579, 2.3309151570, 2.3309095698, 2.3309039962, 2.3308984363, 2.3308928899, 2.3308873571, 2.3308818377, 2.3308763316, 2.3308708390, 2.3308653596, 2.3308598936, 2.3308544407, 2.3308490010, 2.3308435744, 2.3308381608, 2.3308327603, 2.3308273728, 2.3308219982, 2.3308166365, 2.3308112876, 2.3308059515, 2.3308006281, 2.3307953175, 2.3307900195, 2.3307847341, 2.3307794612, 2.3307742009, 2.3307689531, 2.3307637177, 2.3307584946, 2.3307532840, 2.3307480856, 2.3307428994, 2.3307377255, 2.3307325637, 2.3307274141, 2.3307222765, 2.3307171510, 2.3307120375, 2.3307069359, 2.3307018463, 2.3306967685, 2.3306917026, 2.3306866484, 2.3306816060, 2.3306765753, 2.3306715562, 2.3306665488, 2.3306615530, 2.3306565687, 2.3306515959, 2.3306466346, 2.3306416847, 2.3306367462, 2.3306318190, 2.3306269032, 2.3306219986, 2.3306171053, 2.3306122231, 2.3306073521, 2.3306024922, 2.3305976434, 2.3305928056, 2.3305879788, 2.3305831630, 2.3305783581, 2.3305735642, 2.3305687810, 2.3305640087, 2.3305592471, 2.3305544963, 2.3305497562, 2.3305450268, 2.3305403080, 2.3305355998, 2.3305309022, 2.3305262151, 2.3305215385, 2.3305168723, 2.3305122166, 2.3305075713, 2.3305029363, 2.3304983116, 2.3304936972, 2.3304890930, 2.3304844991, 2.3304799154, 2.3304753418, 2.3304707783, 2.3304662249, 2.3304616815, 2.3304571482, 2.3304526248, 2.3304481114, 2.3304436079, 2.3304391142, 2.3304346305, 2.3304301565, 2.3304256923, 2.3304212379, 2.3304167932, 2.3304123582, 2.3304079328, 2.3304035171, 2.3303991110, 2.3303947144, 2.3303903274, 2.3303859498, 2.3303815818, 2.3303772231, 2.3303728739, 2.3303685341, 2.3303642036, 2.3303598824, 2.3303555705, 2.3303512679, 2.3303469745, 2.3303426903, 2.3303384153, 2.3303341494, 2.3303298926, 2.3303256449, 2.3303214063, 2.3303171767, 2.3303129560, 2.3303087444, 2.3303045417, 2.3303003478, 2.3302961629, 2.3302919868, 2.3302878196, 2.3302836611, 2.3302795114, 2.3302753705, 2.3302712382, 2.3302671147, 2.3302629998, 2.3302588935, 2.3302547959, 2.3302507068, 2.3302466263, 2.3302425543, 2.3302384908, 2.3302344357, 2.3302303891, 2.3302263510, 2.3302223212, 2.3302182998, 2.3302142867, 2.3302102819, 2.3302062854, 2.3302022972, 2.3301983172, 2.3301943455, 2.3301903819, 2.3301864264, 2.3301824792, 2.3301785400, 2.3301746089, 2.3301706858, 2.3301667708, 2.3301628638, 2.3301589648, 2.3301550738, 2.3301511907, 2.3301473155, 2.3301434482, 2.3301395888, 2.3301357372, 2.3301318934, 2.3301280574, 2.3301242292, 2.3301204087, 2.3301165959, 2.3301127909, 2.3301089935, 2.3301052038, 2.3301014217, 2.3300976472, 2.3300938803, 2.3300901209, 2.3300863691, 2.3300826248, 2.3300788880, 2.3300751587, 2.3300714368, 2.3300677224, 2.3300640153, 2.3300603156, 2.3300566233, 2.3300529384, 2.3300492607, 2.3300455903, 2.3300419272, 2.3300382714, 2.3300346228, 2.3300309814, 2.3300273471, 2.3300237201, 2.3300201002, 2.3300164874, 2.3300128817, 2.3300092831, 2.3300056915, 2.3300021070, 2.3299985295, 2.3299949590, 2.3299913955, 2.3299878389, 2.3299842893, 2.3299807466, 2.3299772108, 2.3299736819, 2.3299701598, 2.3299666445, 2.3299631361, 2.3299596345, 2.3299561396, 2.3299526515, 2.3299491702, 2.3299456955, 2.3299422276, 2.3299387663, 2.3299353117, 2.3299318637, 2.3299284224, 2.3299249876, 2.3299215595, 2.3299181379, 2.3299147228, 2.3299113143, 2.3299079123, 2.3299045168, 2.3299011277, 2.3298977451, 2.3298943689, 2.3298909992, 2.3298876358, 2.3298842789, 2.3298809282, 2.3298775840, 2.3298742460, 2.3298709144, 2.3298675890, 2.3298642700, 2.3298609571, 2.3298576505, 2.3298543502, 2.3298510560, 2.3298477680, 2.3298444862, 2.3298412105, 2.3298379410, 2.3298346776, 2.3298314202, 2.3298281690, 2.3298249238, 2.3298216847, 2.3298184516, 2.3298152245, 2.3298120034, 2.3298087882, 2.3298055791, 2.3298023759, 2.3297991786, 2.3297959872, 2.3297928017, 2.3297896221, 2.3297864484, 2.3297832805, 2.3297801185, 2.3297769622, 2.3297738118, 2.3297706671, 2.3297675283, 2.3297643951, 2.3297612677, 2.3297581460, 2.3297550301, 2.3297519198, 2.3297488152, 2.3297457162, 2.3297426229, 2.3297395352, 2.3297364531, 2.3297333767, 2.3297303058, 2.3297272404, 2.3297241807, 2.3297211264, 2.3297180777, 2.3297150345, 2.3297119968, 2.3297089645, 2.3297059377, 2.3297029164, 2.3296999005, 2.3296968900, 2.3296938849, 2.3296908852, 2.3296878909, 2.3296849019, 2.3296819183, 2.3296789400, 2.3296759670, 2.3296729993, 2.3296700369, 2.3296670798, 2.3296641279, 2.3296611813, 2.3296582400, 2.3296553038, 2.3296523728, 2.3296494471, 2.3296465265, 2.3296436111, 2.3296407008, 2.3296377956, 2.3296348956, 2.3296320007, 2.3296291109, 2.3296262261, 2.3296233465, 2.3296204718, 2.3296176023, 2.3296147377, 2.3296118782, 2.3296090237, 2.3296061741, 2.3296033295, 2.3296004899, 2.3295976553, 2.3295948256, 2.3295920008, 2.3295891809, 2.3295863659, 2.3295835558, 2.3295807506, 2.3295779502, 2.3295751547, 2.3295723640, 2.3295695781, 2.3295667971, 2.3295640208, 2.3295612493, 2.3295584826, 2.3295557207, 2.3295529635, 2.3295502110, 2.3295474633, 2.3295447203, 2.3295419819, 2.3295392483, 2.3295365193, 2.3295337950, 2.3295310754, 2.3295283604, 2.3295256500, 2.3295229442, 2.3295202431, 2.3295175465, 2.3295148545, 2.3295121671, 2.3295094842, 2.3295068059, 2.3295041321, 2.3295014628, 2.3294987981, 2.3294961378, 2.3294934821, 2.3294908308, 2.3294881839, 2.3294855416, 2.3294829036, 2.3294802701, 2.3294776411, 2.3294750164, 2.3294723961, 2.3294697803, 2.3294671688, 2.3294645616, 2.3294619588, 2.3294593604, 2.3294567663, 2.3294541765, 2.3294515910, 2.3294490099, 2.3294464330, 2.3294438604, 2.3294412920, 2.3294387280, 2.3294361681, 2.3294336125, 2.3294310612, 2.3294285140, 2.3294259711, 2.3294234323, 2.3294208977, 2.3294183673, 2.3294158411, 2.3294133190, 2.3294108011, 2.3294082873, 2.3294057776, 2.3294032720, 2.3294007706, 2.3293982732, 2.3293957799, 2.3293932907, 2.3293908055, 2.3293883244, 2.3293858474, 2.3293833743, 2.3293809053, 2.3293784404, 2.3293759794, 2.3293735224, 2.3293710694, 2.3293686203, 2.3293661753, 2.3293637341, 2.3293612970, 2.3293588637, 2.3293564344, 2.3293540090, 2.3293515875, 2.3293491700, 2.3293467563, 2.3293443464, 2.3293419405, 2.3293395384, 2.3293371402, 2.3293347458, 2.3293323552, 2.3293299685, 2.3293275855, 2.3293252064, 2.3293228311, 2.3293204595, 2.3293180918, 2.3293157278, 2.3293133676, 2.3293110111, 2.3293086583, 2.3293063093, 2.3293039641, 2.3293016225, 2.3292992846, 2.3292969505, 2.3292946200, 2.3292922932, 2.3292899701, 2.3292876506, 2.3292853348, 2.3292830227, 2.3292807141, 2.3292784093, 2.3292761080, 2.3292738103, 2.3292715163, 2.3292692258, 2.3292669389, 2.3292646556, 2.3292623759, 2.3292600997, 2.3292578271, 2.3292555580, 2.3292532925, 2.3292510305, 2.3292487720, 2.3292465170, 2.3292442655, 2.3292420176, 2.3292397731, 2.3292375320, 2.3292352945, 2.3292330604, 2.3292308298, 2.3292286026, 2.3292263789, 2.3292241585, 2.3292219416, 2.3292197282, 2.3292175181, 2.3292153114, 2.3292131081, 2.3292109083, 2.3292087117, 2.3292065186, 2.3292043288, 2.3292021423, 2.3291999592, 2.3291977795, 2.3291956031, 2.3291934299, 2.3291912601, 2.3291890937, 2.3291869305, 2.3291847706, 2.3291826140, 2.3291804606, 2.3291783105, 2.3291761637, 2.3291740202, 2.3291718799, 2.3291697428, 2.3291676090, 2.3291654784, 2.3291633510, 2.3291612268, 2.3291591058, 2.3291569880, 2.3291548734, 2.3291527620, 2.3291506538, 2.3291485487, 2.3291464468, 2.3291443480, 2.3291422524, 2.3291401599, 2.3291380706, 2.3291359843, 2.3291339012, 2.3291318212, 2.3291297443, 2.3291276705, 2.3291255998, 2.3291235322, 2.3291214677, 2.3291194062, 2.3291173478, 2.3291152924, 2.3291132401, 2.3291111908, 2.3291091446, 2.3291071014, 2.3291050612, 2.3291030240, 2.3291009898, 2.3290989587, 2.3290969305, 2.3290949053, 2.3290928831, 2.3290908639, 2.3290888476, 2.3290868344, 2.3290848240, 2.3290828166, 2.3290808122, 2.3290788107, 2.3290768121, 2.3290748164, 2.3290728237, 2.3290708339, 2.3290688469, 2.3290668629, 2.3290648818, 2.3290629035, 2.3290609281, 2.3290589556, 2.3290569860, 2.3290550192, 2.3290530553, 2.3290510942, 2.3290491360, 2.3290471806, 2.3290452280, 2.3290432782, 2.3290413313, 2.3290393872, 2.3290374459, 2.3290355074, 2.3290335716, 2.3290316387, 2.3290297085, 2.3290277811, 2.3290258565, 2.3290239347, 2.3290220156, 2.3290200992, 2.3290181856, 2.3290162748, 2.3290143666, 2.3290124612, 2.3290105585, 2.3290086586, 2.3290067613, 2.3290048667, 2.3290029749, 2.3290010857, 2.3289991992, 2.3289973154, 2.3289954343, 2.3289935559, 2.3289916801, 2.3289898069, 2.3289879365, 2.3289860686, 2.3289842034, 2.3289823409, 2.3289804810, 2.3289786236, 2.3289767690, 2.3289749169, 2.3289730674, 2.3289712206, 2.3289693763, 2.3289675346, 2.3289656955, 2.3289638590, 2.3289620251, 2.3289601937, 2.3289583649, 2.3289565387, 2.3289547150, 2.3289528939, 2.3289510753, 2.3289492592, 2.3289474457, 2.3289456347, 2.3289438262, 2.3289420202, 2.3289402168, 2.3289384158, 2.3289366174, 2.3289348215, 2.3289330280, 2.3289312370, 2.3289294485, 2.3289276625, 2.3289258789, 2.3289240979, 2.3289223192, 2.3289205431, 2.3289187693, 2.3289169981, 2.3289152292, 2.3289134628, 2.3289116988, 2.3289099373, 2.3289081781, 2.3289064214, 2.3289046671, 2.3289029152, 2.3289011657, 2.3288994186, 2.3288976738, 2.3288959315, 2.3288941915, 2.3288924540, 2.3288907187, 2.3288889859, 2.3288872554, 2.3288855273, 2.3288838015, 2.3288820780, 2.3288803569, 2.3288786382, 2.3288769217, 2.3288752076, 2.3288734958, 2.3288717864, 2.3288700792, 2.3288683744, 2.3288666718, 2.3288649716, 2.3288632736, 2.3288615780, 2.3288598846, 2.3288581935, 2.3288565047, 2.3288548181, 2.3288531338, 2.3288514518, 2.3288497720, 2.3288480945, 2.3288464193, 2.3288447462, 2.3288430755, 2.3288414069, 2.3288397406, 2.3288380765, 2.3288364146, 2.3288347550, 2.3288330975, 2.3288314423, 2.3288297892, 2.3288281384, 2.3288264898, 2.3288248433, 2.3288231991, 2.3288215570, 2.3288199171, 2.3288182793, 2.3288166438, 2.3288150104, 2.3288133791, 2.3288117501, 2.3288101231, 2.3288084983, 2.3288068757, 2.3288052552, 2.3288036368, 2.3288020206, 2.3288004065, 2.3287987945, 2.3287971846, 2.3287955768, 2.3287939712, 2.3287923676, 2.3287907662, 2.3287891668, 2.3287875696, 2.3287859744, 2.3287843813, 2.3287827903, 2.3287812014, 2.3287796146, 2.3287780298, 2.3287764471, 2.3287748664, 2.3287732878, 2.3287717112, 2.3287701367, 2.3287685643, 2.3287669939, 2.3287654255, 2.3287638591, 2.3287622948, 2.3287607325, 2.3287591722, 2.3287576140, 2.3287560577, 2.3287545035, 2.3287529512, 2.3287514010, 2.3287498528, 2.3287483065, 2.3287467623, 2.3287452200, 2.3287436797, 2.3287421414, 2.3287406051, 2.3287390707, 2.3287375383, 2.3287360079, 2.3287344794, 2.3287329529, 2.3287314283, 2.3287299057, 2.3287283850, 2.3287268663, 2.3287253495, 2.3287238346, 2.3287223217, 2.3287208107, 2.3287193016, 2.3287177944, 2.3287162891, 2.3287147858, 2.3287132843, 2.3287117848, 2.3287102872, 2.3287087914, 2.3287072976, 2.3287058056, 2.3287043155, 2.3287028274, 2.3287013410, 2.3286998566, 2.3286983740, 2.3286968933, 2.3286954145, 2.3286939375, 2.3286924624, 2.3286909892, 2.3286895177, 2.3286880482, 2.3286865805, 2.3286851146, 2.3286836505, 2.3286821883, 2.3286807279, 2.3286792694, 2.3286778126, 2.3286763577, 2.3286749046, 2.3286734533, 2.3286720039, 2.3286705562, 2.3286691103, 2.3286676663, 2.3286662240, 2.3286647835, 2.3286633448, 2.3286619079, 2.3286604728, 2.3286590394, 2.3286576078, 2.3286561781, 2.3286547500, 2.3286533238, 2.3286518993, 2.3286504765, 2.3286490555, 2.3286476363, 2.3286462188, 2.3286448031, 2.3286433891, 2.3286419768, 2.3286405663, 2.3286391575, 2.3286377505, 2.3286363451, 2.3286349415, 2.3286335396, 2.3286321395, 2.3286307410, 2.3286293443, 2.3286279492, 2.3286265559, 2.3286251643, 2.3286237744, 2.3286223861, 2.3286209996, 2.3286196147, 2.3286182316, 2.3286168501, 2.3286154703, 2.3286140922, 2.3286127157, 2.3286113410, 2.3286099678, 2.3286085964, 2.3286072266, 2.3286058585, 2.3286044920, 2.3286031272, 2.3286017640, 2.3286004025, 2.3285990426, 2.3285976844, 2.3285963278, 2.3285949729, 2.3285936195, 2.3285922678, 2.3285909177, 2.3285895693, 2.3285882225, 2.3285868773, 2.3285855337, 2.3285841917, 2.3285828513, 2.3285815125, 2.3285801753, 2.3285788398, 2.3285775058, 2.3285761734, 2.3285748426, 2.3285735134, 2.3285721858, 2.3285708598, 2.3285695353, 2.3285682125, 2.3285668912, 2.3285655715, 2.3285642533, 2.3285629367, 2.3285616217, 2.3285603082, 2.3285589963, 2.3285576859, 2.3285563771, 2.3285550699, 2.3285537642, 2.3285524600, 2.3285511574, 2.3285498563, 2.3285485568, 2.3285472587, 2.3285459623, 2.3285446673, 2.3285433739, 2.3285420820, 2.3285407916, 2.3285395027, 2.3285382153, 2.3285369295, 2.3285356451, 2.3285343623, 2.3285330810, 2.3285318011, 2.3285305228, 2.3285292460, 2.3285279706, 2.3285266968, 2.3285254244, 2.3285241535, 2.3285228841, 2.3285216162, 2.3285203498, 2.3285190848, 2.3285178213, 2.3285165593, 2.3285152987, 2.3285140397, 2.3285127820, 2.3285115259, 2.3285102711, 2.3285090179, 2.3285077661, 2.3285065157, 2.3285052668, 2.3285040193, 2.3285027733, 2.3285015287, 2.3285002856, 2.3284990439, 2.3284978036, 2.3284965647, 2.3284953273, 2.3284940913, 2.3284928567, 2.3284916236, 2.3284903918, 2.3284891615, 2.3284879326, 2.3284867051, 2.3284854790, 2.3284842543, 2.3284830310, 2.3284818091, 2.3284805886, 2.3284793695, 2.3284781518, 2.3284769355, 2.3284757205, 2.3284745070, 2.3284732948, 2.3284720841, 2.3284708747, 2.3284696666, 2.3284684600, 2.3284672547, 2.3284660508, 2.3284648483, 2.3284636471, 2.3284624473, 2.3284612488, 2.3284600517, 2.3284588560, 2.3284576616, 2.3284564686, 2.3284552769, 2.3284540865, 2.3284528975, 2.3284517099, 2.3284505235, 2.3284493386, 2.3284481549, 2.3284469726, 2.3284457916, 2.3284446120, 2.3284434336, 2.3284422566, 2.3284410810, 2.3284399066, 2.3284387335, 2.3284375618, 2.3284363914, 2.3284352223, 2.3284340545, 2.3284328880, 2.3284317228, 2.3284305589, 2.3284293963, 2.3284282350, 2.3284270750, 2.3284259163, 2.3284247589, 2.3284236028, 2.3284224479, 2.3284212944, 2.3284201421, 2.3284189911, 2.3284178414, 2.3284166929, 2.3284155458, 2.3284143999, 2.3284132552, 2.3284121119, 2.3284109698, 2.3284098290, 2.3284086894, 2.3284075511, 2.3284064140, 2.3284052782, 2.3284041437, 2.3284030104, 2.3284018783, 2.3284007475, 2.3283996180, 2.3283984897, 2.3283973626, 2.3283962367, 2.3283951121, 2.3283939888, 2.3283928666, 2.3283917457, 2.3283906261, 2.3283895076, 2.3283883904, 2.3283872744, 2.3283861596, 2.3283850460, 2.3283839337, 2.3283828225, 2.3283817126, 2.3283806039, 2.3283794964, 2.3283783901, 2.3283772850, 2.3283761811, 2.3283750784, 2.3283739769, 2.3283728766, 2.3283717775, 2.3283706796, 2.3283695829, 2.3283684874, 2.3283673930, 2.3283662999, 2.3283652079, 2.3283641171, 2.3283630275, 2.3283619390, 2.3283608518, 2.3283597657, 2.3283586807, 2.3283575970, 2.3283565144, 2.3283554330, 2.3283543527, 2.3283532736, 2.3283521957, 2.3283511189, 2.3283500433, 2.3283489688, 2.3283478955, 2.3283468234, 2.3283457524, 2.3283446825, 2.3283436138, 2.3283425462, 2.3283414798, 2.3283404145, 2.3283393503, 2.3283382873, 2.3283372254, 2.3283361646, 2.3283351050, 2.3283340465, 2.3283329892, 2.3283319329, 2.3283308778, 2.3283298238, 2.3283287709, 2.3283277192, 2.3283266685, 2.3283256190, 2.3283245706, 2.3283235233, 2.3283224771, 2.3283214320, 2.3283203880, 2.3283193451, 2.3283183033, 2.3283172626, 2.3283162231, 2.3283151846, 2.3283141472, 2.3283131109, 2.3283120757, 2.3283110416, 2.3283100086, 2.3283089766, 2.3283079458, 2.3283069160, 2.3283058873, 2.3283048597, 2.3283038332, 2.3283028077, 2.3283017834, 2.3283007600, 2.3282997378, 2.3282987166, 2.3282976965, 2.3282966775, 2.3282956595, 2.3282946426, 2.3282936268, 2.3282926120, 2.3282915983, 2.3282905856, 2.3282895740, 2.3282885635, 2.3282875539, 2.3282865455, 2.3282855381, 2.3282845317, 2.3282835264, 2.3282825221, 2.3282815189, 2.3282805167, 2.3282795155, 2.3282785154, 2.3282775163, 2.3282765183, 2.3282755212, 2.3282745252, 2.3282735303, 2.3282725363, 2.3282715434, 2.3282705516, 2.3282695607, 2.3282685708, 2.3282675820, 2.3282665942, 2.3282656074, 2.3282646217, 2.3282636369, 2.3282626531, 2.3282616704, 2.3282606887, 2.3282597079, 2.3282587282, 2.3282577495, 2.3282567718, 2.3282557951, 2.3282548194, 2.3282538446, 2.3282528709, 2.3282518982, 2.3282509264, 2.3282499557, 2.3282489859, 2.3282480172, 2.3282470494, 2.3282460826, 2.3282451168, 2.3282441520, 2.3282431881, 2.3282422253, 2.3282412634, 2.3282403024, 2.3282393425, 2.3282383835, 2.3282374256, 2.3282364685, 2.3282355125, 2.3282345574, 2.3282336033, 2.3282326501, 2.3282316979, 2.3282307467, 2.3282297964, 2.3282288471, 2.3282278987, 2.3282269513, 2.3282260049, 2.3282250594, 2.3282241149, 2.3282231713, 2.3282222286, 2.3282212869, 2.3282203462, 2.3282194064, 2.3282184675, 2.3282175296, 2.3282165926, 2.3282156566, 2.3282147215, 2.3282137873);
var t025arr = new Array (12.7062047340, 4.3026527295, 3.1824463049, 2.7764451050, 2.5705818347, 2.4469118464, 2.3646242509, 2.3060041333, 2.2621571582, 2.2281388424, 2.2009851587, 2.1788128272, 2.1603686522, 2.1447866813, 2.1314495357, 2.1199052852, 2.1098155586, 2.1009220369, 2.0930240499, 2.0859634413, 2.0796138371, 2.0738730583, 2.0686575986, 2.0638985473, 2.0595385357, 2.0555294185, 2.0518304930, 2.0484071147, 2.0452296111, 2.0422724494, 2.0395134384, 2.0369333344, 2.0345152872, 2.0322444978, 2.0301079154, 2.0280939868, 2.0261924474, 2.0243941467, 2.0226909012, 2.0210753699, 2.0195409483, 2.0180816789, 2.0166921734, 2.0153675468, 2.0141033593, 2.0128955673, 2.0117404801, 2.0106347219, 2.0095751993, 2.0085590721, 2.0075837282, 2.0066467607, 2.0057459487, 2.0048792750, 2.0040447694, 2.0032407042, 2.0024654439, 2.0017174680, 2.0009953612, 2.0002978043, 1.9996235665, 1.9989714978, 1.9983405224, 1.9977296334, 1.9971378867, 1.9965643964, 1.9960083307, 1.9954689072, 1.9949453901, 1.9944370859, 1.9939433411, 1.9934635390, 1.9929970974, 1.9925434658, 1.9921021238, 1.9916725786, 1.9912543634, 1.9908470360, 1.9904501765, 1.9900633866, 1.9896862880, 1.9893185208, 1.9889597429, 1.9886096288, 1.9882678684, 1.9879341663, 1.9876082408, 1.9872898231, 1.9869786569, 1.9866744972, 1.9863771101, 1.9860862717, 1.9858017682, 1.9855233949, 1.9852509556, 1.9849842628, 1.9847231364, 1.9844674040, 1.9842169002, 1.9839714663, 1.9837309499, 1.9834952046, 1.9832640900, 1.9830374708, 1.9828152173, 1.9825972044, 1.9823833119, 1.9821734242, 1.9819674298, 1.9817652214, 1.9815666955, 1.9813717524, 1.9811802962, 1.9809922339, 1.9808074762, 1.9806259367, 1.9804475321, 1.9802722258, 1.9800998527, 1.9799303810, 1.9797637381, 1.9795998538, 1.9794386601, 1.9792800913, 1.9791240838, 1.9789705760, 1.9788195084, 1.9786708232, 1.9785244646, 1.9783803782, 1.9782385117, 1.9780988141, 1.9779612360, 1.9778257296, 1.9776922485, 1.9775607475, 1.9774311829, 1.9773035123, 1.9771776945, 1.9770536894, 1.9769314580, 1.9768109627, 1.9766921667, 1.9765750344, 1.9764595309, 1.9763456225, 1.9762332765, 1.9761224610, 1.9760131448, 1.9759052977, 1.9757988903, 1.9756938940, 1.9755902809, 1.9754880239, 1.9753870964, 1.9752874728, 1.9751891279, 1.9750920372, 1.9749961770, 1.9749015240, 1.9748080554, 1.9747157493, 1.9746245841, 1.9745345387, 1.9744455927, 1.9743577260, 1.9742709191, 1.9741851530, 1.9741004089, 1.9740166689, 1.9739339151, 1.9738521303, 1.9737712974, 1.9736914000, 1.9736124219, 1.9735343474, 1.9734571611, 1.9733808478, 1.9733053928, 1.9732307818, 1.9731570006, 1.9730840356, 1.9730118731, 1.9729405001, 1.9728699037, 1.9728000712, 1.9727309904, 1.9726626491, 1.9725950356, 1.9725281383, 1.9724619458, 1.9723964471, 1.9723316314, 1.9722674879, 1.9722040064, 1.9721411765, 1.9720789884, 1.9720174323, 1.9719564984, 1.9718961776, 1.9718364605, 1.9717773382, 1.9717188018, 1.9716608426, 1.9716034521, 1.9715466221, 1.9714903443, 1.9714346107, 1.9713794135, 1.9713247450, 1.9712705976, 1.9712169639, 1.9711638366, 1.9711112086, 1.9710590728, 1.9710074225, 1.9709562508, 1.9709055511, 1.9708553170, 1.9708055420, 1.9707562199, 1.9707073446, 1.9706589099, 1.9706109099, 1.9705633389, 1.9705161911, 1.9704694609, 1.9704231427, 1.9703772312, 1.9703317209, 1.9702866067, 1.9702418834, 1.9701975460, 1.9701535895, 1.9701100089, 1.9700667996, 1.9700239567, 1.9699814756, 1.9699393518, 1.9698975808, 1.9698561581, 1.9698150795, 1.9697743406, 1.9697339373, 1.9696938653, 1.9696541208, 1.9696146996, 1.9695755979, 1.9695368117, 1.9694983373, 1.9694601709, 1.9694223089, 1.9693847476, 1.9693474834, 1.9693105129, 1.9692738325, 1.9692374389, 1.9692013287, 1.9691654987, 1.9691299455, 1.9690946660, 1.9690596571, 1.9690249155, 1.9689904384, 1.9689562226, 1.9689222653, 1.9688885634, 1.9688551142, 1.9688219148, 1.9687889623, 1.9687562541, 1.9687237875, 1.9686915598, 1.9686595683, 1.9686278105, 1.9685962839, 1.9685649858, 1.9685339138, 1.9685030656, 1.9684724386, 1.9684420306, 1.9684118391, 1.9683818619, 1.9683520966, 1.9683225412, 1.9682931932, 1.9682640506, 1.9682351113, 1.9682063730, 1.9681778338, 1.9681494915, 1.9681213441, 1.9680933896, 1.9680656261, 1.9680380515, 1.9680106640, 1.9679834617, 1.9679564427, 1.9679296051, 1.9679029472, 1.9678764671, 1.9678501630, 1.9678240333, 1.9677980761, 1.9677722898, 1.9677466727, 1.9677212231, 1.9676959394, 1.9676708200, 1.9676458633, 1.9676210677, 1.9675964316, 1.9675719536, 1.9675476321, 1.9675234655, 1.9674994525, 1.9674755916, 1.9674518813, 1.9674283202, 1.9674049069, 1.9673816401, 1.9673585183, 1.9673355401, 1.9673127044, 1.9672900097, 1.9672674547, 1.9672450382, 1.9672227588, 1.9672006154, 1.9671786067, 1.9671567314, 1.9671349884, 1.9671133764, 1.9670918943, 1.9670705410, 1.9670493151, 1.9670282157, 1.9670072416, 1.9669863917, 1.9669656648, 1.9669450599, 1.9669245759, 1.9669042118, 1.9668839665, 1.9668638390, 1.9668438282, 1.9668239331, 1.9668041528, 1.9667844862, 1.9667649324, 1.9667454903, 1.9667261592, 1.9667069379, 1.9666878255, 1.9666688212, 1.9666499240, 1.9666311331, 1.9666124475, 1.9665938663, 1.9665753886, 1.9665570137, 1.9665387407, 1.9665205686, 1.9665024967, 1.9664845242, 1.9664666502, 1.9664488739, 1.9664311946, 1.9664136113, 1.9663961235, 1.9663787302, 1.9663614307, 1.9663442243, 1.9663271101, 1.9663100876, 1.9662931558, 1.9662763142, 1.9662595620, 1.9662428984, 1.9662263229, 1.9662098346, 1.9661934329, 1.9661771171, 1.9661608865, 1.9661447406, 1.9661286785, 1.9661126997, 1.9660968036, 1.9660809894, 1.9660652565, 1.9660496044, 1.9660340324, 1.9660185399, 1.9660031262, 1.9659877908, 1.9659725331, 1.9659573525, 1.9659422484, 1.9659272203, 1.9659122675, 1.9658973895, 1.9658825858, 1.9658678557, 1.9658531988, 1.9658386144, 1.9658241022, 1.9658096614, 1.9657952916, 1.9657809923, 1.9657667630, 1.9657526031, 1.9657385121, 1.9657244896, 1.9657105350, 1.9656966479, 1.9656828277, 1.9656690740, 1.9656553863, 1.9656417641, 1.9656282069, 1.9656147144, 1.9656012859, 1.9655879212, 1.9655746196, 1.9655613808, 1.9655482044, 1.9655350898, 1.9655220367, 1.9655090446, 1.9654961131, 1.9654832418, 1.9654704303, 1.9654576780, 1.9654449847, 1.9654323500, 1.9654197733, 1.9654072543, 1.9653947927, 1.9653823880, 1.9653700399, 1.9653577478, 1.9653455116, 1.9653333308, 1.9653212049, 1.9653091337, 1.9652971168, 1.9652851538, 1.9652732444, 1.9652613881, 1.9652495846, 1.9652378337, 1.9652261349, 1.9652144878, 1.9652028923, 1.9651913478, 1.9651798540, 1.9651684108, 1.9651570176, 1.9651456741, 1.9651343802, 1.9651231353, 1.9651119393, 1.9651007917, 1.9650896923, 1.9650786408, 1.9650676369, 1.9650566801, 1.9650457704, 1.9650349072, 1.9650240904, 1.9650133197, 1.9650025947, 1.9649919152, 1.9649812808, 1.9649706913, 1.9649601465, 1.9649496459, 1.9649391894, 1.9649287767, 1.9649184075, 1.9649080815, 1.9648977984, 1.9648875580, 1.9648773601, 1.9648672043, 1.9648570904, 1.9648470181, 1.9648369872, 1.9648269975, 1.9648170486, 1.9648071403, 1.9647972724, 1.9647874447, 1.9647776568, 1.9647679086, 1.9647581997, 1.9647485301, 1.9647388993, 1.9647293073, 1.9647197537, 1.9647102383, 1.9647007610, 1.9646913214, 1.9646819194, 1.9646725546, 1.9646632270, 1.9646539363, 1.9646446822, 1.9646354646, 1.9646262832, 1.9646171378, 1.9646080283, 1.9645989543, 1.9645899157, 1.9645809123, 1.9645719439, 1.9645630103, 1.9645541112, 1.9645452465, 1.9645364160, 1.9645276194, 1.9645188566, 1.9645101274, 1.9645014317, 1.9644927691, 1.9644841395, 1.9644755427, 1.9644669786, 1.9644584469, 1.9644499475, 1.9644414802, 1.9644330448, 1.9644246411, 1.9644162690, 1.9644079282, 1.9643996186, 1.9643913400, 1.9643830923, 1.9643748753, 1.9643666887, 1.9643585325, 1.9643504064, 1.9643423104, 1.9643342441, 1.9643262076, 1.9643182005, 1.9643102228, 1.9643022742, 1.9642943547, 1.9642864640, 1.9642786020, 1.9642707686, 1.9642629636, 1.9642551868, 1.9642474381, 1.9642397173, 1.9642320243, 1.9642243590, 1.9642167211, 1.9642091106, 1.9642015272, 1.9641939709, 1.9641864415, 1.9641789389, 1.9641714628, 1.9641640133, 1.9641565900, 1.9641491930, 1.9641418220, 1.9641344770, 1.9641271577, 1.9641198640, 1.9641125959, 1.9641053532, 1.9640981357, 1.9640909433, 1.9640837758, 1.9640766333, 1.9640695154, 1.9640624222, 1.9640553534, 1.9640483090, 1.9640412888, 1.9640342926, 1.9640273205, 1.9640203722, 1.9640134476, 1.9640065466, 1.9639996691, 1.9639928149, 1.9639859840, 1.9639791762, 1.9639723914, 1.9639656295, 1.9639588904, 1.9639521739, 1.9639454800, 1.9639388086, 1.9639321594, 1.9639255324, 1.9639189276, 1.9639123447, 1.9639057837, 1.9638992445, 1.9638927269, 1.9638862309, 1.9638797563, 1.9638733031, 1.9638668711, 1.9638604603, 1.9638540704, 1.9638477015, 1.9638413534, 1.9638350260, 1.9638287193, 1.9638224330, 1.9638161672, 1.9638099217, 1.9638036964, 1.9637974912, 1.9637913061, 1.9637851408, 1.9637789954, 1.9637728698, 1.9637667638, 1.9637606773, 1.9637546103, 1.9637485626, 1.9637425342, 1.9637365250, 1.9637305348, 1.9637245637, 1.9637186635, 1.9637127301, 1.9637068154, 1.9637009194, 1.9636950418, 1.9636891828, 1.9636833421, 1.9636775197, 1.9636717155, 1.9636659294, 1.9636601614, 1.9636544113, 1.9636486791, 1.9636429646, 1.9636372678, 1.9636315887, 1.9636259271, 1.9636202829, 1.9636146561, 1.9636090466, 1.9636034543, 1.9635978792, 1.9635923211, 1.9635867800, 1.9635812557, 1.9635757483, 1.9635702577, 1.9635647837, 1.9635593263, 1.9635538854, 1.9635484610, 1.9635430529, 1.9635376611, 1.9635322856, 1.9635269261, 1.9635215828, 1.9635162555, 1.9635109441, 1.9635056485, 1.9635003688, 1.9634951047, 1.9634898564, 1.9634846236, 1.9634794063, 1.9634742044, 1.9634690179, 1.9634638467, 1.9634586908, 1.9634535500, 1.9634484243, 1.9634433137, 1.9634382180, 1.9634331372, 1.9634280713, 1.9634230201, 1.9634179837, 1.9634129619, 1.9634079547, 1.9634029620, 1.9633979837, 1.9633930198, 1.9633880703, 1.9633831351, 1.9633782140, 1.9633733071, 1.9633684143, 1.9633635355, 1.9633586706, 1.9633538197, 1.9633489826, 1.9633441593, 1.9633393497, 1.9633345538, 1.9633297715, 1.9633250027, 1.9633202475, 1.9633155056, 1.9633107772, 1.9633060621, 1.9633013602, 1.9632966716, 1.9632919961, 1.9632873337, 1.9632826843, 1.9632780480, 1.9632734246, 1.9632688140, 1.9632642163, 1.9632596314, 1.9632550592, 1.9632504996, 1.9632459527, 1.9632414184, 1.9632368965, 1.9632323871, 1.9632278901, 1.9632234055, 1.9632189332, 1.9632144731, 1.9632100253, 1.9632055896, 1.9632011660, 1.9631967544, 1.9631923549, 1.9631879673, 1.9631835917, 1.9631792279, 1.9631748759, 1.9631705357, 1.9631662072, 1.9631618903, 1.9631575851, 1.9631532915, 1.9631490094, 1.9631447387, 1.9631404796, 1.9631362318, 1.9631319953, 1.9631277702, 1.9631235563, 1.9631193536, 1.9631151621, 1.9631109817, 1.9631068123, 1.9631026540, 1.9630985067, 1.9630943704, 1.9630902449, 1.9630861303, 1.9630820266, 1.9630779336, 1.9630738513, 1.9630697797, 1.9630657188, 1.9630616684, 1.9630576287, 1.9630535994, 1.9630495807, 1.9630455723, 1.9630415744, 1.9630375869, 1.9630336096, 1.9630296426, 1.9630256859, 1.9630217394, 1.9630178030, 1.9630138768, 1.9630099606, 1.9630060545, 1.9630021584, 1.9629982723, 1.9629943961, 1.9629905298, 1.9629866733, 1.9629828266, 1.9629789898, 1.9629751626, 1.9629713452, 1.9629675374, 1.9629637393, 1.9629599507, 1.9629561718, 1.9629524023, 1.9629486423, 1.9629448918, 1.9629411507, 1.9629374189, 1.9629336965, 1.9629299835, 1.9629262796, 1.9629225851, 1.9629188997, 1.9629152235, 1.9629115564, 1.9629078985, 1.9629042496, 1.9629006097, 1.9628969789, 1.9628933570, 1.9628897440, 1.9628861400, 1.9628825448, 1.9628789584, 1.9628753809, 1.9628718121, 1.9628682520, 1.9628647007, 1.9628611580, 1.9628576240, 1.9628540986, 1.9628505818, 1.9628470735, 1.9628435737, 1.9628400825, 1.9628365996, 1.9628331252, 1.9628296592, 1.9628262016, 1.9628227523, 1.9628193113, 1.9628158786, 1.9628124541, 1.9628090378, 1.9628056297, 1.9628022298, 1.9627988380, 1.9627954543, 1.9627920786, 1.9627887110, 1.9627853515, 1.9627819998, 1.9627786562, 1.9627753205, 1.9627719926, 1.9627686727, 1.9627653605, 1.9627620562, 1.9627587597, 1.9627554709, 1.9627521899, 1.9627489166, 1.9627456509, 1.9627423929, 1.9627391425, 1.9627358997, 1.9627326645, 1.9627294368, 1.9627262167, 1.9627230040, 1.9627197988, 1.9627166011, 1.9627134107, 1.9627102277, 1.9627070521, 1.9627038839, 1.9627007229, 1.9626975692, 1.9626944228, 1.9626912836, 1.9626881517, 1.9626850269, 1.9626819093, 1.9626787988, 1.9626756954, 1.9626725991, 1.9626695099, 1.9626664277, 1.9626633525, 1.9626602843, 1.9626572231, 1.9626541688, 1.9626511215, 1.9626480810, 1.9626450474, 1.9626420207, 1.9626390008, 1.9626359877, 1.9626329813, 1.9626299818, 1.9626269889, 1.9626240028, 1.9626210234, 1.9626180506, 1.9626150845, 1.9626121250, 1.9626091721, 1.9626062257, 1.9626032860, 1.9626003527, 1.9625974260, 1.9625945058, 1.9625915920, 1.9625886847, 1.9625857838, 1.9625828893, 1.9625800012, 1.9625771195, 1.9625742441, 1.9625713750, 1.9625685123, 1.9625656558, 1.9625628055, 1.9625599615, 1.9625571238, 1.9625542922, 1.9625514668, 1.9625486475, 1.9625458344, 1.9625430274, 1.9625402265, 1.9625374317, 1.9625346429, 1.9625318602, 1.9625290835, 1.9625263128, 1.9625235481, 1.9625207893, 1.9625180365, 1.9625152895, 1.9625125485, 1.9625098134, 1.9625070842, 1.9625043607, 1.9625016432, 1.9624989314, 1.9624962254, 1.9624935252, 1.9624908307, 1.9624881420, 1.9624854589, 1.9624827816, 1.9624801100, 1.9624774440, 1.9624747837, 1.9624721290, 1.9624694799, 1.9624668363, 1.9624641984, 1.9624615660, 1.9624589392, 1.9624563178, 1.9624537020, 1.9624510917, 1.9624484868, 1.9624458874, 1.9624432934, 1.9624407048, 1.9624381216, 1.9624355438, 1.9624329714, 1.9624304043, 1.9624278426, 1.9624252862, 1.9624227350, 1.9624201892, 1.9624176486, 1.9624151133, 1.9624125832, 1.9624100583, 1.9624075386, 1.9624050242, 1.9624025148, 1.9624000107, 1.9623975116, 1.9623950177, 1.9623925289, 1.9623900452, 1.9623875666, 1.9623850930, 1.9623826245, 1.9623801610, 1.9623777025, 1.9623752490, 1.9623728005, 1.9623703569, 1.9623679183, 1.9623654847, 1.9623630560, 1.9623606321, 1.9623582132, 1.9623557992, 1.9623533900, 1.9623509856, 1.9623485861, 1.9623461914, 1.9623438015, 1.9623414164, 1.9623390361, 1.9623366606, 1.9623342898, 1.9623319237, 1.9623295623, 1.9623272057, 1.9623248537, 1.9623225064, 1.9623201638, 1.9623178258, 1.9623154925, 1.9623131638, 1.9623108397, 1.9623085202, 1.9623062052, 1.9623038949, 1.9623015890, 1.9622992878, 1.9622969910, 1.9622946988, 1.9622924111, 1.9622901278, 1.9622878490, 1.9622855747, 1.9622833049, 1.9622810394, 1.9622787784, 1.9622765218, 1.9622742696, 1.9622720218, 1.9622697783, 1.9622675392, 1.9622653045, 1.9622630740, 1.9622608479, 1.9622586261, 1.9622564086, 1.9622541954, 1.9622519865, 1.9622497818, 1.9622475813, 1.9622453851, 1.9622431931, 1.9622410053, 1.9622388217, 1.9622366423, 1.9622344671, 1.9622322960, 1.9622301290, 1.9622279663, 1.9622258076, 1.9622236530, 1.9622215026, 1.9622193562, 1.9622172139, 1.9622150757, 1.9622129415, 1.9622108114, 1.9622086853, 1.9622065632, 1.9622044451, 1.9622023311, 1.9622002210, 1.9621981149, 1.9621960127, 1.9621939145, 1.9621918203, 1.9621897300, 1.9621876435, 1.9621855610, 1.9621834824, 1.9621814077, 1.9621793369, 1.9621772699, 1.9621752068, 1.9621731475, 1.9621710921, 1.9621690404, 1.9621669926, 1.9621649486, 1.9621629084, 1.9621608719, 1.9621588392, 1.9621568103, 1.9621547851, 1.9621527637, 1.9621507460, 1.9621487320, 1.9621467217, 1.9621447151, 1.9621427122, 1.9621407130, 1.9621387174, 1.9621367255, 1.9621347373, 1.9621327526, 1.9621307716, 1.9621287942, 1.9621268205, 1.9621248503, 1.9621228837, 1.9621209206, 1.9621189612, 1.9621170053, 1.9621150529, 1.9621131041, 1.9621111588, 1.9621092171, 1.9621072788, 1.9621053440, 1.9621034128, 1.9621014850, 1.9620995607, 1.9620976398, 1.9620957224, 1.9620938084, 1.9620918979, 1.9620899908, 1.9620880871, 1.9620861868, 1.9620842899, 1.9620823964, 1.9620805063, 1.9620786196, 1.9620767362, 1.9620748561, 1.9620729794, 1.9620711061, 1.9620692360, 1.9620673693, 1.9620655059, 1.9620636458, 1.9620617890, 1.9620599354, 1.9620580852, 1.9620562382, 1.9620543944, 1.9620525539, 1.9620507166, 1.9620488826, 1.9620470518, 1.9620452242, 1.9620433998, 1.9620415786, 1.9620397606, 1.9620379457, 1.9620361340, 1.9620343255, 1.9620325202, 1.9620307180, 1.9620289189, 1.9620271230, 1.9620253302, 1.9620235405, 1.9620217539, 1.9620199704, 1.9620181899, 1.9620164126, 1.9620146383, 1.9620128671, 1.9620110990, 1.9620093339, 1.9620075719, 1.9620058129, 1.9620040569, 1.9620023039, 1.9620005539, 1.9619988070, 1.9619970630, 1.9619953220, 1.9619935840, 1.9619918490, 1.9619901169, 1.9619883878, 1.9619866617, 1.9619849385, 1.9619832182, 1.9619815008, 1.9619797864, 1.9619780748, 1.9619763662, 1.9619746605, 1.9619729576, 1.9619712577, 1.9619695606, 1.9619678664, 1.9619661750, 1.9619644865, 1.9619628009, 1.9619611180, 1.9619594381, 1.9619577609, 1.9619560865, 1.9619544150, 1.9619527463, 1.9619510803, 1.9619494172, 1.9619477568, 1.9619460992, 1.9619444444, 1.9619427923, 1.9619411430, 1.9619394964, 1.9619378526, 1.9619362115, 1.9619345732, 1.9619329375, 1.9619313046, 1.9619296744, 1.9619280468, 1.9619264220, 1.9619247998, 1.9619231804, 1.9619215636, 1.9619199494, 1.9619183380, 1.9619167292, 1.9619151230, 1.9619135195, 1.9619119186, 1.9619103203, 1.9619087246, 1.9619071316, 1.9619055412, 1.9619039533, 1.9619023681, 1.9619007855, 1.9618992054, 1.9618976279, 1.9618960530, 1.9618944807, 1.9618929109, 1.9618913436, 1.9618897789, 1.9618882168, 1.9618866571, 1.9618851000, 1.9618835454, 1.9618819934, 1.9618804438, 1.9618788967, 1.9618773522, 1.9618758101, 1.9618742705, 1.9618727334, 1.9618711988, 1.9618696666, 1.9618681369, 1.9618666096, 1.9618650848, 1.9618635624, 1.9618620425, 1.9618605250, 1.9618590099, 1.9618574972, 1.9618559870, 1.9618544791, 1.9618529737, 1.9618514706, 1.9618499700, 1.9618484717, 1.9618469758, 1.9618454823, 1.9618439911, 1.9618425024, 1.9618410159, 1.9618395318, 1.9618380501, 1.9618365707, 1.9618350936, 1.9618336189, 1.9618321465, 1.9618306764, 1.9618292086, 1.9618277431, 1.9618262799, 1.9618248190, 1.9618233604, 1.9618219041, 1.9618204501, 1.9618189984, 1.9618175489, 1.9618161016, 1.9618146567, 1.9618132140, 1.9618117735, 1.9618103353, 1.9618088993, 1.9618074655, 1.9618060340, 1.9618046047, 1.9618031776, 1.9618017527, 1.9618003301, 1.9617989096, 1.9617974913, 1.9617960752, 1.9617946613, 1.9617932496, 1.9617918401, 1.9617904327, 1.9617890275, 1.9617876244, 1.9617862235, 1.9617848248, 1.9617834282, 1.9617820338, 1.9617806414, 1.9617792512, 1.9617778632, 1.9617764772, 1.9617750934, 1.9617737117, 1.9617723321, 1.9617709546, 1.9617695792, 1.9617682059, 1.9617668346, 1.9617654655, 1.9617640984, 1.9617627334, 1.9617613705, 1.9617600096, 1.9617586508, 1.9617572941, 1.9617559394, 1.9617545867, 1.9617532361, 1.9617518876, 1.9617505410, 1.9617491965, 1.9617478540, 1.9617465135, 1.9617451750, 1.9617438386, 1.9617425041, 1.9617411717, 1.9617398412, 1.9617385127, 1.9617371863, 1.9617358618, 1.9617345392, 1.9617332187, 1.9617319001, 1.9617305835, 1.9617292688, 1.9617279561, 1.9617266454, 1.9617253365, 1.9617240297, 1.9617227248, 1.9617214218, 1.9617201207, 1.9617188216, 1.9617175243, 1.9617162290, 1.9617149356, 1.9617136442, 1.9617123546, 1.9617110669, 1.9617097811, 1.9617084972, 1.9617072152, 1.9617059351, 1.9617046568, 1.9617033805, 1.9617021060, 1.9617008333, 1.9616995626, 1.9616982937, 1.9616970266, 1.9616957614, 1.9616944980, 1.9616932365, 1.9616919768, 1.9616907190, 1.9616894629, 1.9616882088, 1.9616869564, 1.9616857058, 1.9616844571, 1.9616832102, 1.9616819650, 1.9616807217, 1.9616794802, 1.9616782405, 1.9616770025, 1.9616757664, 1.9616745320, 1.9616732994, 1.9616720686, 1.9616708395, 1.9616696123, 1.9616683867, 1.9616671630, 1.9616659410, 1.9616647207, 1.9616635023, 1.9616622855, 1.9616610705, 1.9616598572, 1.9616586457, 1.9616574359, 1.9616562278, 1.9616550214, 1.9616538168, 1.9616526138, 1.9616514126, 1.9616502131, 1.9616490153, 1.9616478192, 1.9616466248, 1.9616454321, 1.9616442410, 1.9616430517, 1.9616418640, 1.9616406781, 1.9616394938, 1.9616383111, 1.9616371302, 1.9616359509, 1.9616347732, 1.9616335973, 1.9616324229, 1.9616312503, 1.9616300792, 1.9616289098, 1.9616277421, 1.9616265760, 1.9616254115, 1.9616242487, 1.9616230875, 1.9616219279, 1.9616207699, 1.9616196135, 1.9616184588, 1.9616173057, 1.9616161541, 1.9616150042, 1.9616138559, 1.9616127092, 1.9616115640, 1.9616104205, 1.9616092785, 1.9616081381, 1.9616069993, 1.9616058621, 1.9616047265, 1.9616035924, 1.9616024599, 1.9616013289, 1.9616001995, 1.9615990717, 1.9615979454, 1.9615968207, 1.9615956975, 1.9615945759, 1.9615934558, 1.9615923372, 1.9615912202, 1.9615901047, 1.9615889907, 1.9615878783, 1.9615867674, 1.9615856580, 1.9615845501, 1.9615834437, 1.9615823389, 1.9615812355, 1.9615801337, 1.9615790333, 1.9615779345, 1.9615768371, 1.9615757412, 1.9615746469, 1.9615735540, 1.9615724626, 1.9615713726, 1.9615702842, 1.9615691972, 1.9615681117, 1.9615670276, 1.9615659451, 1.9615648639, 1.9615637843, 1.9615627061, 1.9615616293, 1.9615605540, 1.9615594801, 1.9615584077, 1.9615573368, 1.9615562672, 1.9615551991, 1.9615541324, 1.9615530672, 1.9615520034, 1.9615509410, 1.9615498800, 1.9615488205, 1.9615477623, 1.9615467056, 1.9615456503, 1.9615445964, 1.9615435439, 1.9615424928, 1.9615414430, 1.9615403947, 1.9615393478, 1.9615383023, 1.9615372581, 1.9615362154, 1.9615351740, 1.9615341340, 1.9615330954, 1.9615320581, 1.9615310222, 1.9615299877, 1.9615289546, 1.9615279228, 1.9615268924, 1.9615258633, 1.9615248356, 1.9615238092, 1.9615227842, 1.9615217605, 1.9615207382, 1.9615197172, 1.9615186976, 1.9615176792, 1.9615166623, 1.9615156466, 1.9615146323, 1.9615136193, 1.9615126076, 1.9615115973, 1.9615105882, 1.9615095805, 1.9615085741, 1.9615075690, 1.9615065652, 1.9615055627, 1.9615045616, 1.9615035617, 1.9615025631, 1.9615015658, 1.9615005698, 1.9614995751, 1.9614985817, 1.9614975895, 1.9614965987, 1.9614956091, 1.9614946208, 1.9614936337, 1.9614926480, 1.9614916635, 1.9614906803, 1.9614896983, 1.9614887176, 1.9614877382, 1.9614867600, 1.9614857831, 1.9614848075, 1.9614838330, 1.9614828599, 1.9614818879, 1.9614809173, 1.9614799478, 1.9614789796, 1.9614780127, 1.9614770469, 1.9614760824, 1.9614751192, 1.9614741571, 1.9614731963, 1.9614722367, 1.9614712783, 1.9614703212, 1.9614693652, 1.9614684105, 1.9614674569, 1.9614665046, 1.9614655535, 1.9614646036, 1.9614636549, 1.9614627074, 1.9614617611, 1.9614608160, 1.9614598720, 1.9614589293, 1.9614579878, 1.9614570474, 1.9614561082, 1.9614551702, 1.9614542334, 1.9614532977, 1.9614523633, 1.9614514300, 1.9614504978, 1.9614495669, 1.9614486371, 1.9614477085, 1.9614467810, 1.9614458547, 1.9614449295, 1.9614440055, 1.9614430827, 1.9614421610, 1.9614412404, 1.9614403210, 1.9614394027, 1.9614384856, 1.9614375696, 1.9614366548, 1.9614357411, 1.9614348285, 1.9614339171, 1.9614330067, 1.9614320976, 1.9614311895, 1.9614302826, 1.9614293767, 1.9614284720, 1.9614275684, 1.9614266660, 1.9614257646, 1.9614248644, 1.9614239652, 1.9614230672, 1.9614221702, 1.9614212744, 1.9614203797, 1.9614194861, 1.9614185935, 1.9614177021, 1.9614168117, 1.9614159225, 1.9614150343, 1.9614141472, 1.9614132612, 1.9614123763, 1.9614114924, 1.9614106097, 1.9614097280, 1.9614088474, 1.9614079678, 1.9614070894, 1.9614062120, 1.9614053356, 1.9614044604, 1.9614035862, 1.9614027130, 1.9614018409, 1.9614009699, 1.9614000999, 1.9613992310, 1.9613983631, 1.9613974963, 1.9613966305, 1.9613957658, 1.9613949021, 1.9613940394, 1.9613931778, 1.9613923172, 1.9613914577, 1.9613905992, 1.9613897417, 1.9613888853, 1.9613880299, 1.9613871755, 1.9613863221, 1.9613854698, 1.9613846185, 1.9613837682, 1.9613829189, 1.9613820706, 1.9613812233, 1.9613803771, 1.9613795319, 1.9613786877, 1.9613778444, 1.9613770022, 1.9613761610, 1.9613753208, 1.9613744816, 1.9613736434, 1.9613728062, 1.9613719699, 1.9613711347, 1.9613703005, 1.9613694672, 1.9613686350, 1.9613678037, 1.9613669734, 1.9613661441, 1.9613653157, 1.9613644884, 1.9613636620, 1.9613628366, 1.9613620121, 1.9613611887, 1.9613603662, 1.9613595447, 1.9613587241, 1.9613579045, 1.9613570859, 1.9613562682, 1.9613554515, 1.9613546357, 1.9613538209, 1.9613530071, 1.9613521942, 1.9613513823, 1.9613505713, 1.9613497612, 1.9613489521, 1.9613481440, 1.9613473368, 1.9613465305, 1.9613457252, 1.9613449208, 1.9613441173, 1.9613433148, 1.9613425132, 1.9613417125, 1.9613409128, 1.9613401140, 1.9613393161, 1.9613385192, 1.9613377231, 1.9613369280, 1.9613361338, 1.9613353406, 1.9613345482, 1.9613337568, 1.9613329663, 1.9613321767, 1.9613313880, 1.9613306002, 1.9613298133, 1.9613290273, 1.9613282422, 1.9613274580, 1.9613266748, 1.9613258924, 1.9613251109, 1.9613243303, 1.9613235507, 1.9613227719, 1.9613219940, 1.9613212170, 1.9613204408, 1.9613196656, 1.9613188913, 1.9613181178, 1.9613173452, 1.9613165735, 1.9613158027, 1.9613150327, 1.9613142637, 1.9613134955, 1.9613127282, 1.9613119617, 1.9613111961, 1.9613104314, 1.9613096676, 1.9613089046, 1.9613081425, 1.9613073813, 1.9613066209, 1.9613058614, 1.9613051027, 1.9613043449, 1.9613035879, 1.9613028319, 1.9613020766, 1.9613013222, 1.9613005687, 1.9612998160, 1.9612990641, 1.9612983131, 1.9612975630, 1.9612968137, 1.9612960652, 1.9612953176, 1.9612945708, 1.9612938248, 1.9612930797, 1.9612923354, 1.9612915920, 1.9612908493, 1.9612901076, 1.9612893666, 1.9612886265, 1.9612878872, 1.9612871487, 1.9612864110, 1.9612856742, 1.9612849382, 1.9612842030, 1.9612834686, 1.9612827350, 1.9612820023, 1.9612812703, 1.9612805392, 1.9612798089, 1.9612790794, 1.9612783507, 1.9612776228, 1.9612768958, 1.9612761695, 1.9612754440, 1.9612747193, 1.9612739955, 1.9612732724, 1.9612725501, 1.9612718287, 1.9612711080, 1.9612703881, 1.9612696690, 1.9612689507, 1.9612682332, 1.9612675164, 1.9612668005, 1.9612660854, 1.9612653710, 1.9612646574, 1.9612639446, 1.9612632326, 1.9612625213, 1.9612618109, 1.9612611012, 1.9612603923, 1.9612596841, 1.9612589768, 1.9612582702, 1.9612575644, 1.9612568593, 1.9612561550, 1.9612554515, 1.9612547488, 1.9612540468, 1.9612533456, 1.9612526451, 1.9612519454, 1.9612512464, 1.9612505483, 1.9612498508, 1.9612491542, 1.9612484582, 1.9612477631, 1.9612470687, 1.9612463750, 1.9612456821, 1.9612449899, 1.9612442985, 1.9612436079, 1.9612429179, 1.9612422288, 1.9612415403, 1.9612408526, 1.9612401657, 1.9612394794, 1.9612387940, 1.9612381092, 1.9612374252, 1.9612367419, 1.9612360594, 1.9612353776, 1.9612346965, 1.9612340161, 1.9612333365, 1.9612326576, 1.9612319794, 1.9612313020, 1.9612306253, 1.9612299493, 1.9612292740, 1.9612285994, 1.9612279256, 1.9612272525, 1.9612265801, 1.9612259084, 1.9612252374, 1.9612245671, 1.9612238976, 1.9612232287, 1.9612225606, 1.9612218932, 1.9612212265, 1.9612205605, 1.9612198952, 1.9612192306, 1.9612185667, 1.9612179035, 1.9612172410, 1.9612165792, 1.9612159181, 1.9612152577, 1.9612145980, 1.9612139390, 1.9612132807, 1.9612126231, 1.9612119661, 1.9612113099, 1.9612106543, 1.9612099995, 1.9612093453, 1.9612086918, 1.9612080390, 1.9612073869, 1.9612067355, 1.9612060847, 1.9612054347, 1.9612047853, 1.9612041366, 1.9612034885, 1.9612028412, 1.9612021945, 1.9612015485, 1.9612009032, 1.9612002585, 1.9611996145, 1.9611989712, 1.9611983286, 1.9611976866, 1.9611970453, 1.9611964047, 1.9611957647, 1.9611951254, 1.9611944867, 1.9611938487, 1.9611932114, 1.9611925747, 1.9611919387, 1.9611913034, 1.9611906687, 1.9611900346, 1.9611894013, 1.9611887685, 1.9611881365, 1.9611875050, 1.9611868743, 1.9611862441, 1.9611856147, 1.9611849858, 1.9611843577, 1.9611837301, 1.9611831033, 1.9611824770, 1.9611818514, 1.9611812265, 1.9611806021, 1.9611799785, 1.9611793554, 1.9611787330, 1.9611781113, 1.9611774901, 1.9611768696, 1.9611762498, 1.9611756306, 1.9611750120, 1.9611743940, 1.9611737767, 1.9611731600, 1.9611725439, 1.9611719285, 1.9611713137, 1.9611706995, 1.9611700859, 1.9611694730, 1.9611688606, 1.9611682489, 1.9611676379, 1.9611670274, 1.9611664176, 1.9611658083, 1.9611651997, 1.9611645917, 1.9611639844, 1.9611633776, 1.9611627715, 1.9611621659, 1.9611615610, 1.9611609567, 1.9611603530, 1.9611597499, 1.9611591474, 1.9611585455, 1.9611579443, 1.9611573436, 1.9611567435, 1.9611561441, 1.9611555452, 1.9611549469, 1.9611543493, 1.9611537522, 1.9611531558, 1.9611525599, 1.9611519646, 1.9611513700, 1.9611507759);
var t05arr = new Array (6.3137515136, 2.9199855801, 2.3533634345, 2.1318467819, 2.0150483721, 1.9431802743, 1.8945786037, 1.8595480333, 1.8331129226, 1.8124611022, 1.7958848142, 1.7822875476, 1.7709333826, 1.7613101151, 1.7530503252, 1.7458836689, 1.7396067156, 1.7340635923, 1.7291327925, 1.7247182182, 1.7207428715, 1.7171443354, 1.7138715171, 1.7108820667, 1.7081407452, 1.7056179005, 1.7032884230, 1.7011309076, 1.6991269956, 1.6972608511, 1.6955187421, 1.6938887026, 1.6923602576, 1.6909241978, 1.6895724395, 1.6882976937, 1.6870935969, 1.6859544606, 1.6848751222, 1.6838510138, 1.6828780026, 1.6819523579, 1.6810707037, 1.6802299770, 1.6794273931, 1.6786604140, 1.6779267221, 1.6772241966, 1.6765508931, 1.6759050256, 1.6752849509, 1.6746891542, 1.6741162372, 1.6735649068, 1.6730339658, 1.6725223036, 1.6720288889, 1.6715527629, 1.6710930326, 1.6706488654, 1.6702194843, 1.6698041630, 1.6694022222, 1.6690130255, 1.6686359763, 1.6682705147, 1.6679161146, 1.6675722813, 1.6672385492, 1.6669144795, 1.6665996588, 1.6662936966, 1.6659962243, 1.6657068932, 1.6654253738, 1.6651513539, 1.6648845377, 1.6646246450, 1.6643714096, 1.6641245791, 1.6638839134, 1.6636491845, 1.6634201754, 1.6631966795, 1.6629785002, 1.6627654499, 1.6625573499, 1.6623540297, 1.6621553264, 1.6619610845, 1.6617711556, 1.6615853974, 1.6614036742, 1.6612258558, 1.6610518178, 1.6608814408, 1.6607146106, 1.6605512176, 1.6603911565, 1.6602343266, 1.6600806309, 1.6599299765, 1.6597822739, 1.6596374372, 1.6594953839, 1.6593560344, 1.6592193124, 1.6590851441, 1.6589534587, 1.6588241879, 1.6586972659, 1.6585726293, 1.6584502168, 1.6583299696, 1.6582118305, 1.6580957448, 1.6579816592, 1.6578695226, 1.6577592854, 1.6576508998, 1.6575443196, 1.6574394999, 1.6573363975, 1.6572349706, 1.6571351787, 1.6570369825, 1.6569403440, 1.6568452266, 1.6567515945, 1.6566594132, 1.6565686493, 1.6564792704, 1.6563912449, 1.6563045424, 1.6562191332, 1.6561349887, 1.6560520810, 1.6559703829, 1.6558898683, 1.6558105115, 1.6557322878, 1.6556551731, 1.6555791439, 1.6555041776, 1.6554302519, 1.6553573454, 1.6552854371, 1.6552145067, 1.6551445343, 1.6550755007, 1.6550073871, 1.6549401752, 1.6548738473, 1.6548083860, 1.6547437744, 1.6546799962, 1.6546170352, 1.6545548759, 1.6544935031, 1.6544329019, 1.6543730579, 1.6543139570, 1.6542555854, 1.6541979297, 1.6541409768, 1.6540847139, 1.6540291286, 1.6539742087, 1.6539199424, 1.6538663179, 1.6538133241, 1.6537609499, 1.6537091843, 1.6536580170, 1.6536074376, 1.6535574359, 1.6535080023, 1.6534591270, 1.6534108006, 1.6533630140, 1.6533157581, 1.6532690242, 1.6532228036, 1.6531770880, 1.6531318691, 1.6530871389, 1.6530428894, 1.6529991131, 1.6529558022, 1.6529129495, 1.6528705477, 1.6528285898, 1.6527870687, 1.6527459778, 1.6527053103, 1.6526650597, 1.6526252198, 1.6525857841, 1.6525467467, 1.6525081014, 1.6524698425, 1.6524319641, 1.6523944606, 1.6523573265, 1.6523205563, 1.6522841447, 1.6522480865, 1.6522123766, 1.6521770099, 1.6521419815, 1.6521072867, 1.6520729205, 1.6520388785, 1.6520051560, 1.6519717486, 1.6519386519, 1.6519058615, 1.6518733732, 1.6518411828, 1.6518092864, 1.6517776798, 1.6517463592, 1.6517153206, 1.6516845603, 1.6516540746, 1.6516238598, 1.6515939123, 1.6515642286, 1.6515348051, 1.6515056386, 1.6514767256, 1.6514480628, 1.6514196471, 1.6513914752, 1.6513635440, 1.6513358505, 1.6513083916, 1.6512811643, 1.6512541658, 1.6512273931, 1.6512008435, 1.6511745141, 1.6511484023, 1.6511225053, 1.6510968205, 1.6510713453, 1.6510460772, 1.6510210137, 1.6509961522, 1.6509714903, 1.6509470257, 1.6509227559, 1.6508986788, 1.6508747919, 1.6508510930, 1.6508275799, 1.6508042505, 1.6507811026, 1.6507581341, 1.6507353430, 1.6507127270, 1.6506902844, 1.6506680130, 1.6506459109, 1.6506239762, 1.6506022070, 1.6505806015, 1.6505591577, 1.6505378740, 1.6505167484, 1.6504957793, 1.6504749649, 1.6504543035, 1.6504337934, 1.6504134330, 1.6503932207, 1.6503731548, 1.6503532337, 1.6503334559, 1.6503138198, 1.6502943240, 1.6502749668, 1.6502557470, 1.6502366629, 1.6502177132, 1.6501988964, 1.6501802112, 1.6501616562, 1.6501432300, 1.6501249313, 1.6501067587, 1.6500887110, 1.6500707869, 1.6500529851, 1.6500353044, 1.6500177435, 1.6500003013, 1.6499829765, 1.6499657679, 1.6499486744, 1.6499316949, 1.6499148281, 1.6498980730, 1.6498814285, 1.6498648935, 1.6498484668, 1.6498321475, 1.6498159345, 1.6497998267, 1.6497838232, 1.6497679229, 1.6497521249, 1.6497364280, 1.6497208315, 1.6497053343, 1.6496899354, 1.6496746340, 1.6496594291, 1.6496443198, 1.6496293052, 1.6496143845, 1.6495995567, 1.6495848209, 1.6495701764, 1.6495556223, 1.6495411577, 1.6495267818, 1.6495124939, 1.6494982930, 1.6494841784, 1.6494701494, 1.6494562051, 1.6494423449, 1.6494285678, 1.6494148732, 1.6494012604, 1.6493877285, 1.6493742770, 1.6493609050, 1.6493476119, 1.6493343970, 1.6493212596, 1.6493081990, 1.6492952145, 1.6492823055, 1.6492694714, 1.6492567114, 1.6492440249, 1.6492314113, 1.6492188700, 1.6492064004, 1.6491940018, 1.6491816736, 1.6491694152, 1.6491572261, 1.6491451057, 1.6491330533, 1.6491210684, 1.6491091505, 1.6490972990, 1.6490855133, 1.6490737928, 1.6490621371, 1.6490505457, 1.6490390179, 1.6490275532, 1.6490161512, 1.6490048113, 1.6489935330, 1.6489823159, 1.6489711594, 1.6489600630, 1.6489490262, 1.6489380486, 1.6489271297, 1.6489162690, 1.6489054661, 1.6488947205, 1.6488840318, 1.6488733994, 1.6488628230, 1.6488523021, 1.6488418362, 1.6488314250, 1.6488210680, 1.6488107648, 1.6488005150, 1.6487903182, 1.6487801739, 1.6487700817, 1.6487600413, 1.6487500522, 1.6487401141, 1.6487302266, 1.6487203892, 1.6487106017, 1.6487008635, 1.6486911745, 1.6486815340, 1.6486719420, 1.6486623978, 1.6486529013, 1.6486434520, 1.6486340495, 1.6486246937, 1.6486153840, 1.6486061201, 1.6485969018, 1.6485877287, 1.6485786004, 1.6485695166, 1.6485604771, 1.6485514814, 1.6485425292, 1.6485336203, 1.6485247543, 1.6485159310, 1.6485071499, 1.6484984109, 1.6484897135, 1.6484810576, 1.6484724428, 1.6484638688, 1.6484553354, 1.6484468421, 1.6484383889, 1.6484299753, 1.6484216012, 1.6484132661, 1.6484049699, 1.6483967123, 1.6483884930, 1.6483803118, 1.6483721683, 1.6483640623, 1.6483559937, 1.6483479620, 1.6483399671, 1.6483320086, 1.6483240865, 1.6483162003, 1.6483083499, 1.6483005350, 1.6482927554, 1.6482850108, 1.6482773010, 1.6482696258, 1.6482619849, 1.6482543781, 1.6482468052, 1.6482392660, 1.6482317602, 1.6482242876, 1.6482168480, 1.6482094411, 1.6482020668, 1.6481947249, 1.6481874150, 1.6481801371, 1.6481728909, 1.6481656762, 1.6481584928, 1.6481513405, 1.6481442190, 1.6481371283, 1.6481300681, 1.6481230381, 1.6481160383, 1.6481090683, 1.6481021281, 1.6480952174, 1.6480883361, 1.6480814839, 1.6480746606, 1.6480678662, 1.6480611004, 1.6480543629, 1.6480476538, 1.6480409727, 1.6480343195, 1.6480276940, 1.6480210960, 1.6480145255, 1.6480079821, 1.6480014658, 1.6479949763, 1.6479885135, 1.6479820773, 1.6479756674, 1.6479692838, 1.6479629262, 1.6479565945, 1.6479502886, 1.6479440082, 1.6479377532, 1.6479315235, 1.6479253190, 1.6479191393, 1.6479129846, 1.6479068544, 1.6479007488, 1.6478946676, 1.6478886105, 1.6478825776, 1.6478765686, 1.6478705834, 1.6478646218, 1.6478586838, 1.6478527691, 1.6478468777, 1.6478410094, 1.6478351640, 1.6478293415, 1.6478235417, 1.6478177644, 1.6478120096, 1.6478062770, 1.6478005667, 1.6477948784, 1.6477892120, 1.6477835673, 1.6477779444, 1.6477723430, 1.6477667630, 1.6477612043, 1.6477556668, 1.6477501503, 1.6477446548, 1.6477391801, 1.6477337261, 1.6477282926, 1.6477228797, 1.6477174870, 1.6477121146, 1.6477067623, 1.6477014301, 1.6476961177, 1.6476908251, 1.6476855522, 1.6476802988, 1.6476750649, 1.6476698503, 1.6476646550, 1.6476594788, 1.6476543216, 1.6476491834, 1.6476440640, 1.6476389633, 1.6476338812, 1.6476288176, 1.6476237724, 1.6476187456, 1.6476137369, 1.6476087464, 1.6476037739, 1.6475988193, 1.6475938825, 1.6475889634, 1.6475840620, 1.6475791781, 1.6475743116, 1.6475694625, 1.6475646307, 1.6475598160, 1.6475550183, 1.6475502377, 1.6475454740, 1.6475407270, 1.6475359968, 1.6475312832, 1.6475265861, 1.6475219055, 1.6475172412, 1.6475125932, 1.6475079614, 1.6475033457, 1.6474987461, 1.6474941624, 1.6474895945, 1.6474850424, 1.6474805061, 1.6474759853, 1.6474714800, 1.6474669903, 1.6474625159, 1.6474580567, 1.6474536128, 1.6474491841, 1.6474447704, 1.6474403717, 1.6474359879, 1.6474316189, 1.6474272647, 1.6474229252, 1.6474186003, 1.6474142899, 1.6474099940, 1.6474057124, 1.6474014452, 1.6473971923, 1.6473929535, 1.6473887288, 1.6473845181, 1.6473803214, 1.6473761386, 1.6473719697, 1.6473678145, 1.6473636729, 1.6473595451, 1.6473554307, 1.6473513299, 1.6473472424, 1.6473431683, 1.6473391076, 1.6473350600, 1.6473310256, 1.6473270043, 1.6473229960, 1.6473190007, 1.6473150183, 1.6473110488, 1.6473070920, 1.6473031480, 1.6472992166, 1.6472952978, 1.6472913916, 1.6472874978, 1.6472836165, 1.6472797475, 1.6472758908, 1.6472720464, 1.6472682141, 1.6472643940, 1.6472605859, 1.6472567898, 1.6472530057, 1.6472492335, 1.6472454732, 1.6472417246, 1.6472379878, 1.6472342626, 1.6472305491, 1.6472268471, 1.6472231566, 1.6472194776, 1.6472158100, 1.6472121538, 1.6472085089, 1.6472048752, 1.6472012527, 1.6471976413, 1.6471940411, 1.6471904519, 1.6471868736, 1.6471833064, 1.6471797500, 1.6471762044, 1.6471726697, 1.6471691457, 1.6471656323, 1.6471621297, 1.6471586376, 1.6471551561, 1.6471516850, 1.6471482245, 1.6471447743, 1.6471413345, 1.6471379050, 1.6471344858, 1.6471310768, 1.6471276779, 1.6471242892, 1.6471209106, 1.6471175420, 1.6471141835, 1.6471108348, 1.6471074961, 1.6471041672, 1.6471008482, 1.6470975389, 1.6470942394, 1.6470909495, 1.6470876693, 1.6470843987, 1.6470811377, 1.6470778862, 1.6470746442, 1.6470714116, 1.6470681884, 1.6470649745, 1.6470617700, 1.6470585747, 1.6470553887, 1.6470522119, 1.6470490442, 1.6470458856, 1.6470427361, 1.6470395957, 1.6470364642, 1.6470333418, 1.6470302282, 1.6470271235, 1.6470240276, 1.6470209406, 1.6470178623, 1.6470147928, 1.6470117320, 1.6470086798, 1.6470056362, 1.6470026012, 1.6469995748, 1.6469965569, 1.6469935474, 1.6469905464, 1.6469875538, 1.6469845696, 1.6469815937, 1.6469786261, 1.6469756668, 1.6469727157, 1.6469697728, 1.6469668381, 1.6469639115, 1.6469609930, 1.6469580825, 1.6469551801, 1.6469522857, 1.6469493992, 1.6469465207, 1.6469436500, 1.6469407872, 1.6469379323, 1.6469350851, 1.6469322458, 1.6469294141, 1.6469265902, 1.6469237739, 1.6469209653, 1.6469181643, 1.6469153709, 1.6469125850, 1.6469098066, 1.6469070357, 1.6469042723, 1.6469015163, 1.6468987678, 1.6468960265, 1.6468932926, 1.6468905661, 1.6468878468, 1.6468851347, 1.6468824299, 1.6468797323, 1.6468770418, 1.6468743585, 1.6468716823, 1.6468690131, 1.6468663510, 1.6468636960, 1.6468610479, 1.6468584068, 1.6468557726, 1.6468531454, 1.6468505250, 1.6468479115, 1.6468453048, 1.6468427050, 1.6468401119, 1.6468375255, 1.6468349459, 1.6468323730, 1.6468298068, 1.6468272472, 1.6468246942, 1.6468221478, 1.6468196080, 1.6468170748, 1.6468145480, 1.6468120278, 1.6468095140, 1.6468070067, 1.6468045058, 1.6468020113, 1.6467995231, 1.6467970414, 1.6467945659, 1.6467920967, 1.6467896338, 1.6467871772, 1.6467847267, 1.6467822825, 1.6467798445, 1.6467774126, 1.6467749869, 1.6467725672, 1.6467701537, 1.6467677462, 1.6467653447, 1.6467629493, 1.6467605599, 1.6467581764, 1.6467557989, 1.6467534273, 1.6467510616, 1.6467487018, 1.6467463479, 1.6467439998, 1.6467416576, 1.6467393211, 1.6467369904, 1.6467346654, 1.6467323462, 1.6467300327, 1.6467277249, 1.6467254228, 1.6467231263, 1.6467208354, 1.6467185502, 1.6467162705, 1.6467139964, 1.6467117279, 1.6467094648, 1.6467072073, 1.6467049553, 1.6467027087, 1.6467004676, 1.6466982319, 1.6466960016, 1.6466937767, 1.6466915572, 1.6466893430, 1.6466871341, 1.6466849306, 1.6466827323, 1.6466805393, 1.6466783516, 1.6466761691, 1.6466739918, 1.6466718197, 1.6466696528, 1.6466674910, 1.6466653344, 1.6466631829, 1.6466610365, 1.6466588952, 1.6466567589, 1.6466546278, 1.6466525016, 1.6466503805, 1.6466482643, 1.6466461531, 1.6466440469, 1.6466419457, 1.6466398493, 1.6466377579, 1.6466356714, 1.6466335897, 1.6466315129, 1.6466294409, 1.6466273738, 1.6466253115, 1.6466232539, 1.6466212012, 1.6466191532, 1.6466171099, 1.6466150713, 1.6466130375, 1.6466110084, 1.6466089839, 1.6466069641, 1.6466049489, 1.6466029383, 1.6466009324, 1.6465989311, 1.6465969343, 1.6465949421, 1.6465929545, 1.6465909714, 1.6465889928, 1.6465870187, 1.6465850491, 1.6465830839, 1.6465811232, 1.6465791670, 1.6465772152, 1.6465752678, 1.6465733248, 1.6465713861, 1.6465694519, 1.6465675220, 1.6465655964, 1.6465636751, 1.6465617582, 1.6465598455, 1.6465579372, 1.6465560330, 1.6465541332, 1.6465522376, 1.6465503462, 1.6465484590, 1.6465465760, 1.6465446971, 1.6465428225, 1.6465409520, 1.6465390856, 1.6465372234, 1.6465353652, 1.6465335112, 1.6465316612, 1.6465298154, 1.6465279735, 1.6465261357, 1.6465243020, 1.6465224723, 1.6465206465, 1.6465188248, 1.6465170070, 1.6465151932, 1.6465133834, 1.6465115774, 1.6465097755, 1.6465079774, 1.6465061832, 1.6465043929, 1.6465026065, 1.6465008240, 1.6464990453, 1.6464972704, 1.6464954994, 1.6464937322, 1.6464919687, 1.6464902091, 1.6464884532, 1.6464867011, 1.6464849528, 1.6464832082, 1.6464814673, 1.6464797301, 1.6464779967, 1.6464762669, 1.6464745408, 1.6464728184, 1.6464710997, 1.6464693845, 1.6464676731, 1.6464659652, 1.6464642609, 1.6464625603, 1.6464608632, 1.6464591697, 1.6464574798, 1.6464557935, 1.6464541106, 1.6464524313, 1.6464507556, 1.6464490833, 1.6464474145, 1.6464457492, 1.6464440874, 1.6464424291, 1.6464407742, 1.6464391228, 1.6464374748, 1.6464358302, 1.6464341890, 1.6464325512, 1.6464309169, 1.6464292859, 1.6464276582, 1.6464260340, 1.6464244130, 1.6464227954, 1.6464211812, 1.6464195703, 1.6464179626, 1.6464163583, 1.6464147572, 1.6464131595, 1.6464115650, 1.6464099737, 1.6464083857, 1.6464068010, 1.6464052194, 1.6464036411, 1.6464020660, 1.6464004941, 1.6463989254, 1.6463973598, 1.6463957975, 1.6463942383, 1.6463926822, 1.6463911293, 1.6463895795, 1.6463880328, 1.6463864892, 1.6463849488, 1.6463834114, 1.6463818771, 1.6463803459, 1.6463788178, 1.6463772927, 1.6463757706, 1.6463742516, 1.6463727357, 1.6463712227, 1.6463697128, 1.6463682058, 1.6463667019, 1.6463652009, 1.6463637029, 1.6463622079, 1.6463607158, 1.6463592267, 1.6463577406, 1.6463562573, 1.6463547770, 1.6463532996, 1.6463518251, 1.6463503535, 1.6463488847, 1.6463474189, 1.6463459559, 1.6463444958, 1.6463430386, 1.6463415842, 1.6463401326, 1.6463386839, 1.6463372379, 1.6463357948, 1.6463343545, 1.6463329170, 1.6463314823, 1.6463300504, 1.6463286212, 1.6463271948, 1.6463257712, 1.6463243503, 1.6463229321, 1.6463215167, 1.6463201040, 1.6463186940, 1.6463172868, 1.6463158822, 1.6463144803, 1.6463130811, 1.6463116846, 1.6463102908, 1.6463088996, 1.6463075110, 1.6463061252, 1.6463047419, 1.6463033613, 1.6463019833, 1.6463006080, 1.6462992352, 1.6462978651, 1.6462964975, 1.6462951325, 1.6462937701, 1.6462924103, 1.6462910531, 1.6462896984, 1.6462883462, 1.6462869966, 1.6462856495, 1.6462843050, 1.6462829630, 1.6462816235, 1.6462802865, 1.6462789520, 1.6462776200, 1.6462762905, 1.6462749635, 1.6462736389, 1.6462723169, 1.6462709972, 1.6462696801, 1.6462683653, 1.6462670530, 1.6462657432, 1.6462644357, 1.6462631307, 1.6462618281, 1.6462605279, 1.6462592301, 1.6462579347, 1.6462566417, 1.6462553511, 1.6462540628, 1.6462527769, 1.6462514934, 1.6462502122, 1.6462489333, 1.6462476568, 1.6462463827, 1.6462451108, 1.6462438413, 1.6462425741, 1.6462413092, 1.6462400466, 1.6462387863, 1.6462375283, 1.6462362725, 1.6462350191, 1.6462337679, 1.6462325190, 1.6462312723, 1.6462300279, 1.6462287857, 1.6462275458, 1.6462263081, 1.6462250727, 1.6462238394, 1.6462226084, 1.6462213796, 1.6462201530, 1.6462189286, 1.6462177064, 1.6462164863, 1.6462152685, 1.6462140528, 1.6462128393, 1.6462116280, 1.6462104188, 1.6462092117, 1.6462080068, 1.6462068041, 1.6462056035, 1.6462044050, 1.6462032086, 1.6462020144, 1.6462008222, 1.6461996322, 1.6461984443, 1.6461972584, 1.6461960747, 1.6461948930, 1.6461937135, 1.6461925359, 1.6461913605, 1.6461901871, 1.6461890158, 1.6461878465, 1.6461866793, 1.6461855141, 1.6461843510, 1.6461831899, 1.6461820308, 1.6461808737, 1.6461797186, 1.6461785656, 1.6461774145, 1.6461762655, 1.6461751184, 1.6461739733, 1.6461728302, 1.6461716891, 1.6461705500, 1.6461694128, 1.6461682776, 1.6461671444, 1.6461660131, 1.6461648837, 1.6461637563, 1.6461626308, 1.6461615073, 1.6461603857, 1.6461592660, 1.6461581482, 1.6461570323, 1.6461559184, 1.6461548063, 1.6461536962, 1.6461525879, 1.6461514815, 1.6461503770, 1.6461492744, 1.6461481737, 1.6461470748, 1.6461459778, 1.6461448826, 1.6461437893, 1.6461426979, 1.6461416083, 1.6461405205, 1.6461394346, 1.6461383505, 1.6461372683, 1.6461361878, 1.6461351092, 1.6461340324, 1.6461329574, 1.6461318842, 1.6461308128, 1.6461297432, 1.6461286753, 1.6461276093, 1.6461265451, 1.6461254826, 1.6461244219, 1.6461233630, 1.6461223058, 1.6461212504, 1.6461201967, 1.6461191448, 1.6461180946, 1.6461170462, 1.6461159995, 1.6461149546, 1.6461139114, 1.6461128699, 1.6461118301, 1.6461107920, 1.6461097557, 1.6461087210, 1.6461076881, 1.6461066568, 1.6461056273, 1.6461045994, 1.6461035733, 1.6461025488, 1.6461015260, 1.6461005048, 1.6460994854, 1.6460984676, 1.6460974514, 1.6460964369, 1.6460954241, 1.6460944129, 1.6460934034, 1.6460923955, 1.6460913893, 1.6460903846, 1.6460893816, 1.6460883803, 1.6460873805, 1.6460863824, 1.6460853859, 1.6460843910, 1.6460833977, 1.6460824060, 1.6460814159, 1.6460804274, 1.6460794405, 1.6460784552, 1.6460774714, 1.6460764892, 1.6460755087, 1.6460745296, 1.6460735522, 1.6460725763, 1.6460716020, 1.6460706292, 1.6460696580, 1.6460686883, 1.6460677202, 1.6460667536, 1.6460657886, 1.6460648251, 1.6460638631, 1.6460629026, 1.6460619437, 1.6460609863, 1.6460600304, 1.6460590760, 1.6460581231, 1.6460571718, 1.6460562219, 1.6460552735, 1.6460543267, 1.6460533813, 1.6460524374, 1.6460514950, 1.6460505541, 1.6460496146, 1.6460486766, 1.6460477401, 1.6460468051, 1.6460458715, 1.6460449394, 1.6460440087, 1.6460430795, 1.6460421517, 1.6460412254, 1.6460403006, 1.6460393771, 1.6460384551, 1.6460375346, 1.6460366154, 1.6460356977, 1.6460347814, 1.6460338666, 1.6460329531, 1.6460320411, 1.6460311305, 1.6460302212, 1.6460293134, 1.6460284070, 1.6460275020, 1.6460265984, 1.6460256961, 1.6460247953, 1.6460238958, 1.6460229977, 1.6460221010, 1.6460212057, 1.6460203117, 1.6460194191, 1.6460185279, 1.6460176380, 1.6460167495, 1.6460158623, 1.6460149765, 1.6460140921, 1.6460132090, 1.6460123272, 1.6460114468, 1.6460105677, 1.6460096899, 1.6460088135, 1.6460079384, 1.6460070646, 1.6460061922, 1.6460053211, 1.6460044513, 1.6460035828, 1.6460027156, 1.6460018497, 1.6460009851, 1.6460001218, 1.6459992598, 1.6459983992, 1.6459975398, 1.6459966817, 1.6459958248, 1.6459949693, 1.6459941150, 1.6459932621, 1.6459924104, 1.6459915599, 1.6459907108, 1.6459898629, 1.6459890163, 1.6459881709, 1.6459873268, 1.6459864839, 1.6459856423, 1.6459848020, 1.6459839629, 1.6459831250, 1.6459822884, 1.6459814530, 1.6459806188, 1.6459797859, 1.6459789542, 1.6459781238, 1.6459772945, 1.6459764665, 1.6459756397, 1.6459748142, 1.6459739898, 1.6459731667, 1.6459723447, 1.6459715240, 1.6459707044, 1.6459698861, 1.6459690690, 1.6459682531, 1.6459674383, 1.6459666248, 1.6459658124, 1.6459650012, 1.6459641912, 1.6459633824, 1.6459625747, 1.6459617683, 1.6459609630, 1.6459601589, 1.6459593559, 1.6459585541, 1.6459577535, 1.6459569540, 1.6459561557, 1.6459553585, 1.6459545625, 1.6459537677, 1.6459529739, 1.6459521814, 1.6459513899, 1.6459505997, 1.6459498105, 1.6459490225, 1.6459482356, 1.6459474499, 1.6459466652, 1.6459458817, 1.6459450994, 1.6459443181, 1.6459435379, 1.6459427589, 1.6459419810, 1.6459412042, 1.6459404285, 1.6459396539, 1.6459388804, 1.6459381081, 1.6459373368, 1.6459365666, 1.6459357975, 1.6459350295, 1.6459342626, 1.6459334967, 1.6459327320, 1.6459319683, 1.6459312058, 1.6459304443, 1.6459296838, 1.6459289245, 1.6459281662, 1.6459274090, 1.6459266528, 1.6459258977, 1.6459251437, 1.6459243908, 1.6459236389, 1.6459228880, 1.6459221382, 1.6459213895, 1.6459206418, 1.6459198951, 1.6459191495, 1.6459184049, 1.6459176614, 1.6459169189, 1.6459161775, 1.6459154371, 1.6459146977, 1.6459139593, 1.6459132220, 1.6459124857, 1.6459117504, 1.6459110161, 1.6459102829, 1.6459095507, 1.6459088195, 1.6459080893, 1.6459073601, 1.6459066319, 1.6459059047, 1.6459051785, 1.6459044534, 1.6459037292, 1.6459030060, 1.6459022838, 1.6459015626, 1.6459008424, 1.6459001232, 1.6458994050, 1.6458986878, 1.6458979715, 1.6458972562, 1.6458965420, 1.6458958286, 1.6458951163, 1.6458944049, 1.6458936945, 1.6458929851, 1.6458922767, 1.6458915692, 1.6458908626, 1.6458901571, 1.6458894525, 1.6458887488, 1.6458880461, 1.6458873444, 1.6458866436, 1.6458859437, 1.6458852448, 1.6458845469, 1.6458838499, 1.6458831538, 1.6458824587, 1.6458817645, 1.6458810712, 1.6458803789, 1.6458796875, 1.6458789971, 1.6458783076, 1.6458776190, 1.6458769313, 1.6458762445, 1.6458755587, 1.6458748738, 1.6458741898, 1.6458735067, 1.6458728246, 1.6458721433, 1.6458714630, 1.6458707836, 1.6458701050, 1.6458694274, 1.6458687507, 1.6458680749, 1.6458674000, 1.6458667259, 1.6458660528, 1.6458653806, 1.6458647092, 1.6458640388, 1.6458633692, 1.6458627006, 1.6458620328, 1.6458613659, 1.6458606999, 1.6458600347, 1.6458593704, 1.6458587071, 1.6458580445, 1.6458573829, 1.6458567221, 1.6458560622, 1.6458554032, 1.6458547450, 1.6458540877, 1.6458534313, 1.6458527757, 1.6458521210, 1.6458514671, 1.6458508141, 1.6458501620, 1.6458495106, 1.6458488602, 1.6458482106, 1.6458475618, 1.6458469139, 1.6458462669, 1.6458456207, 1.6458449753, 1.6458443307, 1.6458436870, 1.6458430442, 1.6458424021, 1.6458417609, 1.6458411206, 1.6458404810, 1.6458398423, 1.6458392044, 1.6458385674, 1.6458379311, 1.6458372957, 1.6458366611, 1.6458360273, 1.6458353944, 1.6458347622, 1.6458341309, 1.6458335004, 1.6458328707, 1.6458322418, 1.6458316137, 1.6458309864, 1.6458303599, 1.6458297342, 1.6458291093, 1.6458284852, 1.6458278620, 1.6458272395, 1.6458266178, 1.6458259969, 1.6458253768, 1.6458247575, 1.6458241389, 1.6458235212, 1.6458229042, 1.6458222881, 1.6458216727, 1.6458210581, 1.6458204443, 1.6458198312, 1.6458192189, 1.6458186074, 1.6458179967, 1.6458173868, 1.6458167776, 1.6458161692, 1.6458155616, 1.6458149547, 1.6458143486, 1.6458137432, 1.6458131387, 1.6458125348, 1.6458119318, 1.6458113295, 1.6458107279, 1.6458101271, 1.6458095271, 1.6458089278, 1.6458083293, 1.6458077315, 1.6458071345, 1.6458065382, 1.6458059426, 1.6458053478, 1.6458047538, 1.6458041604, 1.6458035679, 1.6458029760, 1.6458023849, 1.6458017946, 1.6458012049, 1.6458006160, 1.6458000279, 1.6457994404, 1.6457988537, 1.6457982677, 1.6457976825, 1.6457970980, 1.6457965142, 1.6457959311, 1.6457953487, 1.6457947671, 1.6457941861, 1.6457936059, 1.6457930264, 1.6457924477, 1.6457918696, 1.6457912922, 1.6457907156, 1.6457901396, 1.6457895644, 1.6457889899, 1.6457884161, 1.6457878430, 1.6457872706, 1.6457866988, 1.6457861278, 1.6457855575, 1.6457849879, 1.6457844190, 1.6457838508, 1.6457832832, 1.6457827164, 1.6457821502, 1.6457815848, 1.6457810200, 1.6457804559, 1.6457798925, 1.6457793298, 1.6457787678, 1.6457782064, 1.6457776458, 1.6457770858, 1.6457765265, 1.6457759678, 1.6457754099, 1.6457748526, 1.6457742960, 1.6457737401, 1.6457731848, 1.6457726302, 1.6457720763, 1.6457715230, 1.6457709704, 1.6457704185, 1.6457698672, 1.6457693166, 1.6457687667, 1.6457682174, 1.6457676688, 1.6457671208, 1.6457665735, 1.6457660268, 1.6457654809, 1.6457649355, 1.6457643908, 1.6457638468, 1.6457633034, 1.6457627606, 1.6457622185, 1.6457616771, 1.6457611363, 1.6457605961, 1.6457600566, 1.6457595177, 1.6457589795, 1.6457584419, 1.6457579049, 1.6457573686, 1.6457568329, 1.6457562979, 1.6457557634, 1.6457552297, 1.6457546965, 1.6457541640, 1.6457536321, 1.6457531008, 1.6457525702, 1.6457520402, 1.6457515108, 1.6457509820, 1.6457504539, 1.6457499263, 1.6457493994, 1.6457488731, 1.6457483475, 1.6457478224, 1.6457472980, 1.6457467742, 1.6457462510, 1.6457457284, 1.6457452064, 1.6457446850, 1.6457441643, 1.6457436441, 1.6457431246, 1.6457426056, 1.6457420873, 1.6457415696, 1.6457410524, 1.6457405359, 1.6457400200, 1.6457395047, 1.6457389899, 1.6457384758, 1.6457379623, 1.6457374493, 1.6457369370, 1.6457364253, 1.6457359141, 1.6457354035, 1.6457348936, 1.6457343842, 1.6457338754, 1.6457333672, 1.6457328596, 1.6457323525, 1.6457318461, 1.6457313402, 1.6457308349, 1.6457303302, 1.6457298261, 1.6457293226, 1.6457288196, 1.6457283172, 1.6457278154, 1.6457273142, 1.6457268135, 1.6457263134, 1.6457258139, 1.6457253150, 1.6457248166, 1.6457243188, 1.6457238215, 1.6457233249, 1.6457228288, 1.6457223333, 1.6457218383, 1.6457213439, 1.6457208500, 1.6457203568, 1.6457198640, 1.6457193719, 1.6457188803, 1.6457183892, 1.6457178987, 1.6457174088, 1.6457169194, 1.6457164306, 1.6457159423, 1.6457154546, 1.6457149675, 1.6457144809, 1.6457139948, 1.6457135093, 1.6457130243, 1.6457125399, 1.6457120560, 1.6457115727, 1.6457110899, 1.6457106076, 1.6457101259, 1.6457096448, 1.6457091642, 1.6457086841, 1.6457082045, 1.6457077255, 1.6457072471, 1.6457067691, 1.6457062917, 1.6457058149, 1.6457053385, 1.6457048627, 1.6457043875, 1.6457039127, 1.6457034385, 1.6457029649, 1.6457024917, 1.6457020191, 1.6457015470, 1.6457010754, 1.6457006044, 1.6457001338, 1.6456996638, 1.6456991943, 1.6456987254, 1.6456982570, 1.6456977890, 1.6456973216, 1.6456968547, 1.6456963884, 1.6456959225, 1.6456954572, 1.6456949924, 1.6456945280, 1.6456940642, 1.6456936010, 1.6456931382, 1.6456926759, 1.6456922142, 1.6456917529, 1.6456912922, 1.6456908319, 1.6456903722, 1.6456899130, 1.6456894542, 1.6456889960, 1.6456885383, 1.6456880811, 1.6456876244, 1.6456871681, 1.6456867124, 1.6456862572, 1.6456858025, 1.6456853483, 1.6456848945, 1.6456844413, 1.6456839885, 1.6456835363, 1.6456830845, 1.6456826333, 1.6456821825, 1.6456817322, 1.6456812824, 1.6456808331, 1.6456803843, 1.6456799359, 1.6456794881, 1.6456790407, 1.6456785939, 1.6456781475, 1.6456777016, 1.6456772561, 1.6456768112, 1.6456763667, 1.6456759227, 1.6456754792, 1.6456750362, 1.6456745936, 1.6456741516, 1.6456737100, 1.6456732688, 1.6456728282, 1.6456723880, 1.6456719483, 1.6456715091, 1.6456710703, 1.6456706320, 1.6456701942, 1.6456697568, 1.6456693200, 1.6456688835, 1.6456684476, 1.6456680121, 1.6456675771, 1.6456671425, 1.6456667084, 1.6456662748, 1.6456658416, 1.6456654089, 1.6456649767, 1.6456645449, 1.6456641136, 1.6456636827, 1.6456632523, 1.6456628224, 1.6456623929, 1.6456619638, 1.6456615353, 1.6456611071, 1.6456606795, 1.6456602522, 1.6456598255, 1.6456593991, 1.6456589733, 1.6456585479, 1.6456581229, 1.6456576984, 1.6456572743, 1.6456568507, 1.6456564275, 1.6456560048, 1.6456555825, 1.6456551606, 1.6456547392, 1.6456543183, 1.6456538977, 1.6456534777, 1.6456530580, 1.6456526388, 1.6456522201, 1.6456518018, 1.6456513839, 1.6456509665, 1.6456505495, 1.6456501329, 1.6456497168, 1.6456493011, 1.6456488858, 1.6456484710, 1.6456480566, 1.6456476426, 1.6456472291, 1.6456468160, 1.6456464033, 1.6456459910, 1.6456455792, 1.6456451678, 1.6456447569, 1.6456443463, 1.6456439362, 1.6456435265, 1.6456431173, 1.6456427084, 1.6456423000, 1.6456418921, 1.6456414845, 1.6456410773, 1.6456406706, 1.6456402643, 1.6456398584, 1.6456394529, 1.6456390479, 1.6456386433, 1.6456382390, 1.6456378352, 1.6456374319, 1.6456370289, 1.6456366263, 1.6456362242, 1.6456358225, 1.6456354211, 1.6456350202, 1.6456346197, 1.6456342197, 1.6456338200, 1.6456334207, 1.6456330219, 1.6456326234, 1.6456322254, 1.6456318277, 1.6456314305, 1.6456310337, 1.6456306373, 1.6456302412, 1.6456298456, 1.6456294504, 1.6456290556, 1.6456286612, 1.6456282672, 1.6456278736, 1.6456274804, 1.6456270876, 1.6456266952, 1.6456263032, 1.6456259116, 1.6456255203, 1.6456251295, 1.6456247391, 1.6456243491, 1.6456239594, 1.6456235702, 1.6456231814, 1.6456227929, 1.6456224048, 1.6456220172, 1.6456216299, 1.6456212430, 1.6456208565, 1.6456204704, 1.6456200847, 1.6456196993, 1.6456193144, 1.6456189298, 1.6456185456, 1.6456181619, 1.6456177785, 1.6456173954, 1.6456170128, 1.6456166305, 1.6456162487, 1.6456158672);
var t1arr = new Array (3.0776835366, 1.8856180826, 1.6377443523, 1.5332062726, 1.4758840371, 1.4397557475, 1.4149239279, 1.3968153100, 1.3830287386, 1.3721836413, 1.3634303182, 1.3562173342, 1.3501712889, 1.3450303746, 1.3406056080, 1.3367571674, 1.3333793898, 1.3303909436, 1.3277282091, 1.3253407070, 1.3231878739, 1.3212367417, 1.3194602399, 1.3178359337, 1.3163450727, 1.3149718643, 1.3137029128, 1.3125267816, 1.3114336473, 1.3104150254, 1.3094635495, 1.3085727931, 1.3077371245, 1.3069515871, 1.3062118020, 1.3055138855, 1.3048543815, 1.3042302039, 1.3036385886, 1.3030770526, 1.3025433589, 1.3020354872, 1.3015516077, 1.3010900597, 1.3006493322, 1.3002280477, 1.2998249473, 1.2994388787, 1.2990687847, 1.2987136942, 1.2983727128, 1.2980450162, 1.2977298428, 1.2974264882, 1.2971342999, 1.2968526726, 1.2965810438, 1.2963188904, 1.2960657251, 1.2958210935, 1.2955845713, 1.2953557617, 1.2951342938, 1.2949198196, 1.2947120130, 1.2945105680, 1.2943151968, 1.2941256288, 1.2939416092, 1.2937628979, 1.2935892686, 1.2934205075, 1.2932564126, 1.2930967932, 1.2929414686, 1.2927902677, 1.2926430286, 1.2924995974, 1.2923598284, 1.2922235830, 1.2920907298, 1.2919611435, 1.2918347052, 1.2917113014, 1.2915908243, 1.2914731710, 1.2913582433, 1.2912459476, 1.2911361945, 1.2910288987, 1.2909239785, 1.2908213559, 1.2907209562, 1.2906227080, 1.2905265429, 1.2904323953, 1.2903402024, 1.2902499039, 1.2901614420, 1.2900747613, 1.2899898085, 1.2899065325, 1.2898248841, 1.2897448160, 1.2896662828, 1.2895892408, 1.2895136479, 1.2894394637, 1.2893666490, 1.2892951663, 1.2892249795, 1.2891560535, 1.2890883547, 1.2890218507, 1.2889565100, 1.2888923025, 1.2888291988, 1.2887671708, 1.2887061912, 1.2886462336, 1.2885872726, 1.2885292835, 1.2884722425, 1.2884161265, 1.2883609132, 1.2883065810, 1.2882531090, 1.2882004769, 1.2881486650, 1.2880976544, 1.2880474266, 1.2879979637, 1.2879492483, 1.2879012638, 1.2878539936, 1.2878074221, 1.2877615337, 1.2877163137, 1.2876717475, 1.2876278210, 1.2875845205, 1.2875418329, 1.2874997450, 1.2874582445, 1.2874173190, 1.2873769568, 1.2873371462, 1.2872978760, 1.2872591354, 1.2872209136, 1.2871832003, 1.2871459855, 1.2871092592, 1.2870730120, 1.2870372346, 1.2870019178, 1.2869670529, 1.2869326311, 1.2868986442, 1.2868650839, 1.2868319423, 1.2867992115, 1.2867668840, 1.2867349523, 1.2867034093, 1.2866722478, 1.2866414611, 1.2866110423, 1.2865809849, 1.2865512826, 1.2865219290, 1.2864929181, 1.2864642439, 1.2864359006, 1.2864078824, 1.2863801838, 1.2863527994, 1.2863257239, 1.2862989520, 1.2862724787, 1.2862462990, 1.2862204081, 1.2861948011, 1.2861694735, 1.2861444208, 1.2861196384, 1.2860951220, 1.2860708673, 1.2860468703, 1.2860231267, 1.2859996326, 1.2859763841, 1.2859533774, 1.2859306087, 1.2859080743, 1.2858857707, 1.2858636942, 1.2858418415, 1.2858202092, 1.2857987940, 1.2857775925, 1.2857566017, 1.2857358183, 1.2857152394, 1.2856948619, 1.2856746829, 1.2856546995, 1.2856349089, 1.2856153082, 1.2855958949, 1.2855766661, 1.2855576193, 1.2855387519, 1.2855200615, 1.2855015454, 1.2854832013, 1.2854650268, 1.2854470195, 1.2854291772, 1.2854114977, 1.2853939785, 1.2853766178, 1.2853594131, 1.2853423626, 1.2853254640, 1.2853087155, 1.2852921150, 1.2852756605, 1.2852593501, 1.2852431820, 1.2852271543, 1.2852112651, 1.2851955128, 1.2851798954, 1.2851644114, 1.2851490589, 1.2851338364, 1.2851187421, 1.2851037746, 1.2850889321, 1.2850742131, 1.2850596161, 1.2850451396, 1.2850307820, 1.2850165420, 1.2850024181, 1.2849884089, 1.2849745129, 1.2849607289, 1.2849470554, 1.2849334912, 1.2849200349, 1.2849066853, 1.2848934410, 1.2848803009, 1.2848672638, 1.2848543284, 1.2848414935, 1.2848287579, 1.2848161206, 1.2848035804, 1.2847911362, 1.2847787868, 1.2847665312, 1.2847543684, 1.2847422972, 1.2847303167, 1.2847184258, 1.2847066236, 1.2846949089, 1.2846832810, 1.2846717388, 1.2846602813, 1.2846489077, 1.2846376170, 1.2846264083, 1.2846152807, 1.2846042334, 1.2845932655, 1.2845823761, 1.2845715644, 1.2845608295, 1.2845501707, 1.2845395872, 1.2845290781, 1.2845186426, 1.2845082801, 1.2844979896, 1.2844877706, 1.2844776222, 1.2844675437, 1.2844575344, 1.2844475935, 1.2844377205, 1.2844279145, 1.2844181750, 1.2844085012, 1.2843988924, 1.2843893481, 1.2843798675, 1.2843704501, 1.2843610952, 1.2843518022, 1.2843425704, 1.2843333994, 1.2843242883, 1.2843152368, 1.2843062442, 1.2842973099, 1.2842884334, 1.2842796141, 1.2842708514, 1.2842621449, 1.2842534939, 1.2842448980, 1.2842363566, 1.2842278692, 1.2842194353, 1.2842110543, 1.2842027259, 1.2841944495, 1.2841862246, 1.2841780507, 1.2841699274, 1.2841618541, 1.2841538305, 1.2841458561, 1.2841379304, 1.2841300530, 1.2841222234, 1.2841144413, 1.2841067061, 1.2840990174, 1.2840913749, 1.2840837781, 1.2840762266, 1.2840687201, 1.2840612580, 1.2840538400, 1.2840464658, 1.2840391349, 1.2840318469, 1.2840246016, 1.2840173984, 1.2840102371, 1.2840031173, 1.2839960385, 1.2839890006, 1.2839820030, 1.2839750455, 1.2839681277, 1.2839612493, 1.2839544100, 1.2839476093, 1.2839408471, 1.2839341229, 1.2839274365, 1.2839207874, 1.2839141755, 1.2839076004, 1.2839010618, 1.2838945594, 1.2838880929, 1.2838816619, 1.2838752663, 1.2838689057, 1.2838625798, 1.2838562884, 1.2838500311, 1.2838438077, 1.2838376179, 1.2838314615, 1.2838253381, 1.2838192475, 1.2838131895, 1.2838071637, 1.2838011700, 1.2837952080, 1.2837892776, 1.2837833784, 1.2837775103, 1.2837716729, 1.2837658661, 1.2837600895, 1.2837543430, 1.2837486264, 1.2837429393, 1.2837372816, 1.2837316531, 1.2837260534, 1.2837204825, 1.2837149400, 1.2837094258, 1.2837039396, 1.2836984813, 1.2836930505, 1.2836876472, 1.2836822710, 1.2836769219, 1.2836715995, 1.2836663038, 1.2836610344, 1.2836557912, 1.2836505740, 1.2836453827, 1.2836402169, 1.2836350766, 1.2836299615, 1.2836248715, 1.2836198063, 1.2836147658, 1.2836097499, 1.2836047582, 1.2835997907, 1.2835948472, 1.2835899275, 1.2835850315, 1.2835801589, 1.2835753095, 1.2835704834, 1.2835656801, 1.2835608997, 1.2835561420, 1.2835514067, 1.2835466937, 1.2835420029, 1.2835373341, 1.2835326871, 1.2835280618, 1.2835234581, 1.2835188758, 1.2835143147, 1.2835097748, 1.2835052557, 1.2835007575, 1.2834962800, 1.2834918230, 1.2834873863, 1.2834829699, 1.2834785737, 1.2834741973, 1.2834698409, 1.2834655041, 1.2834611868, 1.2834568891, 1.2834526106, 1.2834483512, 1.2834441110, 1.2834398896, 1.2834356870, 1.2834315031, 1.2834273378, 1.2834231908, 1.2834190622, 1.2834149517, 1.2834108593, 1.2834067848, 1.2834027281, 1.2833986892, 1.2833946678, 1.2833906639, 1.2833866774, 1.2833827081, 1.2833787559, 1.2833748208, 1.2833709025, 1.2833670011, 1.2833631164, 1.2833592482, 1.2833553966, 1.2833515613, 1.2833477423, 1.2833439395, 1.2833401527, 1.2833363819, 1.2833326270, 1.2833288878, 1.2833251643, 1.2833214564, 1.2833177639, 1.2833140869, 1.2833104251, 1.2833067784, 1.2833031469, 1.2832995304, 1.2832959288, 1.2832923419, 1.2832887698, 1.2832852124, 1.2832816694, 1.2832781410, 1.2832746269, 1.2832711270, 1.2832676414, 1.2832641698, 1.2832607123, 1.2832572687, 1.2832538390, 1.2832504230, 1.2832470207, 1.2832436320, 1.2832402568, 1.2832368951, 1.2832335467, 1.2832302116, 1.2832268897, 1.2832235809, 1.2832202851, 1.2832170024, 1.2832137325, 1.2832104754, 1.2832072311, 1.2832039994, 1.2832007804, 1.2831975738, 1.2831943797, 1.2831911980, 1.2831880285, 1.2831848713, 1.2831817263, 1.2831785933, 1.2831754724, 1.2831723634, 1.2831692663, 1.2831661810, 1.2831631074, 1.2831600456, 1.2831569953, 1.2831539566, 1.2831509294, 1.2831479136, 1.2831449091, 1.2831419159, 1.2831389340, 1.2831359632, 1.2831330035, 1.2831300549, 1.2831271172, 1.2831241904, 1.2831212745, 1.2831183694, 1.2831154750, 1.2831125913, 1.2831097182, 1.2831068557, 1.2831040037, 1.2831011621, 1.2830983308, 1.2830955100, 1.2830926993, 1.2830898989, 1.2830871087, 1.2830843286, 1.2830815585, 1.2830787984, 1.2830760482, 1.2830733080, 1.2830705775, 1.2830678569, 1.2830651459, 1.2830624447, 1.2830597531, 1.2830570710, 1.2830543985, 1.2830517354, 1.2830490818, 1.2830464375, 1.2830438026, 1.2830411769, 1.2830385605, 1.2830359532, 1.2830333551, 1.2830307660, 1.2830281860, 1.2830256149, 1.2830230528, 1.2830204996, 1.2830179552, 1.2830154196, 1.2830128928, 1.2830103747, 1.2830078652, 1.2830053644, 1.2830028722, 1.2830003884, 1.2829979132, 1.2829954464, 1.2829929880, 1.2829905380, 1.2829880962, 1.2829856628, 1.2829832376, 1.2829808205, 1.2829784116, 1.2829760109, 1.2829736181, 1.2829712335, 1.2829688567, 1.2829664880, 1.2829641271, 1.2829617741, 1.2829594290, 1.2829570916, 1.2829547620, 1.2829524401, 1.2829501258, 1.2829478192, 1.2829455202, 1.2829432287, 1.2829409448, 1.2829386683, 1.2829363993, 1.2829341377, 1.2829318835, 1.2829296366, 1.2829273970, 1.2829251647, 1.2829229397, 1.2829207218, 1.2829185110, 1.2829163075, 1.2829141110, 1.2829119215, 1.2829097391, 1.2829075637, 1.2829053952, 1.2829032337, 1.2829010790, 1.2828989312, 1.2828967903, 1.2828946561, 1.2828925287, 1.2828904080, 1.2828882940, 1.2828861867, 1.2828840860, 1.2828819919, 1.2828799044, 1.2828778234, 1.2828757490, 1.2828736810, 1.2828716195, 1.2828695643, 1.2828675156, 1.2828654733, 1.2828634372, 1.2828614075, 1.2828593840, 1.2828573668, 1.2828553558, 1.2828533510, 1.2828513523, 1.2828493597, 1.2828473733, 1.2828453929, 1.2828434186, 1.2828414503, 1.2828394880, 1.2828375316, 1.2828355812, 1.2828336367, 1.2828316980, 1.2828297653, 1.2828278383, 1.2828259171, 1.2828240018, 1.2828220921, 1.2828201882, 1.2828182900, 1.2828163975, 1.2828145106, 1.2828126293, 1.2828107537, 1.2828088835, 1.2828070190, 1.2828051600, 1.2828033064, 1.2828014584, 1.2827996158, 1.2827977786, 1.2827959468, 1.2827941204, 1.2827922993, 1.2827904836, 1.2827886732, 1.2827868680, 1.2827850681, 1.2827832735, 1.2827814841, 1.2827796998, 1.2827779208, 1.2827761469, 1.2827743781, 1.2827726144, 1.2827708558, 1.2827691022, 1.2827673537, 1.2827656102, 1.2827638717, 1.2827621382, 1.2827604096, 1.2827586859, 1.2827569672, 1.2827552533, 1.2827535443, 1.2827518402, 1.2827501409, 1.2827484463, 1.2827467566, 1.2827450716, 1.2827433914, 1.2827417159, 1.2827400451, 1.2827383790, 1.2827367176, 1.2827350608, 1.2827334086, 1.2827317610, 1.2827301181, 1.2827284796, 1.2827268458, 1.2827252164, 1.2827235916, 1.2827219713, 1.2827203554, 1.2827187440, 1.2827171371, 1.2827155345, 1.2827139364, 1.2827123426, 1.2827107532, 1.2827091682, 1.2827075875, 1.2827060111, 1.2827044389, 1.2827028711, 1.2827013075, 1.2826997482, 1.2826981931, 1.2826966422, 1.2826950954, 1.2826935529, 1.2826920145, 1.2826904802, 1.2826889501, 1.2826874241, 1.2826859022, 1.2826843843, 1.2826828705, 1.2826813607, 1.2826798550, 1.2826783533, 1.2826768555, 1.2826753618, 1.2826738720, 1.2826723861, 1.2826709042, 1.2826694262, 1.2826679520, 1.2826664818, 1.2826650154, 1.2826635529, 1.2826620943, 1.2826606394, 1.2826591884, 1.2826577411, 1.2826562976, 1.2826548579, 1.2826534219, 1.2826519897, 1.2826505612, 1.2826491364, 1.2826477152, 1.2826462978, 1.2826448840, 1.2826434739, 1.2826420674, 1.2826406645, 1.2826392652, 1.2826378695, 1.2826364774, 1.2826350888, 1.2826337038, 1.2826323224, 1.2826309444, 1.2826295700, 1.2826281990, 1.2826268316, 1.2826254676, 1.2826241071, 1.2826227500, 1.2826213963, 1.2826200461, 1.2826186992, 1.2826173558, 1.2826160157, 1.2826146790, 1.2826133457, 1.2826120157, 1.2826106890, 1.2826093656, 1.2826080456, 1.2826067288, 1.2826054153, 1.2826041051, 1.2826027981, 1.2826014944, 1.2826001939, 1.2825988966, 1.2825976025, 1.2825963116, 1.2825950239, 1.2825937394, 1.2825924580, 1.2825911798, 1.2825899047, 1.2825886327, 1.2825873639, 1.2825860981, 1.2825848355, 1.2825835759, 1.2825823194, 1.2825810659, 1.2825798155, 1.2825785681, 1.2825773237, 1.2825760824, 1.2825748440, 1.2825736087, 1.2825723763, 1.2825711469, 1.2825699205, 1.2825686969, 1.2825674764, 1.2825662587, 1.2825650440, 1.2825638322, 1.2825626233, 1.2825614172, 1.2825602140, 1.2825590137, 1.2825578163, 1.2825566217, 1.2825554299, 1.2825542409, 1.2825530548, 1.2825518715, 1.2825506909, 1.2825495132, 1.2825483382, 1.2825471659, 1.2825459965, 1.2825448298, 1.2825436658, 1.2825425045, 1.2825413459, 1.2825401901, 1.2825390370, 1.2825378865, 1.2825367387, 1.2825355936, 1.2825344511, 1.2825333113, 1.2825321742, 1.2825310396, 1.2825299077, 1.2825287784, 1.2825276517, 1.2825265276, 1.2825254061, 1.2825242872, 1.2825231708, 1.2825220570, 1.2825209457, 1.2825198370, 1.2825187308, 1.2825176272, 1.2825165260, 1.2825154274, 1.2825143312, 1.2825132376, 1.2825121464, 1.2825110577, 1.2825099715, 1.2825088877, 1.2825078064, 1.2825067275, 1.2825056511, 1.2825045771, 1.2825035055, 1.2825024362, 1.2825013694, 1.2825003050, 1.2824992430, 1.2824981833, 1.2824971261, 1.2824960711, 1.2824950185, 1.2824939683, 1.2824929204, 1.2824918748, 1.2824908316, 1.2824897907, 1.2824887520, 1.2824877157, 1.2824866816, 1.2824856499, 1.2824846204, 1.2824835932, 1.2824825682, 1.2824815455, 1.2824805250, 1.2824795068, 1.2824784908, 1.2824774770, 1.2824764654, 1.2824754561, 1.2824744489, 1.2824734440, 1.2824724412, 1.2824714406, 1.2824704422, 1.2824694459, 1.2824684518, 1.2824674598, 1.2824664700, 1.2824654824, 1.2824644968, 1.2824635134, 1.2824625321, 1.2824615529, 1.2824605758, 1.2824596008, 1.2824586279, 1.2824576571, 1.2824566884, 1.2824557217, 1.2824547571, 1.2824537945, 1.2824528340, 1.2824518756, 1.2824509191, 1.2824499647, 1.2824490124, 1.2824480620, 1.2824471136, 1.2824461673, 1.2824452230, 1.2824442806, 1.2824433402, 1.2824424019, 1.2824414654, 1.2824405310, 1.2824395985, 1.2824386680, 1.2824377394, 1.2824368127, 1.2824358880, 1.2824349653, 1.2824340444, 1.2824331255, 1.2824322084, 1.2824312933, 1.2824303801, 1.2824294688, 1.2824285593, 1.2824276518, 1.2824267461, 1.2824258423, 1.2824249403, 1.2824240403, 1.2824231420, 1.2824222457, 1.2824213511, 1.2824204584, 1.2824195675, 1.2824186785, 1.2824177913, 1.2824169058, 1.2824160222, 1.2824151404, 1.2824142604, 1.2824133822, 1.2824125058, 1.2824116311, 1.2824107582, 1.2824098871, 1.2824090178, 1.2824081502, 1.2824072844, 1.2824064203, 1.2824055580, 1.2824046974, 1.2824038385, 1.2824029814, 1.2824021260, 1.2824012723, 1.2824004203, 1.2823995700, 1.2823987214, 1.2823978746, 1.2823970294, 1.2823961859, 1.2823953440, 1.2823945039, 1.2823936654, 1.2823928286, 1.2823919935, 1.2823911600, 1.2823903281, 1.2823894980, 1.2823886694, 1.2823878425, 1.2823870172, 1.2823861936, 1.2823853715, 1.2823845511, 1.2823837323, 1.2823829151, 1.2823820995, 1.2823812856, 1.2823804732, 1.2823796624, 1.2823788531, 1.2823780455, 1.2823772394, 1.2823764349, 1.2823756320, 1.2823748306, 1.2823740308, 1.2823732326, 1.2823724359, 1.2823716407, 1.2823708471, 1.2823700550, 1.2823692644, 1.2823684754, 1.2823676879, 1.2823669019, 1.2823661174, 1.2823653344, 1.2823645529, 1.2823637730, 1.2823629945, 1.2823622175, 1.2823614420, 1.2823606680, 1.2823598954, 1.2823591244, 1.2823583548, 1.2823575866, 1.2823568200, 1.2823560547, 1.2823552910, 1.2823545287, 1.2823537678, 1.2823530084, 1.2823522504, 1.2823514938, 1.2823507387, 1.2823499850, 1.2823492327, 1.2823484818, 1.2823477324, 1.2823469843, 1.2823462377, 1.2823454924, 1.2823447486, 1.2823440061, 1.2823432651, 1.2823425254, 1.2823417871, 1.2823410502, 1.2823403146, 1.2823395804, 1.2823388476, 1.2823381162, 1.2823373861, 1.2823366573, 1.2823359300, 1.2823352039, 1.2823344792, 1.2823337558, 1.2823330338, 1.2823323131, 1.2823315938, 1.2823308757, 1.2823301590, 1.2823294436, 1.2823287295, 1.2823280167, 1.2823273052, 1.2823265951, 1.2823258862, 1.2823251786, 1.2823244723, 1.2823237673, 1.2823230636, 1.2823223612, 1.2823216600, 1.2823209602, 1.2823202616, 1.2823195642, 1.2823188681, 1.2823181733, 1.2823174798, 1.2823167875, 1.2823160964, 1.2823154066, 1.2823147180, 1.2823140307, 1.2823133446, 1.2823126598, 1.2823119761, 1.2823112938, 1.2823106126, 1.2823099326, 1.2823092539, 1.2823085764, 1.2823079001, 1.2823072250, 1.2823065511, 1.2823058784, 1.2823052069, 1.2823045366, 1.2823038675, 1.2823031995, 1.2823025328, 1.2823018672, 1.2823012028, 1.2823005396, 1.2822998776, 1.2822992167, 1.2822985570, 1.2822978985, 1.2822972411, 1.2822965849, 1.2822959299, 1.2822952760, 1.2822946232, 1.2822939716, 1.2822933211, 1.2822926718, 1.2822920236, 1.2822913765, 1.2822907305, 1.2822900857, 1.2822894420, 1.2822887995, 1.2822881580, 1.2822875177, 1.2822868785, 1.2822862404, 1.2822856034, 1.2822849675, 1.2822843327, 1.2822836989, 1.2822830663, 1.2822824348, 1.2822818044, 1.2822811751, 1.2822805468, 1.2822799196, 1.2822792935, 1.2822786685, 1.2822780446, 1.2822774217, 1.2822767999, 1.2822761791, 1.2822755594, 1.2822749408, 1.2822743232, 1.2822737067, 1.2822730913, 1.2822724768, 1.2822718635, 1.2822712511, 1.2822706399, 1.2822700296, 1.2822694204, 1.2822688122, 1.2822682051, 1.2822675989, 1.2822669938, 1.2822663897, 1.2822657867, 1.2822651846, 1.2822645836, 1.2822639836, 1.2822633846, 1.2822627866, 1.2822621896, 1.2822615936, 1.2822609986, 1.2822604046, 1.2822598116, 1.2822592196, 1.2822586285, 1.2822580385, 1.2822574494, 1.2822568613, 1.2822562742, 1.2822556881, 1.2822551030, 1.2822545188, 1.2822539356, 1.2822533534, 1.2822527721, 1.2822521918, 1.2822516124, 1.2822510340, 1.2822504566, 1.2822498801, 1.2822493046, 1.2822487300, 1.2822481563, 1.2822475836, 1.2822470119, 1.2822464410, 1.2822458712, 1.2822453022, 1.2822447342, 1.2822441671, 1.2822436009, 1.2822430357, 1.2822424714, 1.2822419080, 1.2822413455, 1.2822407839, 1.2822402233, 1.2822396636, 1.2822391047, 1.2822385468, 1.2822379898, 1.2822374337, 1.2822368785, 1.2822363242, 1.2822357707, 1.2822352182, 1.2822346666, 1.2822341158, 1.2822335660, 1.2822330170, 1.2822324689, 1.2822319217, 1.2822313754, 1.2822308299, 1.2822302854, 1.2822297417, 1.2822291988, 1.2822286569, 1.2822281158, 1.2822275755, 1.2822270362, 1.2822264976, 1.2822259600, 1.2822254232, 1.2822248872, 1.2822243522, 1.2822238179, 1.2822232845, 1.2822227520, 1.2822222203, 1.2822216894, 1.2822211594, 1.2822206302, 1.2822201018, 1.2822195743, 1.2822190476, 1.2822185218, 1.2822179967, 1.2822174725, 1.2822169492, 1.2822164266, 1.2822159049, 1.2822153840, 1.2822148639, 1.2822143446, 1.2822138261, 1.2822133084, 1.2822127916, 1.2822122755, 1.2822117603, 1.2822112458, 1.2822107322, 1.2822102194, 1.2822097073, 1.2822091961, 1.2822086856, 1.2822081760, 1.2822076671, 1.2822071590, 1.2822066517, 1.2822061452, 1.2822056395, 1.2822051345, 1.2822046303, 1.2822041269, 1.2822036243, 1.2822031225, 1.2822026214, 1.2822021211, 1.2822016216, 1.2822011228, 1.2822006248, 1.2822001276, 1.2821996311, 1.2821991354, 1.2821986404, 1.2821981462, 1.2821976528, 1.2821971601, 1.2821966681, 1.2821961769, 1.2821956865, 1.2821951968, 1.2821947078, 1.2821942196, 1.2821937321, 1.2821932454, 1.2821927594, 1.2821922741, 1.2821917896, 1.2821913058, 1.2821908227, 1.2821903404, 1.2821898588, 1.2821893779, 1.2821888977, 1.2821884183, 1.2821879395, 1.2821874615, 1.2821869843, 1.2821865077, 1.2821860318, 1.2821855567, 1.2821850823, 1.2821846086, 1.2821841355, 1.2821836632, 1.2821831916, 1.2821827207, 1.2821822505, 1.2821817811, 1.2821813123, 1.2821808442, 1.2821803767, 1.2821799100, 1.2821794440, 1.2821789787, 1.2821785141, 1.2821780501, 1.2821775868, 1.2821771243, 1.2821766624, 1.2821762011, 1.2821757406, 1.2821752808, 1.2821748216, 1.2821743631, 1.2821739052, 1.2821734481, 1.2821729916, 1.2821725358, 1.2821720806, 1.2821716262, 1.2821711723, 1.2821707192, 1.2821702667, 1.2821698149, 1.2821693637, 1.2821689132, 1.2821684633, 1.2821680141, 1.2821675656, 1.2821671177, 1.2821666704, 1.2821662239, 1.2821657779, 1.2821653326, 1.2821648880, 1.2821644439, 1.2821640006, 1.2821635579, 1.2821631158, 1.2821626743, 1.2821622335, 1.2821617933, 1.2821613538, 1.2821609149, 1.2821604766, 1.2821600390, 1.2821596019, 1.2821591655, 1.2821587298, 1.2821582946, 1.2821578601, 1.2821574262, 1.2821569929, 1.2821565603, 1.2821561282, 1.2821556968, 1.2821552660, 1.2821548358, 1.2821544062, 1.2821539773, 1.2821535489, 1.2821531212, 1.2821526940, 1.2821522675, 1.2821518416, 1.2821514162, 1.2821509915, 1.2821505674, 1.2821501439, 1.2821497209, 1.2821492986, 1.2821488769, 1.2821484557, 1.2821480352, 1.2821476152, 1.2821471959, 1.2821467771, 1.2821463589, 1.2821459413, 1.2821455243, 1.2821451079, 1.2821446920, 1.2821442768, 1.2821438621, 1.2821434480, 1.2821430345, 1.2821426215, 1.2821422092, 1.2821417974, 1.2821413862, 1.2821409755, 1.2821405654, 1.2821401559, 1.2821397470, 1.2821393386, 1.2821389308, 1.2821385236, 1.2821381169, 1.2821377108, 1.2821373053, 1.2821369003, 1.2821364959, 1.2821360920, 1.2821356887, 1.2821352859, 1.2821348837, 1.2821344821, 1.2821340810, 1.2821336805, 1.2821332805, 1.2821328810, 1.2821324821, 1.2821320838, 1.2821316860, 1.2821312887, 1.2821308920, 1.2821304959, 1.2821301002, 1.2821297052, 1.2821293106, 1.2821289166, 1.2821285231, 1.2821281302, 1.2821277378, 1.2821273459, 1.2821269546, 1.2821265638, 1.2821261735, 1.2821257838, 1.2821253946, 1.2821250059, 1.2821246177, 1.2821242301, 1.2821238430, 1.2821234564, 1.2821230703, 1.2821226848, 1.2821222997, 1.2821219152, 1.2821215312, 1.2821211478, 1.2821207648, 1.2821203824, 1.2821200004, 1.2821196190, 1.2821192381, 1.2821188577, 1.2821184778, 1.2821180985, 1.2821177196, 1.2821173412, 1.2821169634, 1.2821165860, 1.2821162092, 1.2821158328, 1.2821154570, 1.2821150816, 1.2821147068, 1.2821143324, 1.2821139586, 1.2821135852, 1.2821132124, 1.2821128400, 1.2821124681, 1.2821120968, 1.2821117259, 1.2821113555, 1.2821109856, 1.2821106161, 1.2821102472, 1.2821098788, 1.2821095108, 1.2821091433, 1.2821087763, 1.2821084098, 1.2821080438, 1.2821076783, 1.2821073132, 1.2821069486, 1.2821065845, 1.2821062209, 1.2821058577, 1.2821054950, 1.2821051328, 1.2821047711, 1.2821044099, 1.2821040491, 1.2821036887, 1.2821033289, 1.2821029695, 1.2821026106, 1.2821022522, 1.2821018942, 1.2821015367, 1.2821011796, 1.2821008230, 1.2821004669, 1.2821001113, 1.2820997561, 1.2820994013, 1.2820990470, 1.2820986932, 1.2820983398, 1.2820979869, 1.2820976345, 1.2820972825, 1.2820969309, 1.2820965798, 1.2820962292, 1.2820958790, 1.2820955293, 1.2820951800, 1.2820948311, 1.2820944827, 1.2820941348, 1.2820937873, 1.2820934402, 1.2820930936, 1.2820927474, 1.2820924017, 1.2820920564, 1.2820917115, 1.2820913671, 1.2820910232, 1.2820906796, 1.2820903365, 1.2820899939, 1.2820896516, 1.2820893099, 1.2820889685, 1.2820886276, 1.2820882871, 1.2820879470, 1.2820876074, 1.2820872682, 1.2820869294, 1.2820865911, 1.2820862532, 1.2820859157, 1.2820855786, 1.2820852420, 1.2820849058, 1.2820845700, 1.2820842346, 1.2820838997, 1.2820835652, 1.2820832311, 1.2820828974, 1.2820825641, 1.2820822313, 1.2820818989, 1.2820815668, 1.2820812352, 1.2820809041, 1.2820805733, 1.2820802429, 1.2820799130, 1.2820795835, 1.2820792543, 1.2820789256, 1.2820785973, 1.2820782694, 1.2820779419, 1.2820776149, 1.2820772882, 1.2820769619, 1.2820766361, 1.2820763106, 1.2820759856, 1.2820756609, 1.2820753366, 1.2820750128, 1.2820746893, 1.2820743663, 1.2820740436, 1.2820737214, 1.2820733995, 1.2820730781, 1.2820727570, 1.2820724363, 1.2820721161, 1.2820717962, 1.2820714767, 1.2820711576, 1.2820708389, 1.2820705206, 1.2820702027, 1.2820698851, 1.2820695680, 1.2820692512, 1.2820689349, 1.2820686189, 1.2820683033, 1.2820679881, 1.2820676732, 1.2820673588, 1.2820670447, 1.2820667310, 1.2820664177, 1.2820661048, 1.2820657923, 1.2820654801, 1.2820651683, 1.2820648569, 1.2820645459, 1.2820642353, 1.2820639250, 1.2820636151, 1.2820633056, 1.2820629964, 1.2820626877, 1.2820623793, 1.2820620712, 1.2820617636, 1.2820614563, 1.2820611494, 1.2820608428, 1.2820605366, 1.2820602308, 1.2820599254, 1.2820596203, 1.2820593156, 1.2820590112, 1.2820587073, 1.2820584036, 1.2820581004, 1.2820577975, 1.2820574950, 1.2820571928, 1.2820568910, 1.2820565895, 1.2820562884, 1.2820559877, 1.2820556873, 1.2820553873, 1.2820550877, 1.2820547884, 1.2820544894, 1.2820541908, 1.2820538926, 1.2820535947, 1.2820532972, 1.2820530000, 1.2820527032, 1.2820524067, 1.2820521106, 1.2820518148, 1.2820515194, 1.2820512243, 1.2820509296, 1.2820506352, 1.2820503412, 1.2820500475, 1.2820497541, 1.2820494612, 1.2820491685, 1.2820488762, 1.2820485842, 1.2820482926, 1.2820480013, 1.2820477104, 1.2820474198, 1.2820471295, 1.2820468396, 1.2820465500, 1.2820462608, 1.2820459719, 1.2820456833, 1.2820453951, 1.2820451072, 1.2820448196, 1.2820445324, 1.2820442455, 1.2820439590, 1.2820436728, 1.2820433869, 1.2820431013, 1.2820428161, 1.2820425312, 1.2820422466, 1.2820419624, 1.2820416785, 1.2820413949, 1.2820411117, 1.2820408288, 1.2820405462, 1.2820402639, 1.2820399819, 1.2820397003, 1.2820394190, 1.2820391381, 1.2820388574, 1.2820385771, 1.2820382971, 1.2820380174, 1.2820377381, 1.2820374590, 1.2820371803, 1.2820369019, 1.2820366238, 1.2820363461, 1.2820360686, 1.2820357915, 1.2820355147, 1.2820352382, 1.2820349620, 1.2820346862, 1.2820344106, 1.2820341354, 1.2820338605, 1.2820335859, 1.2820333116, 1.2820330376, 1.2820327639, 1.2820324906, 1.2820322175, 1.2820319448, 1.2820316724, 1.2820314002, 1.2820311284, 1.2820308569, 1.2820305857, 1.2820303148, 1.2820300443, 1.2820297740, 1.2820295040, 1.2820292343, 1.2820289650, 1.2820286959, 1.2820284272, 1.2820281587, 1.2820278906, 1.2820276227, 1.2820273552, 1.2820270879, 1.2820268210, 1.2820265543, 1.2820262880, 1.2820260219, 1.2820257562, 1.2820254907, 1.2820252255, 1.2820249607, 1.2820246961, 1.2820244318, 1.2820241679, 1.2820239042, 1.2820236408, 1.2820233777, 1.2820231149, 1.2820228524, 1.2820225902, 1.2820223283, 1.2820220666, 1.2820218053, 1.2820215442, 1.2820212835, 1.2820210230, 1.2820207628, 1.2820205029, 1.2820202433, 1.2820199840, 1.2820197250, 1.2820194662, 1.2820192077, 1.2820189496, 1.2820186917, 1.2820184341, 1.2820181767, 1.2820179197, 1.2820176630, 1.2820174065, 1.2820171503, 1.2820168944, 1.2820166387, 1.2820163834, 1.2820161283, 1.2820158735, 1.2820156190, 1.2820153648, 1.2820151108, 1.2820148572, 1.2820146038, 1.2820143507, 1.2820140978, 1.2820138452, 1.2820135930, 1.2820133409, 1.2820130892, 1.2820128377, 1.2820125865, 1.2820123356, 1.2820120850, 1.2820118346, 1.2820115845, 1.2820113347, 1.2820110851, 1.2820108358, 1.2820105868, 1.2820103380, 1.2820100896, 1.2820098414, 1.2820095934, 1.2820093457, 1.2820090983, 1.2820088512, 1.2820086043, 1.2820083577, 1.2820081114, 1.2820078653, 1.2820076195, 1.2820073740, 1.2820071287, 1.2820068837, 1.2820066389, 1.2820063944, 1.2820061502, 1.2820059062, 1.2820056625, 1.2820054191, 1.2820051759, 1.2820049330, 1.2820046903, 1.2820044479, 1.2820042058, 1.2820039639, 1.2820037223, 1.2820034809, 1.2820032398, 1.2820029990, 1.2820027584, 1.2820025180, 1.2820022780, 1.2820020381, 1.2820017986, 1.2820015592, 1.2820013202, 1.2820010814, 1.2820008428, 1.2820006045, 1.2820003665, 1.2820001287, 1.2819998911, 1.2819996538, 1.2819994168, 1.2819991800, 1.2819989434, 1.2819987072, 1.2819984711, 1.2819982353, 1.2819979998, 1.2819977645, 1.2819975294, 1.2819972946, 1.2819970601, 1.2819968258, 1.2819965917, 1.2819963579, 1.2819961243, 1.2819958910, 1.2819956579, 1.2819954251, 1.2819951925, 1.2819949601, 1.2819947280, 1.2819944962, 1.2819942646, 1.2819940332, 1.2819938020, 1.2819935712, 1.2819933405, 1.2819931101, 1.2819928799, 1.2819926500, 1.2819924203, 1.2819921908, 1.2819919616, 1.2819917326, 1.2819915039, 1.2819912754, 1.2819910471, 1.2819908191, 1.2819905913, 1.2819903638, 1.2819901365, 1.2819899094, 1.2819896825, 1.2819894559, 1.2819892295, 1.2819890034, 1.2819887775, 1.2819885518, 1.2819883264, 1.2819881011, 1.2819878762, 1.2819876514, 1.2819874269, 1.2819872026, 1.2819869785, 1.2819867547, 1.2819865311, 1.2819863078, 1.2819860846, 1.2819858617, 1.2819856390, 1.2819854166, 1.2819851944, 1.2819849724, 1.2819847506, 1.2819845291, 1.2819843078, 1.2819840867, 1.2819838658, 1.2819836452, 1.2819834247, 1.2819832046, 1.2819829846, 1.2819827649, 1.2819825453, 1.2819823261, 1.2819821070, 1.2819818881, 1.2819816695, 1.2819814511, 1.2819812329, 1.2819810150, 1.2819807972, 1.2819805797, 1.2819803624, 1.2819801453, 1.2819799285, 1.2819797119, 1.2819794954, 1.2819792792, 1.2819790633, 1.2819788475, 1.2819786319, 1.2819784166, 1.2819782015, 1.2819779866, 1.2819777719, 1.2819775575, 1.2819773432, 1.2819771292, 1.2819769154, 1.2819767018, 1.2819764884, 1.2819762752, 1.2819760623, 1.2819758495, 1.2819756370, 1.2819754247, 1.2819752125, 1.2819750007);
var t25arr = new Array (1.0000000000, 0.8164965810, 0.7648923285, 0.7406970842, 0.7266868439, 0.7175581966, 0.7111417781, 0.7063866127, 0.7027221468, 0.6998120614, 0.6974453276, 0.6954828656, 0.6938293043, 0.6924170696, 0.6911969490, 0.6901322539, 0.6891950752, 0.6883638065, 0.6876214603, 0.6869544965, 0.6863519908, 0.6858050318, 0.6853062781, 0.6848496273, 0.6844299650, 0.6840429727, 0.6836849792, 0.6833528430, 0.6830438609, 0.6827556934, 0.6824863061, 0.6822339212, 0.6819969785, 0.6817741030, 0.6815640781, 0.6813658237, 0.6811783774, 0.6810008788, 0.6808325566, 0.6806727172, 0.6805207352, 0.6803760450, 0.6802381343, 0.6801065375, 0.6799808307, 0.6798606272, 0.6797455733, 0.6796353452, 0.6795296453, 0.6794282004, 0.6793307585, 0.6792370874, 0.6791469722, 0.6790602144, 0.6789766297, 0.6788960472, 0.6788183079, 0.6787432641, 0.6786707779, 0.6786007207, 0.6785329725, 0.6784674210, 0.6784039611, 0.6783424942, 0.6782829279, 0.6782251754, 0.6781691550, 0.6781147901, 0.6780620082, 0.6780107413, 0.6779609251, 0.6779124988, 0.6778654051, 0.6778195896, 0.6777750012, 0.6777315910, 0.6776893131, 0.6776481237, 0.6776079813, 0.6775688464, 0.6775306817, 0.6774934515, 0.6774571219, 0.6774216605, 0.6773870367, 0.6773532211, 0.6773201857, 0.6772879038, 0.6772563501, 0.6772255000, 0.6771953303, 0.6771658188, 0.6771369441, 0.6771086859, 0.6770810246, 0.6770539415, 0.6770274186, 0.6770014388, 0.6769759856, 0.6769510431, 0.6769265960, 0.6769026298, 0.6768791304, 0.6768560844, 0.6768334786, 0.6768113007, 0.6767895385, 0.6767681806, 0.6767472157, 0.6767266331, 0.6767064224, 0.6766865737, 0.6766670773, 0.6766479238, 0.6766291044, 0.6766106104, 0.6765924334, 0.6765745653, 0.6765569984, 0.6765397250, 0.6765227378, 0.6765060299, 0.6764895944, 0.6764734246, 0.6764575142, 0.6764418571, 0.6764264471, 0.6764112785, 0.6763963456, 0.6763816431, 0.6763671655, 0.6763529079, 0.6763388652, 0.6763250326, 0.6763114054, 0.6762979791, 0.6762847492, 0.6762717115, 0.6762588619, 0.6762461962, 0.6762337106, 0.6762214013, 0.6762092645, 0.6761972966, 0.6761854942, 0.6761738538, 0.6761623722, 0.6761510460, 0.6761398722, 0.6761288477, 0.6761179695, 0.6761072348, 0.6760966407, 0.6760861845, 0.6760758634, 0.6760656750, 0.6760556166, 0.6760456858, 0.6760358801, 0.6760261973, 0.6760166350, 0.6760071910, 0.6759978631, 0.6759886492, 0.6759795471, 0.6759705550, 0.6759616707, 0.6759528924, 0.6759442182, 0.6759356463, 0.6759271748, 0.6759188020, 0.6759105261, 0.6759023456, 0.6758942587, 0.6758862639, 0.6758783596, 0.6758705442, 0.6758628164, 0.6758551745, 0.6758476173, 0.6758401432, 0.6758327510, 0.6758254393, 0.6758182067, 0.6758110521, 0.6758039741, 0.6757969715, 0.6757900431, 0.6757831879, 0.6757764045, 0.6757696919, 0.6757630489, 0.6757564746, 0.6757499678, 0.6757435275, 0.6757371527, 0.6757308424, 0.6757245957, 0.6757184115, 0.6757122889, 0.6757062270, 0.6757002250, 0.6756942819, 0.6756883969, 0.6756825690, 0.6756767976, 0.6756710818, 0.6756654208, 0.6756598137, 0.6756542599, 0.6756487585, 0.6756433089, 0.6756379103, 0.6756325620, 0.6756272633, 0.6756220135, 0.6756168119, 0.6756116579, 0.6756065509, 0.6756014901, 0.6755964749, 0.6755915048, 0.6755865792, 0.6755816974, 0.6755768589, 0.6755720630, 0.6755673093, 0.6755625972, 0.6755579260, 0.6755532954, 0.6755487048, 0.6755441536, 0.6755396414, 0.6755351676, 0.6755307318, 0.6755263335, 0.6755219722, 0.6755176474, 0.6755133588, 0.6755091057, 0.6755048879, 0.6755007048, 0.6754965560, 0.6754924412, 0.6754883599, 0.6754843116, 0.6754802961, 0.6754763128, 0.6754723614, 0.6754684416, 0.6754645529, 0.6754606950, 0.6754568676, 0.6754530701, 0.6754493024, 0.6754455640, 0.6754418547, 0.6754381740, 0.6754345217, 0.6754308974, 0.6754273008, 0.6754237316, 0.6754201894, 0.6754166741, 0.6754131852, 0.6754097224, 0.6754062855, 0.6754028742, 0.6753994882, 0.6753961273, 0.6753927910, 0.6753894793, 0.6753861917, 0.6753829281, 0.6753796882, 0.6753764716, 0.6753732783, 0.6753701078, 0.6753669601, 0.6753638347, 0.6753607316, 0.6753576504, 0.6753545909, 0.6753515530, 0.6753485363, 0.6753455406, 0.6753425658, 0.6753396115, 0.6753366777, 0.6753337641, 0.6753308704, 0.6753279965, 0.6753251422, 0.6753223073, 0.6753194915, 0.6753166947, 0.6753139167, 0.6753111573, 0.6753084164, 0.6753056936, 0.6753029889, 0.6753003021, 0.6752976330, 0.6752949814, 0.6752923471, 0.6752897300, 0.6752871300, 0.6752845468, 0.6752819802, 0.6752794302, 0.6752768966, 0.6752743791, 0.6752718777, 0.6752693922, 0.6752669225, 0.6752644683, 0.6752620296, 0.6752596062, 0.6752571980, 0.6752548048, 0.6752524265, 0.6752500629, 0.6752477139, 0.6752453794, 0.6752430592, 0.6752407532, 0.6752384613, 0.6752361833, 0.6752339192, 0.6752316688, 0.6752294319, 0.6752272085, 0.6752249984, 0.6752228015, 0.6752206177, 0.6752184468, 0.6752162889, 0.6752141437, 0.6752120111, 0.6752098910, 0.6752077833, 0.6752056879, 0.6752036048, 0.6752015337, 0.6751994746, 0.6751974274, 0.6751953919, 0.6751933681, 0.6751913560, 0.6751893552, 0.6751873659, 0.6751853878, 0.6751834210, 0.6751814652, 0.6751795204, 0.6751775865, 0.6751756634, 0.6751737511, 0.6751718494, 0.6751699582, 0.6751680775, 0.6751662072, 0.6751643471, 0.6751624973, 0.6751606575, 0.6751588279, 0.6751570081, 0.6751551982, 0.6751533982, 0.6751516078, 0.6751498271, 0.6751480559, 0.6751462942, 0.6751445419, 0.6751427989, 0.6751410652, 0.6751393407, 0.6751376252, 0.6751359189, 0.6751342214, 0.6751325329, 0.6751308532, 0.6751291823, 0.6751275200, 0.6751258664, 0.6751242213, 0.6751225847, 0.6751209565, 0.6751193367, 0.6751177252, 0.6751161219, 0.6751145267, 0.6751129397, 0.6751113607, 0.6751097897, 0.6751082266, 0.6751066714, 0.6751051240, 0.6751035843, 0.6751020523, 0.6751005279, 0.6750990111, 0.6750975019, 0.6750960000, 0.6750945056, 0.6750930186, 0.6750915388, 0.6750900663, 0.6750886009, 0.6750871427, 0.6750856916, 0.6750842475, 0.6750828104, 0.6750813802, 0.6750799569, 0.6750785405, 0.6750771308, 0.6750757278, 0.6750743316, 0.6750729420, 0.6750715589, 0.6750701824, 0.6750688124, 0.6750674489, 0.6750660918, 0.6750647410, 0.6750633966, 0.6750620584, 0.6750607264, 0.6750594007, 0.6750580810, 0.6750567675, 0.6750554601, 0.6750541586, 0.6750528631, 0.6750515736, 0.6750502899, 0.6750490121, 0.6750477402, 0.6750464739, 0.6750452135, 0.6750439587, 0.6750427096, 0.6750414660, 0.6750402281, 0.6750389957, 0.6750377688, 0.6750365474, 0.6750353315, 0.6750341209, 0.6750329157, 0.6750317158, 0.6750305211, 0.6750293318, 0.6750281477, 0.6750269687, 0.6750257949, 0.6750246262, 0.6750234627, 0.6750223041, 0.6750211506, 0.6750200021, 0.6750188585, 0.6750177198, 0.6750165860, 0.6750154571, 0.6750143331, 0.6750132138, 0.6750120992, 0.6750109895, 0.6750098844, 0.6750087840, 0.6750076882, 0.6750065971, 0.6750055105, 0.6750044285, 0.6750033511, 0.6750022781, 0.6750012096, 0.6750001456, 0.6749990860, 0.6749980307, 0.6749969799, 0.6749959333, 0.6749948911, 0.6749938532, 0.6749928195, 0.6749917900, 0.6749907648, 0.6749897437, 0.6749887268, 0.6749877140, 0.6749867053, 0.6749857007, 0.6749847002, 0.6749837037, 0.6749827111, 0.6749817226, 0.6749807380, 0.6749797574, 0.6749787806, 0.6749778078, 0.6749768388, 0.6749758736, 0.6749749123, 0.6749739548, 0.6749730010, 0.6749720510, 0.6749711047, 0.6749701621, 0.6749692232, 0.6749682880, 0.6749673564, 0.6749664284, 0.6749655040, 0.6749645832, 0.6749636660, 0.6749627523, 0.6749618421, 0.6749609354, 0.6749600322, 0.6749591325, 0.6749582361, 0.6749573432, 0.6749564537, 0.6749555676, 0.6749546848, 0.6749538054, 0.6749529293, 0.6749520565, 0.6749511869, 0.6749503207, 0.6749494577, 0.6749485979, 0.6749477413, 0.6749468879, 0.6749460377, 0.6749451907, 0.6749443468, 0.6749435060, 0.6749426683, 0.6749418337, 0.6749410021, 0.6749401737, 0.6749393482, 0.6749385258, 0.6749377064, 0.6749368900, 0.6749360765, 0.6749352660, 0.6749344584, 0.6749336538, 0.6749328520, 0.6749320532, 0.6749312572, 0.6749304641, 0.6749296738, 0.6749288864, 0.6749281018, 0.6749273199, 0.6749265409, 0.6749257646, 0.6749249911, 0.6749242203, 0.6749234523, 0.6749226869, 0.6749219243, 0.6749211643, 0.6749204070, 0.6749196524, 0.6749189004, 0.6749181510, 0.6749174042, 0.6749166601, 0.6749159185, 0.6749151795, 0.6749144430, 0.6749137091, 0.6749129778, 0.6749122489, 0.6749115226, 0.6749107987, 0.6749100773, 0.6749093584, 0.6749086420, 0.6749079280, 0.6749072164, 0.6749065072, 0.6749058005, 0.6749050961, 0.6749043941, 0.6749036945, 0.6749029973, 0.6749023024, 0.6749016098, 0.6749009195, 0.6749002316, 0.6748995459, 0.6748988626, 0.6748981815, 0.6748975027, 0.6748968261, 0.6748961518, 0.6748954797, 0.6748948098, 0.6748941421, 0.6748934766, 0.6748928134, 0.6748921523, 0.6748914933, 0.6748908365, 0.6748901819, 0.6748895294, 0.6748888790, 0.6748882307, 0.6748875845, 0.6748869404, 0.6748862984, 0.6748856585, 0.6748850206, 0.6748843848, 0.6748837511, 0.6748831193, 0.6748824896, 0.6748818619, 0.6748812362, 0.6748806125, 0.6748799908, 0.6748793710, 0.6748787532, 0.6748781374, 0.6748775235, 0.6748769116, 0.6748763016, 0.6748756935, 0.6748750873, 0.6748744830, 0.6748738806, 0.6748732801, 0.6748726815, 0.6748720847, 0.6748714898, 0.6748708967, 0.6748703055, 0.6748697161, 0.6748691286, 0.6748685428, 0.6748679589, 0.6748673767, 0.6748667964, 0.6748662178, 0.6748656410, 0.6748650659, 0.6748644926, 0.6748639211, 0.6748633513, 0.6748627833, 0.6748622169, 0.6748616523, 0.6748610894, 0.6748605282, 0.6748599687, 0.6748594108, 0.6748588547, 0.6748583002, 0.6748577474, 0.6748571962, 0.6748566467, 0.6748560988, 0.6748555526, 0.6748550080, 0.6748544650, 0.6748539236, 0.6748533838, 0.6748528457, 0.6748523091, 0.6748517741, 0.6748512407, 0.6748507088, 0.6748501785, 0.6748496498, 0.6748491226, 0.6748485969, 0.6748480728, 0.6748475502, 0.6748470292, 0.6748465096, 0.6748459916, 0.6748454751, 0.6748449600, 0.6748444465, 0.6748439344, 0.6748434238, 0.6748429147, 0.6748424070, 0.6748419008, 0.6748413961, 0.6748408928, 0.6748403909, 0.6748398905, 0.6748393915, 0.6748388939, 0.6748383977, 0.6748379030, 0.6748374096, 0.6748369176, 0.6748364271, 0.6748359379, 0.6748354501, 0.6748349636, 0.6748344786, 0.6748339949, 0.6748335125, 0.6748330315, 0.6748325518, 0.6748320735, 0.6748315965, 0.6748311209, 0.6748306465, 0.6748301735, 0.6748297018, 0.6748292314, 0.6748287623, 0.6748282945, 0.6748278279, 0.6748273627, 0.6748268987, 0.6748264361, 0.6748259746, 0.6748255145, 0.6748250556, 0.6748245979, 0.6748241415, 0.6748236864, 0.6748232325, 0.6748227798, 0.6748223283, 0.6748218781, 0.6748214291, 0.6748209813, 0.6748205347, 0.6748200893, 0.6748196451, 0.6748192021, 0.6748187603, 0.6748183196, 0.6748178802, 0.6748174419, 0.6748170048, 0.6748165688, 0.6748161341, 0.6748157004, 0.6748152679, 0.6748148366, 0.6748144064, 0.6748139774, 0.6748135494, 0.6748131226, 0.6748126970, 0.6748122724, 0.6748118490, 0.6748114267, 0.6748110054, 0.6748105853, 0.6748101663, 0.6748097484, 0.6748093315, 0.6748089158, 0.6748085011, 0.6748080875, 0.6748076750, 0.6748072635, 0.6748068531, 0.6748064438, 0.6748060355, 0.6748056283, 0.6748052221, 0.6748048169, 0.6748044128, 0.6748040098, 0.6748036078, 0.6748032067, 0.6748028068, 0.6748024078, 0.6748020099, 0.6748016129, 0.6748012170, 0.6748008221, 0.6748004281, 0.6748000352, 0.6747996433, 0.6747992523, 0.6747988624, 0.6747984734, 0.6747980854, 0.6747976984, 0.6747973123, 0.6747969272, 0.6747965431, 0.6747961599, 0.6747957777, 0.6747953965, 0.6747950162, 0.6747946368, 0.6747942584, 0.6747938809, 0.6747935043, 0.6747931287, 0.6747927540, 0.6747923803, 0.6747920074, 0.6747916355, 0.6747912645, 0.6747908944, 0.6747905252, 0.6747901569, 0.6747897895, 0.6747894230, 0.6747890574, 0.6747886927, 0.6747883289, 0.6747879659, 0.6747876039, 0.6747872427, 0.6747868824, 0.6747865230, 0.6747861644, 0.6747858067, 0.6747854499, 0.6747850939, 0.6747847388, 0.6747843845, 0.6747840311, 0.6747836785, 0.6747833268, 0.6747829759, 0.6747826259, 0.6747822767, 0.6747819283, 0.6747815807, 0.6747812340, 0.6747808881, 0.6747805430, 0.6747801988, 0.6747798553, 0.6747795127, 0.6747791708, 0.6747788298, 0.6747784896, 0.6747781502, 0.6747778115, 0.6747774737, 0.6747771367, 0.6747768004, 0.6747764649, 0.6747761303, 0.6747757964, 0.6747754632, 0.6747751309, 0.6747747993, 0.6747744685, 0.6747741385, 0.6747738092, 0.6747734807, 0.6747731529, 0.6747728259, 0.6747724997, 0.6747721742, 0.6747718494, 0.6747715254, 0.6747712022, 0.6747708797, 0.6747705579, 0.6747702368, 0.6747699165, 0.6747695970, 0.6747692781, 0.6747689600, 0.6747686426, 0.6747683259, 0.6747680099, 0.6747676947, 0.6747673802, 0.6747670663, 0.6747667532, 0.6747664408, 0.6747661291, 0.6747658181, 0.6747655078, 0.6747651982, 0.6747648893, 0.6747645811, 0.6747642736, 0.6747639667, 0.6747636606, 0.6747633551, 0.6747630503, 0.6747627462, 0.6747624427, 0.6747621400, 0.6747618379, 0.6747615365, 0.6747612357, 0.6747609356, 0.6747606362, 0.6747603374, 0.6747600393, 0.6747597419, 0.6747594451, 0.6747591489, 0.6747588534, 0.6747585586, 0.6747582644, 0.6747579708, 0.6747576779, 0.6747573856, 0.6747570939, 0.6747568029, 0.6747565126, 0.6747562228, 0.6747559337, 0.6747556452, 0.6747553573, 0.6747550701, 0.6747547835, 0.6747544975, 0.6747542121, 0.6747539273, 0.6747536431, 0.6747533596, 0.6747530767, 0.6747527943, 0.6747525126, 0.6747522315, 0.6747519509, 0.6747516710, 0.6747513917, 0.6747511129, 0.6747508348, 0.6747505573, 0.6747502803, 0.6747500039, 0.6747497281, 0.6747494529, 0.6747491783, 0.6747489043, 0.6747486308, 0.6747483579, 0.6747480856, 0.6747478139, 0.6747475427, 0.6747472721, 0.6747470021, 0.6747467326, 0.6747464637, 0.6747461954, 0.6747459276, 0.6747456604, 0.6747453937, 0.6747451276, 0.6747448620, 0.6747445970, 0.6747443326, 0.6747440687, 0.6747438053, 0.6747435425, 0.6747432802, 0.6747430185, 0.6747427573, 0.6747424967, 0.6747422366, 0.6747419770, 0.6747417179, 0.6747414594, 0.6747412014, 0.6747409440, 0.6747406871, 0.6747404307, 0.6747401748, 0.6747399194, 0.6747396646, 0.6747394103, 0.6747391565, 0.6747389032, 0.6747386504, 0.6747383981, 0.6747381464, 0.6747378951, 0.6747376444, 0.6747373942, 0.6747371445, 0.6747368952, 0.6747366465, 0.6747363983, 0.6747361506, 0.6747359034, 0.6747356566, 0.6747354104, 0.6747351647, 0.6747349194, 0.6747346747, 0.6747344304, 0.6747341866, 0.6747339433, 0.6747337005, 0.6747334582, 0.6747332163, 0.6747329749, 0.6747327340, 0.6747324936, 0.6747322537, 0.6747320142, 0.6747317752, 0.6747315367, 0.6747312986, 0.6747310610, 0.6747308239, 0.6747305873, 0.6747303511, 0.6747301154, 0.6747298801, 0.6747296453, 0.6747294109, 0.6747291771, 0.6747289436, 0.6747287106, 0.6747284781, 0.6747282460, 0.6747280144, 0.6747277832, 0.6747275525, 0.6747273222, 0.6747270924, 0.6747268630, 0.6747266341, 0.6747264056, 0.6747261775, 0.6747259499, 0.6747257227, 0.6747254960, 0.6747252696, 0.6747250438, 0.6747248183, 0.6747245933, 0.6747243687, 0.6747241446, 0.6747239208, 0.6747236975, 0.6747234747, 0.6747232522, 0.6747230302, 0.6747228086, 0.6747225874, 0.6747223666, 0.6747221463, 0.6747219263, 0.6747217068, 0.6747214877, 0.6747212690, 0.6747210508, 0.6747208329, 0.6747206154, 0.6747203984, 0.6747201818, 0.6747199655, 0.6747197497, 0.6747195343, 0.6747193193, 0.6747191047, 0.6747188904, 0.6747186766, 0.6747184632, 0.6747182502, 0.6747180376, 0.6747178253, 0.6747176135, 0.6747174021, 0.6747171910, 0.6747169804, 0.6747167701, 0.6747165602, 0.6747163507, 0.6747161416, 0.6747159329, 0.6747157246, 0.6747155166, 0.6747153091, 0.6747151019, 0.6747148951, 0.6747146886, 0.6747144826, 0.6747142769, 0.6747140716, 0.6747138667, 0.6747136622, 0.6747134580, 0.6747132542, 0.6747130507, 0.6747128477, 0.6747126450, 0.6747124427, 0.6747122407, 0.6747120391, 0.6747118379, 0.6747116370, 0.6747114365, 0.6747112364, 0.6747110366, 0.6747108372, 0.6747106382, 0.6747104395, 0.6747102411, 0.6747100431, 0.6747098455, 0.6747096482, 0.6747094513, 0.6747092547, 0.6747090585, 0.6747088627, 0.6747086671, 0.6747084720, 0.6747082771, 0.6747080827, 0.6747078885, 0.6747076948, 0.6747075013, 0.6747073082, 0.6747071155, 0.6747069231, 0.6747067310, 0.6747065392, 0.6747063478, 0.6747061568, 0.6747059661, 0.6747057757, 0.6747055856, 0.6747053959, 0.6747052065, 0.6747050175, 0.6747048288, 0.6747046404, 0.6747044523, 0.6747042646, 0.6747040772, 0.6747038901, 0.6747037034, 0.6747035169, 0.6747033308, 0.6747031451, 0.6747029596, 0.6747027745, 0.6747025897, 0.6747024052, 0.6747022210, 0.6747020372, 0.6747018536, 0.6747016704, 0.6747014875, 0.6747013049, 0.6747011227, 0.6747009407, 0.6747007591, 0.6747005778, 0.6747003967, 0.6747002160, 0.6747000356, 0.6746998555, 0.6746996758, 0.6746994963, 0.6746993171, 0.6746991383, 0.6746989597, 0.6746987815, 0.6746986035, 0.6746984259, 0.6746982485, 0.6746980715, 0.6746978947, 0.6746977183, 0.6746975421, 0.6746973663, 0.6746971908, 0.6746970155, 0.6746968405, 0.6746966659, 0.6746964915, 0.6746963174, 0.6746961437, 0.6746959702, 0.6746957970, 0.6746956241, 0.6746954515, 0.6746952791, 0.6746951071, 0.6746949354, 0.6746947639, 0.6746945927, 0.6746944218, 0.6746942512, 0.6746940809, 0.6746939109, 0.6746937411, 0.6746935716, 0.6746934024, 0.6746932335, 0.6746930649, 0.6746928965, 0.6746927285, 0.6746925607, 0.6746923932, 0.6746922259, 0.6746920589, 0.6746918923, 0.6746917258, 0.6746915597, 0.6746913938, 0.6746912282, 0.6746910629, 0.6746908979, 0.6746907331, 0.6746905686, 0.6746904043, 0.6746902403, 0.6746900766, 0.6746899132, 0.6746897500, 0.6746895871, 0.6746894245, 0.6746892621, 0.6746891000, 0.6746889381, 0.6746887765, 0.6746886152, 0.6746884541, 0.6746882933, 0.6746881328, 0.6746879725, 0.6746878125, 0.6746876527, 0.6746874932, 0.6746873339, 0.6746871749, 0.6746870162, 0.6746868577, 0.6746866995, 0.6746865415, 0.6746863838, 0.6746862263, 0.6746860691, 0.6746859121, 0.6746857554, 0.6746855989, 0.6746854427, 0.6746852867, 0.6746851310, 0.6746849755, 0.6746848203, 0.6746846653, 0.6746845106, 0.6746843561, 0.6746842018, 0.6746840478, 0.6746838941, 0.6746837406, 0.6746835873, 0.6746834343, 0.6746832815, 0.6746831289, 0.6746829766, 0.6746828246, 0.6746826727, 0.6746825212, 0.6746823698, 0.6746822187, 0.6746820678, 0.6746819172, 0.6746817668, 0.6746816166, 0.6746814667, 0.6746813170, 0.6746811675, 0.6746810183, 0.6746808693, 0.6746807205, 0.6746805720, 0.6746804237, 0.6746802756, 0.6746801277, 0.6746799801, 0.6746798327, 0.6746796856, 0.6746795386, 0.6746793919, 0.6746792455, 0.6746790992, 0.6746789532, 0.6746788074, 0.6746786618, 0.6746785165, 0.6746783713, 0.6746782264, 0.6746780817, 0.6746779373, 0.6746777930, 0.6746776490, 0.6746775052, 0.6746773616, 0.6746772183, 0.6746770751, 0.6746769322, 0.6746767895, 0.6746766470, 0.6746765048, 0.6746763627, 0.6746762209, 0.6746760792, 0.6746759378, 0.6746757966, 0.6746756557, 0.6746755149, 0.6746753743, 0.6746752340, 0.6746750939, 0.6746749540, 0.6746748143, 0.6746746748, 0.6746745355, 0.6746743964, 0.6746742575, 0.6746741189, 0.6746739804, 0.6746738422, 0.6746737042, 0.6746735663, 0.6746734287, 0.6746732913, 0.6746731541, 0.6746730171, 0.6746728803, 0.6746727437, 0.6746726073, 0.6746724711, 0.6746723351, 0.6746721993, 0.6746720638, 0.6746719284, 0.6746717932, 0.6746716582, 0.6746715234, 0.6746713889, 0.6746712545, 0.6746711203, 0.6746709863, 0.6746708525, 0.6746707189, 0.6746705855, 0.6746704524, 0.6746703194, 0.6746701866, 0.6746700539, 0.6746699215, 0.6746697893, 0.6746696573, 0.6746695255, 0.6746693938, 0.6746692624, 0.6746691311, 0.6746690001, 0.6746688692, 0.6746687385, 0.6746686080, 0.6746684777, 0.6746683476, 0.6746682177, 0.6746680880, 0.6746679584, 0.6746678291, 0.6746676999, 0.6746675709, 0.6746674421, 0.6746673135, 0.6746671851, 0.6746670569, 0.6746669288, 0.6746668010, 0.6746666733, 0.6746665458, 0.6746664185, 0.6746662913, 0.6746661644, 0.6746660376, 0.6746659110, 0.6746657846, 0.6746656584, 0.6746655324, 0.6746654065, 0.6746652809, 0.6746651554, 0.6746650300, 0.6746649049, 0.6746647799, 0.6746646552, 0.6746645305, 0.6746644061, 0.6746642819, 0.6746641578, 0.6746640339, 0.6746639102, 0.6746637866, 0.6746636633, 0.6746635401, 0.6746634170, 0.6746632942, 0.6746631715, 0.6746630490, 0.6746629267, 0.6746628045, 0.6746626826, 0.6746625607, 0.6746624391, 0.6746623176, 0.6746621963, 0.6746620752, 0.6746619543, 0.6746618335, 0.6746617128, 0.6746615924, 0.6746614721, 0.6746613520, 0.6746612321, 0.6746611123, 0.6746609927, 0.6746608732, 0.6746607540, 0.6746606348, 0.6746605159, 0.6746603971, 0.6746602785, 0.6746601601, 0.6746600418, 0.6746599237, 0.6746598057, 0.6746596879, 0.6746595703, 0.6746594528, 0.6746593355, 0.6746592184, 0.6746591014, 0.6746589846, 0.6746588679, 0.6746587514, 0.6746586351, 0.6746585189, 0.6746584029, 0.6746582870, 0.6746581713, 0.6746580558, 0.6746579404, 0.6746578252, 0.6746577101, 0.6746575952, 0.6746574804, 0.6746573658, 0.6746572514, 0.6746571371, 0.6746570230, 0.6746569090, 0.6746567952, 0.6746566815, 0.6746565680, 0.6746564547, 0.6746563415, 0.6746562284, 0.6746561155, 0.6746560028, 0.6746558902, 0.6746557778, 0.6746556655, 0.6746555534, 0.6746554414, 0.6746553296, 0.6746552179, 0.6746551064, 0.6746549950, 0.6746548838, 0.6746547727, 0.6746546618, 0.6746545510, 0.6746544404, 0.6746543299, 0.6746542196, 0.6746541094, 0.6746539993, 0.6746538894, 0.6746537797, 0.6746536701, 0.6746535607, 0.6746534514, 0.6746533422, 0.6746532332, 0.6746531243, 0.6746530156, 0.6746529070, 0.6746527986, 0.6746526903, 0.6746525821, 0.6746524741, 0.6746523663, 0.6746522586, 0.6746521510, 0.6746520436, 0.6746519363, 0.6746518291, 0.6746517221, 0.6746516153, 0.6746515085, 0.6746514020, 0.6746512955, 0.6746511892, 0.6746510830, 0.6746509770, 0.6746508711, 0.6746507654, 0.6746506598, 0.6746505543, 0.6746504490, 0.6746503438, 0.6746502387, 0.6746501338, 0.6746500290, 0.6746499244, 0.6746498199, 0.6746497155, 0.6746496113, 0.6746495072, 0.6746494032, 0.6746492994, 0.6746491957, 0.6746490922, 0.6746489887, 0.6746488854, 0.6746487823, 0.6746486793, 0.6746485764, 0.6746484736, 0.6746483710, 0.6746482685, 0.6746481662, 0.6746480639, 0.6746479618, 0.6746478599, 0.6746477580, 0.6746476563, 0.6746475548, 0.6746474533, 0.6746473520, 0.6746472509, 0.6746471498, 0.6746470489, 0.6746469481, 0.6746468474, 0.6746467469, 0.6746466465, 0.6746465462, 0.6746464461, 0.6746463461, 0.6746462462, 0.6746461464, 0.6746460468, 0.6746459473, 0.6746458479, 0.6746457486, 0.6746456495, 0.6746455505, 0.6746454516, 0.6746453529, 0.6746452542, 0.6746451557, 0.6746450574, 0.6746449591, 0.6746448610, 0.6746447630, 0.6746446651, 0.6746445673, 0.6746444697, 0.6746443722, 0.6746442748, 0.6746441775, 0.6746440804, 0.6746439834, 0.6746438865, 0.6746437897, 0.6746436930, 0.6746435965, 0.6746435001, 0.6746434038, 0.6746433076, 0.6746432116, 0.6746431156, 0.6746430198, 0.6746429241, 0.6746428285, 0.6746427331, 0.6746426378, 0.6746425425, 0.6746424474, 0.6746423525, 0.6746422576, 0.6746421629, 0.6746420682, 0.6746419737, 0.6746418793, 0.6746417851, 0.6746416909, 0.6746415969, 0.6746415029, 0.6746414091, 0.6746413154, 0.6746412218, 0.6746411284, 0.6746410350, 0.6746409418, 0.6746408487, 0.6746407557, 0.6746406628, 0.6746405700, 0.6746404774, 0.6746403848, 0.6746402924, 0.6746402001, 0.6746401079, 0.6746400158, 0.6746399238, 0.6746398319, 0.6746397402, 0.6746396485, 0.6746395570, 0.6746394656, 0.6746393743, 0.6746392831, 0.6746391920, 0.6746391010, 0.6746390101, 0.6746389194, 0.6746388288, 0.6746387382, 0.6746386478, 0.6746385575, 0.6746384673, 0.6746383772, 0.6746382872, 0.6746381973, 0.6746381076, 0.6746380179, 0.6746379283, 0.6746378389, 0.6746377496, 0.6746376603, 0.6746375712, 0.6746374822, 0.6746373933, 0.6746373045, 0.6746372158, 0.6746371272, 0.6746370387, 0.6746369504, 0.6746368621, 0.6746367739, 0.6746366859, 0.6746365979, 0.6746365101, 0.6746364224, 0.6746363347, 0.6746362472, 0.6746361598, 0.6746360724, 0.6746359852, 0.6746358981, 0.6746358111, 0.6746357242, 0.6746356374, 0.6746355507, 0.6746354641, 0.6746353776, 0.6746352912, 0.6746352049, 0.6746351187, 0.6746350327, 0.6746349467, 0.6746348608, 0.6746347750, 0.6746346893, 0.6746346038, 0.6746345183, 0.6746344329, 0.6746343476, 0.6746342625, 0.6746341774, 0.6746340924, 0.6746340075, 0.6746339228, 0.6746338381, 0.6746337535, 0.6746336690, 0.6746335847, 0.6746335004, 0.6746334162, 0.6746333321, 0.6746332481, 0.6746331643, 0.6746330805, 0.6746329968, 0.6746329132, 0.6746328297, 0.6746327463, 0.6746326630, 0.6746325798, 0.6746324967, 0.6746324137, 0.6746323308, 0.6746322480, 0.6746321653, 0.6746320826, 0.6746320001, 0.6746319177, 0.6746318353, 0.6746317531, 0.6746316710, 0.6746315889, 0.6746315069, 0.6746314251, 0.6746313433, 0.6746312616, 0.6746311801, 0.6746310986, 0.6746310172, 0.6746309359, 0.6746308547, 0.6746307736, 0.6746306926, 0.6746306116, 0.6746305308, 0.6746304501, 0.6746303694, 0.6746302889, 0.6746302084, 0.6746301281, 0.6746300478, 0.6746299676, 0.6746298875, 0.6746298075, 0.6746297276, 0.6746296478, 0.6746295680, 0.6746294884, 0.6746294089, 0.6746293294, 0.6746292500, 0.6746291708, 0.6746290916, 0.6746290125, 0.6746289335, 0.6746288545, 0.6746287757, 0.6746286970, 0.6746286183, 0.6746285398, 0.6746284613, 0.6746283829, 0.6746283046, 0.6746282264, 0.6746281483, 0.6746280703, 0.6746279923, 0.6746279145, 0.6746278367, 0.6746277590, 0.6746276814, 0.6746276039, 0.6746275265, 0.6746274492, 0.6746273720, 0.6746272948, 0.6746272177, 0.6746271407, 0.6746270639, 0.6746269870, 0.6746269103, 0.6746268337, 0.6746267571, 0.6746266807, 0.6746266043, 0.6746265280, 0.6746264518, 0.6746263756, 0.6746262996, 0.6746262236, 0.6746261478, 0.6746260720, 0.6746259963, 0.6746259206, 0.6746258451, 0.6746257696, 0.6746256943, 0.6746256190, 0.6746255438, 0.6746254687, 0.6746253936, 0.6746253187, 0.6746252438, 0.6746251690, 0.6746250943, 0.6746250197, 0.6746249451, 0.6746248707, 0.6746247963, 0.6746247220, 0.6746246478, 0.6746245737, 0.6746244996, 0.6746244256, 0.6746243517, 0.6746242779, 0.6746242042, 0.6746241306, 0.6746240570, 0.6746239835, 0.6746239101, 0.6746238368, 0.6746237635, 0.6746236904, 0.6746236173, 0.6746235443, 0.6746234714, 0.6746233985, 0.6746233257, 0.6746232531, 0.6746231805, 0.6746231079, 0.6746230355, 0.6746229631, 0.6746228908, 0.6746228186, 0.6746227465, 0.6746226744, 0.6746226024, 0.6746225305, 0.6746224587, 0.6746223869, 0.6746223153, 0.6746222437, 0.6746221722, 0.6746221007, 0.6746220294, 0.6746219581, 0.6746218869, 0.6746218158, 0.6746217447, 0.6746216737, 0.6746216028, 0.6746215320, 0.6746214612, 0.6746213906, 0.6746213200, 0.6746212495, 0.6746211790, 0.6746211086, 0.6746210383, 0.6746209681, 0.6746208980, 0.6746208279, 0.6746207579, 0.6746206880, 0.6746206182, 0.6746205484, 0.6746204787, 0.6746204091, 0.6746203395, 0.6746202700, 0.6746202006, 0.6746201313, 0.6746200621, 0.6746199929, 0.6746199238, 0.6746198547, 0.6746197858, 0.6746197169, 0.6746196481, 0.6746195793, 0.6746195107, 0.6746194421, 0.6746193736, 0.6746193051, 0.6746192367, 0.6746191684, 0.6746191002, 0.6746190320, 0.6746189639, 0.6746188959, 0.6746188280, 0.6746187601, 0.6746186923, 0.6746186246, 0.6746185569, 0.6746184893, 0.6746184218, 0.6746183543, 0.6746182870, 0.6746182196, 0.6746181524, 0.6746180852, 0.6746180181, 0.6746179511, 0.6746178842, 0.6746178173, 0.6746177505, 0.6746176837, 0.6746176170, 0.6746175504, 0.6746174839, 0.6746174174, 0.6746173510, 0.6746172847, 0.6746172184, 0.6746171522, 0.6746170861, 0.6746170200, 0.6746169540, 0.6746168881, 0.6746168223, 0.6746167565, 0.6746166908, 0.6746166251, 0.6746165596, 0.6746164940, 0.6746164286, 0.6746163632, 0.6746162979, 0.6746162327, 0.6746161675, 0.6746161024, 0.6746160373, 0.6746159724, 0.6746159075, 0.6746158426, 0.6746157779, 0.6746157131, 0.6746156485, 0.6746155839, 0.6746155194, 0.6746154550, 0.6746153906, 0.6746153263, 0.6746152621, 0.6746151979, 0.6746151338, 0.6746150697, 0.6746150057, 0.6746149418, 0.6746148780, 0.6746148142, 0.6746147505, 0.6746146868, 0.6746146232, 0.6746145597, 0.6746144962, 0.6746144328, 0.6746143695, 0.6746143062, 0.6746142430, 0.6746141799, 0.6746141168, 0.6746140538, 0.6746139908, 0.6746139280, 0.6746138651, 0.6746138024, 0.6746137397, 0.6746136771, 0.6746136145, 0.6746135520, 0.6746134895, 0.6746134272, 0.6746133648, 0.6746133026, 0.6746132404, 0.6746131783, 0.6746131162, 0.6746130542, 0.6746129923, 0.6746129304, 0.6746128686, 0.6746128068, 0.6746127451, 0.6746126835, 0.6746126219, 0.6746125604, 0.6746124990, 0.6746124376);


//Style
var customGuiStyle : GUISkin;
var icon1 : Texture2D;
var icon2 : Texture2D;
var icon3 : Texture2D;
var icon4 : Texture2D;
var aTexture : Texture2D;
var aTexture2 : Texture2D;
var aTexture3 : Texture2D;
			
			
function Update(){
if (Input.GetKeyDown(KeyCode.Escape)){
Input.location.Stop ();
Application.Quit();
}

	if(counter == true){
		tidstest1 ();
		tidstest2 ();
		if (tidtaget1 > timelimit1 || tidtaget2 > timelimit2){
			counter = !counter;
			startstop = "Start";
			timer = 0;
		}	
	}

}

function FixedUpdate () {
	if(counter == true){
		timer += Time.deltaTime;
	}
}
    
    
function Start () {
Input.location.Start ();
hoejde = Screen.height / 100.0;
bredde = Screen.width / 100.0;
testbesked = "Ikke nok data";

	// Make some content for the popup list
	list = new GUIContent[5];
	list[0] = new GUIContent("Person- og varebiler + motorcykler");
	list[1] = new GUIContent("Lastbiler og busser");
	list[2] = new GUIContent("Alle motorkøretøjer");
	list[3] = new GUIContent("Knallerter");
	list[4] = new GUIContent("Cykler");

	
	// Liste til konfidesniveau
	list2 = new GUIContent[5];
	list2[0] = new GUIContent("99");
	list2[1] = new GUIContent("98");
	list2[2] = new GUIContent("95");
	list2[3] = new GUIContent("90");
	list2[4] = new GUIContent("80");
	
	// Liste til signifikansniveau fordelingstest - bruges ikke længere!
	list3 = new GUIContent[6];
	list3[0] = new GUIContent("0.005");
	list3[1] = new GUIContent("0.010");
	list3[2] = new GUIContent("0.025");
	list3[3] = new GUIContent("0.050");
	list3[4] = new GUIContent("0.100");
	list3[5] = new GUIContent("0.250");
	
	// Liste til signifikansniveau konklusion
	list4 = new GUIContent[5];
	list4[0] = new GUIContent("0.01");
	list4[1] = new GUIContent("0.02");
	list4[2] = new GUIContent("0.05");
	list4[3] = new GUIContent("0.1");
	list4[4] = new GUIContent("0.2");
	
	// Liste til temperatur 
	list5 = new GUIContent[4];
	list5[0] = new GUIContent("< -5");
	list5[1] = new GUIContent("-5 - 0");
	list5[2] = new GUIContent("0 - 5");
	list5[3] = new GUIContent("> 5");
	
	// Liste til føre
	list6 = new GUIContent[4];
	list6[0] = new GUIContent("Tørt");
	list6[1] = new GUIContent("Vådt");
	list6[2] = new GUIContent("Glat (sne)");
	list6[3] = new GUIContent("Glat (i øvrigt)");
 
	// Make a GUIStyle that has a solid white hover/onHover background to indicate highlighted items
	listStyle = new GUIStyle();
	listStyle.normal.textColor = Color.white;
	var tex = new Texture2D(2, 2);
	var colors = new Color[4];
	for (color in colors) color = Color.white;
	tex.SetPixels(colors);
	tex.Apply();
	listStyle.hover.background = tex;
	listStyle.onHover.background = tex;
	listStyle.padding.left = listStyle.padding.right = listStyle.padding.top = listStyle.padding.bottom = 4;
	listStyle.fontSize = 2.3 * hoejde;
	
	
	//Inputvariable
input3 = "10";
input4 = "85";
input5 = "99";
input6 = "0.05";
input7 = "0.01";

customGuiStyle.box.fontSize = 3*hoejde;
customGuiStyle.button.fontSize = 2.8*hoejde;
customGuiStyle.label.fontSize = 2.3*hoejde;
customGuiStyle.textField.fontSize = 2.3*hoejde;
customGuiStyle.verticalScrollbar.fixedWidth = 2.8*hoejde;
customGuiStyle.verticalScrollbarThumb.fixedWidth = 2.8*hoejde;
	
	
	//Tjekker om GPSen er tændt når app åbnes
	if (!Input.location.isEnabledByUser){
	tab = 17;
	}
	else {
	tab = 0;
	}
	
	
	InvokeRepeating("gpscheck",0, 15);
	
	
	
}


function OnGUI () {


GUI.skin = customGuiStyle;
GUI.DrawTexture(new Rect(0, 0, bredde*100, hoejde*100), aTexture2, ScaleMode.ScaleAndCrop);


//Forside


if(tab == 0){


GUI.DrawTexture(Rect(bredde*10,hoejde*10,bredde * 80,hoejde * 28), aTexture);

if (GUI.Button (Rect (bredde*25,hoejde*55,bredde*50,hoejde*7), "Foretag ny måling")) {
go13 = System.DateTime.Now.ToString("dd/MM/yy");
gokontrol ();
tab = 1;
}

if (GUI.Button (Rect (bredde*25,hoejde*70,bredde*50,hoejde*7), "Åbn tidligere måling")) {
tab = 11;
loadset ();
}

if (GUI.Button (Rect (bredde*30,hoejde*85,bredde*40,hoejde*7), "Om applikationen")) {
tab = 15;
}


}

	

//GO
else if(tab == 1){
if (GUI.Button (Rect (0,0,bredde*25,hoejde*10), icon1)) {
gokontrol ();
}
if (GUI.Button (Rect (bredde*25,0,bredde*25,hoejde*10), icon2)) {
gokontrol ();
if (gokontrolvar == 1){
tab = 2;
inputkontrol ();
}
}
if (GUI.Button (Rect (bredde*50,0,bredde*25,hoejde*10), icon3)) {
inputkontrol ();
gokontrol ();
tidligeredatakontrol ();
if (inputkontrolvar == 1 && gokontrolvar == 1){
tab = 3;
tidstest1 ();
tidstest2 ();
beregn1 ();
}
}
if (GUI.Button (Rect (bredde*75,0,bredde*25,hoejde*10), icon4)) {
inputkontrol ();
gokontrol ();
tidligeredatakontrol ();
if (inputkontrolvar == 1){
beregn1 ();
if (normaltest == 1 && gokontrolvar == 1){
tab = 4;
beregn2 ();
}
}
}

GUI.Box (Rect (0,hoejde*10,bredde * 100,hoejde * 5), "Grundlæggende oplysninger");
if (GUI.Button (Rect (bredde*84.3,hoejde*10.5,bredde*15,hoejde*4), "Hjælp")) {
gokontrol ();
tab = 5;
}

if (gpsstatus == "") {
GUI.contentColor = Color.white;
}
else if (gpsstatus == "Off") {
GUI.contentColor = Color.red;
}
else if (gpsstatus == "Ikke klar") {
GUI.contentColor = Color.yellow;
}
else if (gpsstatus == "Klar") {
GUI.contentColor = Color.green;
}

customGuiStyle.label.fontSize = 1.9*hoejde;
GUI.Label (Rect (bredde * 0.7,hoejde*11,bredde * 25,hoejde * 5), "GPS: " + gpsstatus);
customGuiStyle.label.fontSize = 2.3*hoejde;
GUI.contentColor = Color.white;

//if (GUI.Button (Rect (bredde*0.7,hoejde*10.5,bredde*15,hoejde*4), "Gem")) {
//gem ();
//}

GUI.Label (Rect (bredde*7,hoejde*17,bredde*30,hoejde*5), "Køretøjstype: ");

GUI.Label (Rect (bredde*7,hoejde*22,bredde*30,hoejde*5), "Dato: ");
go13 = GUI.TextField (Rect(bredde*39,hoejde*22,bredde*54,hoejde*4), go13, 50);			

GUI.Label (Rect (bredde*7,hoejde*27,bredde*30,hoejde*5), "Filnavn: ");
go2 = GUI.TextField (Rect(bredde*39,hoejde*27,bredde*54,hoejde*4), go2, 50);

GUI.Label (Rect (bredde*7,hoejde*32,bredde*30,hoejde*5), "By: ");
go3 = GUI.TextField (Rect(bredde*39,hoejde*32,bredde*54,hoejde*4), go3, 50);

GUI.Label (Rect (bredde*7,hoejde*37,bredde*30,hoejde*5), "Vej: ");
go4 = GUI.TextField (Rect(bredde*39,hoejde*37,bredde*54,hoejde*4), go4, 50);

GUI.Label (Rect (bredde*7,hoejde*42,bredde*30,hoejde*5), "Bemærkninger: ");
go6 = GUI.TextField (Rect(bredde*39,hoejde*42,bredde*54,hoejde*4), go6, 140);

GUI.contentColor = Color.red;
customGuiStyle.label.fontSize = 4*hoejde;
if (hejkontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*17,bredde*5,hoejde*5), "*");	
}
if (go13kontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*22,bredde*5,hoejde*5), "*");
}
if (go2kontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*27,bredde*5,hoejde*5), "*");
}
if (go4kontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*37,bredde*5,hoejde*5), "*");
}

customGuiStyle.label.fontSize = 2.6*hoejde;

if (gokontrolvar == 0){ 
GUI.Label (Rect (bredde*7,hoejde*49,bredde*70,hoejde*5), "Felter med * SKAL være udfyldte.");
}
GUI.contentColor = Color.white;
customGuiStyle.label.fontSize = 2.3*hoejde;

if (GUI.Button (Rect (bredde*25,hoejde*69,bredde*50,hoejde*7), "Gem som...")) {
gokontrol ();
if(gokontrolvar == 1){
tab = 13;
loadset ();
}
}

if (GUI.Button (Rect (bredde*25,hoejde*78,bredde*50,hoejde*7), "Upload...")) {
tab = 18;
uploadcheck ();
}


if (GUI.Button (Rect (bredde*25,hoejde*87,bredde*50,hoejde*7), "Til forsiden")) {
gokontrol ();
tab = 12;
}


customGuiStyle.button.fontSize = 2.1*hoejde;
if (Popup.List (Rect(bredde*39,hoejde*17,bredde*54,hoejde*4), showList, listEntry, GUIContent(hej), list, listStyle)) {
picked1 = true;
}
if (picked1) {
hej = list[listEntry].text;
vehicleID=listEntry+1;
}


customGuiStyle.button.fontSize = 2.8*hoejde;

}


//Inputs
else if(tab == 2){
if (GUI.Button (Rect (0,0,bredde*25,hoejde*10), icon1)) {
tidligeredatakontrol ();
inputkontrol ();
tab = 1;
}
if (GUI.Button (Rect (bredde*25,0,bredde*25,hoejde*10), icon2)) {
inputkontrol ();
}
if (GUI.Button (Rect (bredde*50,0,bredde*25,hoejde*10), icon3)) {
tidligeredatakontrol ();
inputkontrol ();
if (inputkontrolvar == 1){
tab = 3;
tidstest1 ();
tidstest2 ();
beregn1 ();
}
}
if (GUI.Button (Rect (bredde*75,0,bredde*25,hoejde*10), icon4)) {
tidligeredatakontrol ();
inputkontrol ();
if (inputkontrolvar == 1){
beregn1 ();
if (normaltest == 1){
tab = 4;
beregn2 ();
}
}
}

GUI.Box (Rect (0,hoejde*10,bredde * 100,hoejde * 5), "Inputs");
if (GUI.Button (Rect (bredde*84.3,hoejde*10.5,bredde*15,hoejde*4), "Hjælp")) {
tab = 6;
}

if (gpsstatus == "") {
GUI.contentColor = Color.white;
}
else if (gpsstatus == "Off") {
GUI.contentColor = Color.red;
}
else if (gpsstatus == "Ikke klar") {
GUI.contentColor = Color.yellow;
}
else if (gpsstatus == "Klar") {
GUI.contentColor = Color.green;
}

customGuiStyle.label.fontSize = 1.9*hoejde;
GUI.Label (Rect (bredde * 0.7,hoejde*11,bredde * 25,hoejde * 5), "GPS: " + gpsstatus);
customGuiStyle.label.fontSize = 2.3*hoejde;
GUI.contentColor = Color.white;

//if (GUI.Button (Rect (bredde*0.7,hoejde*10.5,bredde*15,hoejde*4), "Gem")) {
//gem ();
//}

//SCROLL begin
scrollPosition = GUI.BeginScrollView (Rect (0,hoejde*17,bredde*100,hoejde*85),
scrollPosition, Rect (0, 0, bredde*95, hoejde*83));

GUI.Label (Rect (bredde*7,hoejde*0,bredde*65,hoejde*5), "Måleafstand [m]: ");
input1 = GUI.TextField (Rect(bredde*75,hoejde*0,bredde*18,hoejde*4), input1, 25);

GUI.Label (Rect (bredde*7,hoejde*5,bredde*65,hoejde*5), "Hastighedsgrænse [km/t]: ");
input2 = GUI.TextField (Rect(bredde*75,hoejde*5,bredde*18,hoejde*4), input2, 25);

GUI.Label (Rect (bredde*7,hoejde*10,bredde*65,hoejde*5), "Overskridelsesmargin [km/t]: ");
input3 = GUI.TextField (Rect(bredde*75,hoejde*10,bredde*18,hoejde*4), input3, 25);

GUI.Label (Rect (bredde*7,hoejde*15,bredde*65,hoejde*5), "Fraktilberegning [%]: ");
input4 = GUI.TextField (Rect(bredde*75,hoejde*15,bredde*18,hoejde*4), input4, 4);

GUI.Box (Rect (0,hoejde*42,bredde*100,hoejde * 5), "Tidligere målinger");
if (GUI.Button (Rect (bredde*15,hoejde*49,bredde*75,hoejde*7), "Hent nøgletal fra tidligere måling")) {
tab = 9;
loadset ();
}


GUI.contentColor = Color.red;
customGuiStyle.label.fontSize = 4*hoejde;

if (input1kontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*0,bredde*5,hoejde*5), "*");
}
if (input2kontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*5,bredde*5,hoejde*5), "*");
}
if (input3kontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*10,bredde*5,hoejde*5), "*");
}
if (input4kontrol == 0){
GUI.Label (Rect (bredde*94,hoejde*15,bredde*5,hoejde*5), "*");
}

customGuiStyle.label.fontSize = 2.6*hoejde;

if (inputkontrolvar == 0){
GUI.Label (Rect (bredde*7,hoejde*32,bredde*70,hoejde*5), "Felter med * SKAL være udfyldte.");
}

customGuiStyle.label.fontSize = 2.3*hoejde;
GUI.contentColor = Color.white;


GUI.Label (Rect (bredde*7,hoejde*60,bredde*65,hoejde*5), "Antal observationer: ");
input8 = GUI.TextField (Rect(bredde*75,hoejde*60,bredde*18,hoejde*4), input8, 25);

GUI.Label (Rect (bredde*7,hoejde*65,bredde*65,hoejde*5), "Middelhastighed [km/t]: ");
input9 = GUI.TextField (Rect(bredde*75,hoejde*65,bredde*18,hoejde*4), input9, 25);

GUI.Label (Rect (bredde*7,hoejde*70,bredde*65,hoejde*5), "Spredning [km/t]: ");
input10 = GUI.TextField (Rect(bredde*75,hoejde*70,bredde*18,hoejde*4), input10, 25);

customGuiStyle.button.fontSize = 2.1*hoejde;
GUI.Label (Rect (bredde*7,hoejde*25,bredde*65,hoejde*5), "Signifikansniveau: ");
	if (Popup.List (Rect(bredde*75,hoejde*25,bredde*18,hoejde*4), showList4, listEntry4, GUIContent(input7), list4, listStyle)) {
		picked4 = true;
	}
	if (picked4) {
		input7 = list4[listEntry4].text;
	}
	
GUI.Label (Rect (bredde*7,hoejde*20,bredde*65,hoejde*5), "Konfidensniveau [%]: ");	
	if (Popup.List (Rect(bredde*75,hoejde*20,bredde*18,hoejde*4), showList2, listEntry2, GUIContent(input5), list2, listStyle)) {
		picked2 = true;
	}
	if (picked2) {
		input5 = list2[listEntry2].text;
	}
customGuiStyle.button.fontSize = 2.8*hoejde;
        GUI.EndScrollView ();

}


//Måling
else if(tab == 3){
if (GUI.Button (Rect (0,0,bredde*25,hoejde*10), icon1)) {
if (!afbrydmaaling()){
tab = 1;
}
}
if (GUI.Button (Rect (bredde*25,0,bredde*25,hoejde*10), icon2)) {
if (!afbrydmaaling()){
tab = 2;
}
}
if (GUI.Button (Rect (bredde*50,0,bredde*25,hoejde*10), icon3)) {
if (!afbrydmaaling()){
inputkontrol ();
if (inputkontrolvar == 1){
tab = 3;
tidstest1 ();
tidstest2 ();
beregn1 ();
}
}
}
if (GUI.Button (Rect (bredde*75,0,bredde*25,hoejde*10), icon4)) {
if (!afbrydmaaling()){
inputkontrol ();
if (inputkontrolvar == 1){
beregn1 ();
if (normaltest == 1){
tab = 4;
beregn2 ();
}
}
}
}

GUI.Box (Rect (0,hoejde*10,bredde * 100,hoejde * 5), "Foretag måling");
if (GUI.Button (Rect (bredde*84.3,hoejde*10.5,bredde*15,hoejde*4), "Hjælp")) {
if (!afbrydmaaling()){
tab = 7;
}
}

//GUI.Label (Rect (bredde * 0.7,hoejde*10,bredde * 25,hoejde * 5), "GPS status: " + gpsstatus);



if (gpsstatus == "") {
GUI.contentColor = Color.white;
}
else if (gpsstatus == "Off") {
GUI.contentColor = Color.red;
}
else if (gpsstatus == "Ikke klar") {
GUI.contentColor = Color.yellow;
}
else if (gpsstatus == "Klar") {
GUI.contentColor = Color.green;
}

customGuiStyle.label.fontSize = 1.9*hoejde;
GUI.Label (Rect (bredde * 0.7,hoejde*11,bredde * 25,hoejde * 5), "GPS: " + gpsstatus);
customGuiStyle.label.fontSize = 2.3*hoejde;
GUI.contentColor = Color.white;

//if (GUI.Button (Rect (bredde*0.7,hoejde*10.5,bredde*15,hoejde*4), "Gem")) {
//gem ();
//}

//GUI.Label (Rect (bredde*37,hoejde*17,bredde*30,hoejde*5), "Hej: " + go9);	

//GUI.Label (Rect (bredde*37,hoejde*17,bredde*35,hoejde*10), "GPS tid: " + go10);
GUI.Label (Rect (bredde*37,hoejde*22,bredde*35,hoejde*10), "GPS afstand: " + dgps);

//if (GUI.Button (Rect (bredde*37,hoejde*50,bredde*20,hoejde*5), "Afstand")) {
//gpsafstand ();
//}

GUI.Label (Rect (bredde*7,hoejde*17,bredde*65,hoejde*5), "Antal observationer: ");
GUI.Label (Rect (bredde*73,hoejde*17,bredde*25,hoejde*5), antal + " stk");

GUI.Label (Rect (bredde*7,hoejde*22,bredde*65,hoejde*5), "Middelhastighed: ");
GUI.Label (Rect (bredde*73,hoejde*22,bredde*25,hoejde*5), Mathf.Round(gnms * 10f) / 10f + " km/t");

GUI.Label (Rect (bredde*7,hoejde*27,bredde*65,hoejde*5), "Maks. hastighed: ");
GUI.Label (Rect (bredde*73,hoejde*27,bredde*25,hoejde*5), Mathf.Round(fartmax * 10f) / 10f + " km/t");

GUI.Label (Rect (bredde*7,hoejde*32,bredde*65,hoejde*5), "Min. hastighed: ");
GUI.Label (Rect (bredde*73,hoejde*32,bredde*25,hoejde*5), Mathf.Round(fartmin * 10f) / 10f + " km/t");

GUI.Label (Rect (bredde*7,hoejde*37,bredde*65,hoejde*5), "Spredning: ");
GUI.Label (Rect (bredde*73,hoejde*37,bredde*25,hoejde*5), Mathf.Round(visspred * 10f) / 10f + " km/t");

GUI.Label (Rect (bredde*7,hoejde*42,bredde*65,hoejde*5), "Datasæt normalfordelt? ");
if (testbesked == "Ja") {
GUI.contentColor = Color.green;
}
else{
GUI.contentColor = Color.red;
}
GUI.Label (Rect (bredde*73,hoejde*42,bredde*25,hoejde*5), testbesked + "");
GUI.contentColor = Color.white;

GUI.Label (Rect (bredde*7,hoejde*47,bredde*65,hoejde*5), "Seneste observation: ");
GUI.Label (Rect (bredde*73,hoejde*47,bredde*25,hoejde*5), Mathf.Round(senestehastighed * 10f) / 10f + " km/t");

GUI.Label (Rect (bredde*73,hoejde*52,bredde*25,hoejde*5), go5 + "");

GUI.Label (Rect (bredde*7,hoejde*52,bredde*27,hoejde*5), "Kørselsretning: ");

if (GUI.Button (Rect (bredde*50,hoejde*58,bredde*43,hoejde*7), "Se data")) {
if (!afbrydmaaling()){
tab = 10;
}
}


customGuiStyle.button.fontSize = 2.1*hoejde;
if (antal >= 1){
if (GUI.Button (Rect (bredde*7,hoejde*58,bredde*43,hoejde*7), "Slet seneste observation")) {
if (!afbrydmaaling()){
if (antal >= 1){
tidarr.RemoveAt(antal - 1);
tidlogarr.RemoveAt(antal - 1);
gpslogarrlat.RemoveAt(antal - 1);
gpslogarrlong.RemoveAt(antal - 1);
antal = tidarr.length;
gpsafstand ();
beregn1 ();
tidstest1 ();
tidstest2 ();
if (antal == 0){
senestehastighed = 0.0;
tidstest1 ();
tidstest2 ();
go9 = "ja";
}
}
}
}
}
if (antal == 0){
if (GUI.Button (Rect (bredde*7,hoejde*58,bredde*43,hoejde*7), "Bestem kørselsretning")) {
tidstest1 ();
tidstest2 ();
bestemretning ();
go5 = retning;
}
}
customGuiStyle.button.fontSize = 2.3*hoejde;

if (go9 == "nej") {
GUI.Label (Rect (bredde*30,hoejde*73,bredde*40,hoejde*15), "Den seneste observation var 50m eller længere væk fra den første observation og målingen er derfor låst.");

}
else {
if (tidtaget1 > timelimit1) {
GUI.Label (Rect (bredde*30,hoejde*73,bredde*40,hoejde*10), "Der er gået for lang tid siden første observation");
}
else if (tidtaget2 > timelimit2) {
GUI.Label (Rect (bredde*30,hoejde*73,bredde*40,hoejde*10), "Der er gået for lang tid siden seneste observation");
}
else {
if (go5 != ""){
customGuiStyle.label.fontSize = 4.5*hoejde;
GUI.Label (Rect (bredde*45,hoejde*68,bredde*30,hoejde*10), timer.ToString("f1") +" s");
customGuiStyle.label.fontSize = 2.3*hoejde;

customGuiStyle.button.fontSize = 5.5*hoejde;

if (GUI.Button (Rect (bredde*7,hoejde*77,bredde*86,hoejde*20), startstop)) {
		gpscheck ();
		tidstest1 ();
		tidstest2 ();
		if (tidtaget1 > timelimit1 || tidtaget2 > timelimit2){
		}
		else{
		counter = !counter;
		if(counter == true) 
		{
			startstop = "Stop";
		}
		else{
		if (timer > 0.2){	
			if (Input.location.status == LocationServiceStatus.Running) {
			var tempgpslat = (Input.location.lastData.latitude);
			var tempgpslong = (Input.location.lastData.longitude);
			}
			else {
			tempgpslat = 0.0;
			tempgpslong = 0.0;			
			}
			gpslogarrlat.Add(tempgpslat);
			gpslogarrlong.Add(tempgpslong);		
			gpsafstand ();
			if(dgps < 50.0) {
			timer = Mathf.Round(timer * 100f) / 100f - reaktionstid;
			temptid = System.DateTime.Now.ToString("HH:mm:ss dd/MM/yyyy");
			tidarr.Add(timer);
			tidlogarr.Add(temptid);
			timer = 0;
			startstop = "Start";
			antal = tidarr.length;
			beregn1 ();
			autogem();
			}
			else {
			var tmpantal = gpslogarrlat.length;
			gpslogarrlat.RemoveAt(tmpantal - 1);
			gpslogarrlong.RemoveAt(tmpantal - 1);
			go9 = "nej";	
			timer = 0;
			startstop = "Start";		
			}
		}
		else{
		timer = 0;
		startstop = "Start";
		}
		}
		}			
}
}
}
}

customGuiStyle.button.fontSize = 2.8*hoejde;

}

//Advanceret
else if(tab == 4){
if (GUI.Button (Rect (0,0,bredde*25,hoejde*10), icon1)) {
tab = 1;
}
if (GUI.Button (Rect (bredde*25,0,bredde*25,hoejde*10), icon2)) {
tab = 2;
}
if (GUI.Button (Rect (bredde*50,0,bredde*25,hoejde*10), icon3)) {
inputkontrol ();
if (inputkontrolvar == 1){
tab = 3;
beregn1 ();
tidstest1 ();
tidstest2 ();
}
}
if (GUI.Button (Rect (bredde*75,0,bredde*25,hoejde*10), icon4)) {
inputkontrol ();
if (inputkontrolvar == 1 && normaltest == 1){
tab = 4;
beregn2 ();
}
}

GUI.Box (Rect (0,hoejde*10,bredde * 100,hoejde * 5), "Avancerede resultater");
if (GUI.Button (Rect (bredde*84.3,hoejde*10.5,bredde*15,hoejde*4), "Hjælp")) {
tab = 8;
}

if (gpsstatus == "") {
GUI.contentColor = Color.white;
}
else if (gpsstatus == "Off") {
GUI.contentColor = Color.red;
}
else if (gpsstatus == "Ikke klar") {
GUI.contentColor = Color.yellow;
}
else if (gpsstatus == "Klar") {
GUI.contentColor = Color.green;
}

customGuiStyle.label.fontSize = 1.9*hoejde;
GUI.Label (Rect (bredde * 0.7,hoejde*11,bredde * 25,hoejde * 5), "GPS: " + gpsstatus);
customGuiStyle.label.fontSize = 2.3*hoejde;
GUI.contentColor = Color.white;

//if (GUI.Button (Rect (bredde*0.7,hoejde*10.5,bredde*15,hoejde*4), "Gem")) {
//gem ();
//}

if(tidligeredatakontrolvar == 3){
scrollPosition2 = GUI.BeginScrollView (Rect (0,hoejde*17,bredde*100,hoejde*83),
scrollPosition2, Rect (0, 0, bredde*95, hoejde*186));

GUI.Box (Rect (bredde * 5,0,bredde * 90,hoejde * 5), "Generelt");

GUI.Label (Rect (bredde*7,hoejde*7,bredde*40,hoejde*5), "Antal observationer: ");
GUI.Label (Rect (bredde*73,hoejde*7,bredde*25,hoejde*5), antal + " stk");

GUI.Label (Rect (bredde*7,hoejde*12,bredde*40,hoejde*5), "Middelhastighed: ");
GUI.Label (Rect (bredde*73,hoejde*12,bredde*25,hoejde*5), Mathf.Round(gnms * 10f) / 10f + " km/t");

GUI.Label (Rect (bredde*7,hoejde*17,bredde*40,hoejde*5), "Maks. hastighed: ");
GUI.Label (Rect (bredde*73,hoejde*17,bredde*25,hoejde*5), Mathf.Round(fartmax * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*22,bredde*40,hoejde*5), "Min. hastighed: ");
GUI.Label (Rect (bredde*73,hoejde*22,bredde*25,hoejde*5), Mathf.Round(fartmin * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*27,bredde*40,hoejde*5), "Spredning: ");
GUI.Label (Rect (bredde*73,hoejde*27,bredde*25,hoejde*5), Mathf.Round(visspred * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*32,bredde*40,hoejde*5), fraktilstr*100 + " %-fraktil: ");
GUI.Label (Rect (bredde*73,hoejde*32,bredde*25,hoejde*5), Mathf.Round(visnormfraktilvaerdi * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*37,bredde*55,hoejde*5), "Andel over " + (fartgraense+hastmargin) + " km/t:");
GUI.Label (Rect (bredde*73,hoejde*37,bredde*25,hoejde*5), Mathf.Round(visoverskridelsesandel)  + " %");

GUI.Box (Rect (bredde * 5,hoejde*47,bredde * 90,hoejde * 5), "Konfidensintervaller");

GUI.Label (Rect (bredde*7,hoejde*54,bredde*40,hoejde*5), "Konfidensniveau: ");
GUI.Label (Rect (bredde*73,hoejde*54,bredde*25,hoejde*5), konfidensniveau + " %");

GUI.Label (Rect (bredde*7,hoejde*59,bredde*55,hoejde*8), "Populationsmin. middelværdi: ");
GUI.Label (Rect (bredde*73,hoejde*59,bredde*25,hoejde*5), Mathf.Round(vismidnedre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*65,bredde*55,hoejde*8), "Populationsmaks. middelværdi:");
GUI.Label (Rect (bredde*73,hoejde*65,bredde*25,hoejde*5), Mathf.Round(vismidoevre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*73,bredde*55,hoejde*8), "Populationsmin. " + fraktilstr*100 + " %-fraktil:");
GUI.Label (Rect (bredde*73,hoejde*73,bredde*25,hoejde*5), Mathf.Round(normfraktilvaerdinedre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*79,bredde*55,hoejde*8), "Populationsmaks. " + fraktilstr*100 + " %-fraktil:");
GUI.Label (Rect (bredde*73,hoejde*79,bredde*25,hoejde*5), Mathf.Round(normfraktilvaerdioevre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*87,bredde*55,hoejde*8), "Minimumandel over " + (fartgraense+hastmargin) + " km/t:");
GUI.Label (Rect (bredde*73,hoejde*87,bredde*25,hoejde*5), Mathf.Round(overskridelsesandelnedre)  + " %");

GUI.Label (Rect (bredde*7,hoejde*93,bredde*55,hoejde*8), "Maksimumandel over " + (fartgraense+hastmargin) + " km/t:");
GUI.Label (Rect (bredde*73,hoejde*93,bredde*25,hoejde*5), Mathf.Round(overskridelsesandeloevre)  + " %");

GUI.Box (Rect (bredde * 5,hoejde*102,bredde * 90,hoejde * 5), "Sammenligning med tidligere måling");

GUI.Label (Rect (bredde*7,hoejde*109,bredde*50,hoejde*5), "Konfidensniveau: ");
GUI.Label (Rect (bredde*73,hoejde*109,bredde*25,hoejde*5), konfidensniveau + " %");

GUI.Label (Rect (bredde*7,hoejde*114,bredde*50,hoejde*8), "Ændring af middelhastighed: ");
GUI.Label (Rect (bredde*73,hoejde*114,bredde*25,hoejde*5), Mathf.Round(visgnmsforskel * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*122,bredde*50,hoejde*5), "Nedre grænse for ændring: ");
GUI.Label (Rect (bredde*73,hoejde*122,bredde*25,hoejde*5), Mathf.Round(visfornedre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*127,bredde*50,hoejde*5), "Øvre grænse for ændring: ");
GUI.Label (Rect (bredde*73,hoejde*127,bredde*25,hoejde*5), Mathf.Round(visforoevre * 10f) / 10f  + " km/t");

GUI.Box (Rect (bredde * 5,hoejde*135,bredde * 90,hoejde * 5), "Konklusion");

if (test12t <= test12alfa && test12t >= -test12alfa) {
GUI.Label (Rect (bredde*7,hoejde*142,bredde*86,hoejde*20), "Den målte middelhastighed på " + Mathf.Round(gnms * 10f) / 10f + " km/t er, på baggrund af en dobbeltsidet hypotesetest med et signifikansniveau på " + signifikansniveauhyp + ", ikke signifikant forskellig fra hastighedsgrænsen på " + (fartgraense) + " km/t. Middelforskellen er med " + konfidensniveau + " % sandsynlighed på mellem " + Mathf.Round((Mathf.Round(vismidnedre * 10f) / 10f - fartgraense) * 10f) / 10f  + " km/t og " + Mathf.Round((Mathf.Round(vismidoevre * 10f) / 10f - fartgraense) * 10f) / 10f + " km/t.");
}
else {
GUI.Label (Rect (bredde*7,hoejde*142,bredde*86,hoejde*20), "Den målte middelhastighed på " + Mathf.Round(gnms * 10f) / 10f + " km/t er, på baggrund af en dobbeltsidet hypotesetest med et signifikansniveau på " + signifikansniveauhyp + ", signifikant forskellig fra hastighedsgrænsen på " + (fartgraense) + " km/t. Middelforskellen er med " + konfidensniveau + " % sandsynlighed på mellem " + Mathf.Round((Mathf.Round(vismidnedre * 10f) / 10f - fartgraense) * 10f) / 10f  + " km/t og " + Mathf.Round((Mathf.Round(vismidoevre * 10f) / 10f - fartgraense) * 10f) / 10f + " km/t.");
}

if(tidligeredatakontrolvar == 3){
if(test34t <= test34alfa && test34t >= -test34alfa){
GUI.Label (Rect (bredde*7,hoejde*165,bredde*86,hoejde*20), "Den målte middelhastighed på " + Mathf.Round(gnms * 10f) / 10f + " km/t er, på baggrund af en dobbeltsidet hypotesetest med et signifikansniveau på " + signifikansniveauhyp + ", ikke signifikant forskellig fra den tidligere målte middelhastighed på " + Mathf.Round(pregnms * 10f) / 10f + " km/t. Ændringen af middelhastigheden er med " + konfidensniveau + " % sandsynlighed på mellem " + Mathf.Round(visfornedre * 10f) / 10f  + " km/t og " + Mathf.Round(visforoevre * 10f) / 10f + " km/t.");
}
else {
GUI.Label (Rect (bredde*7,hoejde*165,bredde*86,hoejde*20), "Den målte middelhastighed på " + Mathf.Round(gnms * 10f) / 10f + " km/t er, på baggrund af en dobbeltsidet hypotesetest med et signifikansniveau på " + signifikansniveauhyp + ", signifikant forskellig fra den tidligere målte middelhastighed på " + Mathf.Round(pregnms * 10f) / 10f + " km/t. Ændringen af middelhastigheden er, med " + konfidensniveau + "% sandsynlighed på mellem " + Mathf.Round(visfornedre * 10f) / 10f  + " km/t og " + Mathf.Round(visforoevre * 10f) / 10f  + " km/t.");
}
}

GUI.EndScrollView ();
}

else{
scrollPosition2 = GUI.BeginScrollView (Rect (0,hoejde*17,bredde*100,hoejde*83),
scrollPosition2, Rect (0, 0, bredde*95, hoejde*135));

GUI.Box (Rect (bredde * 5,0,bredde * 90,hoejde * 5), "Generelt");

GUI.Label (Rect (bredde*7,hoejde*7,bredde*40,hoejde*5), "Antal observationer: ");
GUI.Label (Rect (bredde*73,hoejde*7,bredde*25,hoejde*5), antal + " stk");

GUI.Label (Rect (bredde*7,hoejde*12,bredde*40,hoejde*5), "Middelhastighed: ");
GUI.Label (Rect (bredde*73,hoejde*12,bredde*25,hoejde*5), Mathf.Round(gnms * 10f) / 10f + " km/t");

GUI.Label (Rect (bredde*7,hoejde*17,bredde*40,hoejde*5), "Maks. hastighed: ");
GUI.Label (Rect (bredde*73,hoejde*17,bredde*25,hoejde*5), Mathf.Round(fartmax * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*22,bredde*40,hoejde*5), "Min. hastighed: ");
GUI.Label (Rect (bredde*73,hoejde*22,bredde*25,hoejde*5), Mathf.Round(fartmin * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*27,bredde*40,hoejde*5), "Spredning: ");
GUI.Label (Rect (bredde*73,hoejde*27,bredde*25,hoejde*5), Mathf.Round(visspred * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*32,bredde*40,hoejde*5), fraktilstr*100 + " %-fraktil: ");
GUI.Label (Rect (bredde*73,hoejde*32,bredde*25,hoejde*5), Mathf.Round(visnormfraktilvaerdi * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*37,bredde*55,hoejde*5), "Andel over " + (fartgraense+hastmargin) + " km/t:");
GUI.Label (Rect (bredde*73,hoejde*37,bredde*25,hoejde*5), Mathf.Round(visoverskridelsesandel)  + " %");

GUI.Box (Rect (bredde * 5,hoejde*47,bredde * 90,hoejde * 5), "Konfidensintervaller");

GUI.Label (Rect (bredde*7,hoejde*54,bredde*40,hoejde*5), "Konfidensniveau: ");
GUI.Label (Rect (bredde*73,hoejde*54,bredde*25,hoejde*5), konfidensniveau + " %");

GUI.Label (Rect (bredde*7,hoejde*59,bredde*55,hoejde*8), "Populationsmin. middelværdi: ");
GUI.Label (Rect (bredde*73,hoejde*59,bredde*25,hoejde*5), Mathf.Round(vismidnedre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*65,bredde*55,hoejde*8), "Populationsmaks. middelværdi:");
GUI.Label (Rect (bredde*73,hoejde*65,bredde*25,hoejde*5), Mathf.Round(vismidoevre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*73,bredde*55,hoejde*8), "Populationsmin. " + fraktilstr*100 + " %-fraktil:");
GUI.Label (Rect (bredde*73,hoejde*73,bredde*25,hoejde*5), Mathf.Round(normfraktilvaerdinedre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*79,bredde*55,hoejde*8), "Populationsmaks. " + fraktilstr*100 + " %-fraktil:");
GUI.Label (Rect (bredde*73,hoejde*79,bredde*25,hoejde*5), Mathf.Round(normfraktilvaerdioevre * 10f) / 10f  + " km/t");

GUI.Label (Rect (bredde*7,hoejde*87,bredde*55,hoejde*8), "Minimumandel over " + (fartgraense+hastmargin) + " km/t:");
GUI.Label (Rect (bredde*73,hoejde*87,bredde*25,hoejde*5), Mathf.Round(overskridelsesandelnedre)  + " %");

GUI.Label (Rect (bredde*7,hoejde*93,bredde*55,hoejde*8), "Maksimumandel over " + (fartgraense+hastmargin) + " km/t:");
GUI.Label (Rect (bredde*73,hoejde*93,bredde*25,hoejde*5), Mathf.Round(overskridelsesandeloevre)  + " %");

GUI.Box (Rect (bredde * 5,hoejde*102,bredde * 90,hoejde * 5), "Konklusion");

if (test12t <= test12alfa && test12t >= -test12alfa) {
GUI.Label (Rect (bredde*7,hoejde*109,bredde*86,hoejde*20), "Den målte middelhastighed på " + Mathf.Round(gnms * 10f) / 10f + " km/t er, på baggrund af en dobbeltsidet hypotesetest med et signifikansniveau på " + signifikansniveauhyp + ", ikke signifikant forskellig fra hastighedsgrænsen på " + (fartgraense) + " km/t. Middelforskellen er med " + konfidensniveau + " % sandsynlighed på mellem " + Mathf.Round((Mathf.Round(vismidnedre * 10f) / 10f - fartgraense) * 10f) / 10f  + " km/t og " + Mathf.Round((Mathf.Round(vismidoevre * 10f) / 10f - fartgraense) * 10f) / 10f + " km/t.");
}
else {
GUI.Label (Rect (bredde*7,hoejde*109,bredde*86,hoejde*20), "Den målte middelhastighed på " + Mathf.Round(gnms * 10f) / 10f + " km/t er, på baggrund af en dobbeltsidet hypotesetest med et signifikansniveau på " + signifikansniveauhyp + ", signifikant forskellig fra hastighedsgrænsen på " + (fartgraense) + " km/t. Middelforskellen er med " + konfidensniveau + " % sandsynlighed på mellem " + Mathf.Round((Mathf.Round(vismidnedre * 10f) / 10f - fartgraense) * 10f) / 10f  + " km/t og " + Mathf.Round((Mathf.Round(vismidoevre * 10f) / 10f - fartgraense) * 10f) / 10f + " km/t.");
}


GUI.EndScrollView ();
}

}

//Hjælp til GO
else if(tab == 5){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Hjælp til grundlæggende oplysninger");

scrollPosition = GUI.BeginScrollView (Rect (0,hoejde*12,bredde*100,hoejde*74),
scrollPosition, Rect (0, 0, bredde*95, hoejde*145));
GUI.Label (Rect (bredde*7,hoejde*0,bredde*86,hoejde*140), "Fanen benyttes til at fastlægge helt grundlæggende oplysninger omkring målingen der skal foretages. Overskrifter markeret med * skal udfyldes/vælges. \n \nKøretøjstype*: \nInden målingen påbegyndes skal der tages stilling til, hvorvidt der måles på én bestemt trafikantgruppe, eller der måles på alle typer motorkøretøjer (undtagen knallerter). Mulighederne er hhv. Person- og varebiler + motorcykler, Lastbiler og busser, Alle motorkøretøjer, Knallerter, Cykler. \n \nDato*: \nDatoen for målingens oprettelse indsættes automatisk i dette felt. \n \nFilnavn*: \nFilnavnet som målingen skal gemmes under indtastes her. Udover at identificere målingen på telefonen, er dette navn så at sige målingens ID ved upload til databasen www.speedanalysis.aau.dk. Det er således muligt at genfinde sin egen måling på databasen ved at søge på filnavnet. \n \nBy: \nIndtast navnet på den by som målingen foretages i. \n \nVej*: \nIndtast navnet på vejen, hvorpå målingen foretages. Selvom applikationen logger GPS-positionen ved målingens start, kan usikkerhed på positionen medføre, at der opstår tvivl om, hvorvidt målingen foretages på den ene eller den anden af to tilgrænsende veje. \n \nBemærkning: \nEr der specielle forhold på vejen som har indflydelse på målingen skal de noteres i dette felt. Dette kunne f.eks. være parkerede køretøjer i vejsiden, vejarbejde før eller efter målestrækningen eller i modsatte vognbane, specielle trafikgenererende arrangementer eller andet. \n \n”Gem som…”-knappen: \nBenyttes til at gemme den foretagne måling lokalt på telefonen. Der kan gemmes op til 10 forskellige målinger af gangen. Herefter må gamle målinger overskrives såfremt der skal gemmes nye. Når den nyoprettede måling er gemt på telefonen ved tryk på ”Gem som…”, autosaves efterfølgende for hver ny observation der tilføjes til målingen. \n \n”Upload-knappen:” \nBenyttes når der er foretaget en godkendt måling og sender observationssættet samt de grundlæggende oplysninger til onlinedatabasen www.speedanalysis.aau.dk. En måling kan kun uploades én gang. \n \n”Til forsiden:”-knappen \nBenyttes til at navigere til applikationens startside.");
GUI.EndScrollView ();

if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Luk hjælp")) {
tab = 1;
}

}

//Hjælp til input
else if(tab == 6){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Hjælp til inputs");

scrollPosition = GUI.BeginScrollView (Rect (0,hoejde*12,bredde*100,hoejde*74),
scrollPosition, Rect (0, 0, bredde*95, hoejde*273));
GUI.Label (Rect (bredde*7,hoejde*0,bredde*86,hoejde*268), "Fanen benyttes til at specificere de statistiske inputs der ligger til grund for den databehandling som sker på telefonen. De eneste to parametre fra denne fane som medsendes ved en evt. upload af målingen, er måleafstanden og hastighedsgrænsen. Det er således vigtigt, at disse to parametre er korrekt udfyldt. De resterende valgmuligheder og parametre på denne fane er parametre, der kan justeres på ved studering af resultaterne for målingen, men som ikke har betydning for selve målingen. I disse felter er der fra start valgt standardværdier. De eneste felter som brugeren derfor skal udfylde manuelt, er måleafstanden og hastighedsgrænsen markeret med * nedenfor. Der kan ikke navigeres videre til fanen ”Foretag måling”, inden disse felter er udfyldt. \n \nMåleafstand*: \nAfstanden mellem personen som observerer og spejlet. \n \nHastighedsgrænse*: \nHastighedsgrænsen på den vejstrækning, hvor målingen foretages. \n \nOverskridelsesmargin*: \nDen ønskede hastighedsoverskridelsesmargin som benyttes til at bestemme, hvor stor en andel af bilisterne der overskrider hastighedsgrænsen + overskridelsesmarginen. Hvis det, f.eks., er interessant at undersøge, hvor stor en andel af bilisterne der kører 60 km/t eller mere på en vejstrækning, hvor hastighedsgrænsen er 50 km/t, sættes overskridelsesmarginen til 10 km/t. Værdien sættes som standard til 10 km/t. \n \nFraktilberegning*: \nDen ønskede fraktilstørrelse i intervallet 0,1-99,9 %. Benyttes til at bestemme fraktilhastigheden, altså den hastighed, hvormed den valgte procentsats af bilisterne maksimalt kører med. Værdien sættes som standard til 85 %. \n \nKonfidensniveau: \nBenyttes til at bestemme konfidensintervaller for populationsværdierne af middelhastigheden, fraktilhastigheden og andelen af bilister der kører stærkere end hastighedsgrænsen plus overskridelsesmarginen. Konfidensniveauet angiver, hvor sikkert det er, at den ”rigtige” værdi for en parameter ligger inden for det konstruerede konfidensinterval. Der kan vælges mellem fem forskellige værdier. Som standard er værdien 99 % valgt. \n \nSignifikansniveau: \nGenerelt angiver signifikansniveauet risikoen for, at en hypotese forkastes selvom den er sand. Et signifikansniveau på eksempelvis 0,05, vil således give 5 % sandsynlighed for at forkaste en sand hypotese. Jo større signifikansniveau der vælges, jo sværere er det at få en hypotese godkendt, men jo mere sikkert er det samtidig, at en godkendt hypotese faktisk er sand. \nHer vælges det ønskede signifikansniveau for konklusionen under fanen ”Avancerede resultater”. Der konkluderes på to ting. Det første er, hvorvidt den målte middelhastighed er signifikant mindre end, signifikant større end, eller ikke er signifikant forskellig fra hastighedsgrænsen. Det andet er, afhængig af om der er indtastet data for en tidligere måling (se næste punkt), at bestemme, hvorvidt den målte middelhastighed er signifikant mindre end, signifikant større end, eller ikke er signifikant forskellig fra den tidligere målings middelhastighed. Der udføres udelukkende ensidige hypotesetests. Hypoteserne afhænger af målingens resultat. Grundlæggende gælder det, at jo mindre et signifikansniveau der vælges, jo større en forskel mellem middelhastigheden og hastighedsgrænsen, eller mellem middelhastigheden og den tidligere målings middelhastighed, skal der til, førend det kan konkluderes at middelhastigheden afviger signifikant til den ene eller den anden side. \n \nTidligere målinger: \nØnsker brugeren at sammenligne den foretagne måling med en tidligere foretagen måling fra samme vejstrækning, kan dette gøres ved at indtaste nøgletal fra denne måling. Dette kan gøres manuelt i de tre dertilhørende felter ”Antal observationer”, ”Middelhastighed” og ”Spredning”. Alternativt kan disse værdier indlæses automatisk. Dette kræver dog, at den tidligere foretagne måling ligeledes er gemt på telefonen. Ved at benytte knappen ”Hent nøgletal fra tidligere måling” tilgås listen over gemte målinger på telefonen, hvorefter den ønskede måling kan vælges. Sammenligningen kan ses på fanen ”Avancerede resultater”. ");
GUI.EndScrollView ();

if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Luk hjælp")) {
tab = 2;
}

}

//Hjælp til måling
else if(tab == 7){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Hjælp til Foretag måling");

scrollPosition = GUI.BeginScrollView (Rect (0,hoejde*12,bredde*100,hoejde*74),
scrollPosition, Rect (0, 0, bredde*95, hoejde*130));
GUI.Label (Rect (bredde*7,hoejde*0,bredde*86,hoejde*125), "Fanen benyttes til at foretage observationer. Desuden vises og opdateres de grundlæggende resultater efterhånden som målingen skrider frem. \n \nInden en observation kan foretages, skal kørselsretningen bestemmes. Kørselsretningen kan opdateres indtil første observation er foretaget. Herefter omdøbes knappen ”Bestem kørselsretning” til ”slet seneste observation” og kørselsretningen kan herfra ikke længere ændres, med mindre alle observationer i målingen slettes. Nedenfor er fanens øvrige oplysninger/knapper forklaret. \n \nAntal observationer: \nAngiver løbende, hvor mange observationer der er foretaget i målingen. \n \nMiddelhastighed: \nAngiver løbende middelhastigheden for målingen. \n \nMaks. og min. hastighed: \nAngiver løbende maksimum- og minimumhastigheden for målingen. \n \nSpredning: \nAngiver løbende spredningen for målingen. Spredningen regnes unbiased (der divideres med n-1 ved beregningen). \n \nDatasæt normalfordelt?: \nFortæller løbende brugeren, hvorvidt målingen kan antages normalfordelt eller ej, samt hvorvidt der haves observationer nok i målingen. Der skal som minimum udføres 20 observationer. Fanen ”Avancerede resultater” kan først tilgås, når der haves minimum 20 normalfordelte observationer. \n \nSeneste observation: \nAngiver hastigheden for den seneste observation. \n \nSlet seneste observation: Sletter udelukkende den seneste observation. \n \nSe data: \nBringer brugeren til en fane, hvor de forskellige observationer i målingen er listet. Her er der desuden mulighed for at slette en vilkårlig observation. \n \nStart/stop: \nAnvendes ved start og stop af tiden i forbindelse med en observation. Der er tale om én og samme knap, som ændrer funktion alt efter om tiden er startet eller ej.");
GUI.EndScrollView ();

if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Luk hjælp")) {
tab = 3;
tidstest1 ();
tidstest2 ();
}

}

//Hjælp til avan. resultater
else if(tab == 8){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Hjælp til avancerede resultater");

scrollPosition = GUI.BeginScrollView (Rect (0,hoejde*12,bredde*100,hoejde*74),
scrollPosition, Rect (0, 0, bredde*95, hoejde*250));
GUI.Label (Rect (bredde*7,hoejde*0,bredde*86,hoejde*245), "Fanen bringer en oversigt over de forskellige resultater for den aktuelle måling. Nedenfor er de forskellige resultater forklaret nærmere. \n \nAntal observationer: \nAngiver, hvor mange observationer der er foretaget i målingen. \n \nMiddelhastighed: \nAngiver middelhastigheden for målingen. \n \nMaks. og min. hastighed: \nAngiver maksimum- og minimumhastigheden for målingen. \n \nSpredning: \nAngiver spredningen for målingen. Spredningen regnes unbiased (der divideres med n-1 ved beregningen). \n \nXX %-fraktil: \nAngiver fraktilhastigheden for målingen på baggrund af den fittede normalfordelingskurve. Fraktilhastigheden er den hastighed, hvormed den valgte procentsats af bilisterne maksimalt kører med. \n \nAndel over XX km/t: \nAngiver andelen af bilisterne som, på baggrund af den fittede normalfordelingskurve, kører stærkere end hastighedsgrænsen plus den valgte overskridelsesmargin. \n \nKonfidensniveau: \nAngiver det valgte konfidensniveau fra fanen ”Inputs”. Konfidensniveauet angiver, hvor sikkert det er, at den ”rigtige” værdi for en parameter ligger inden for det konstruerede konfidensinterval. \n \nPopulationsmin. middelværdi og populationsmaks. middelværdi: \nAngiver, med den valgte sikkerhed i form af konfidensniveauet, den nedre, hhv. den øvre grænse for populationens middelhastighed, dvs. den ”rigtige” middelhastighed, som ville fremkomme ved at observere samtlige enheder i populationen. \n \nPopulationsmin. XX %-fraktil og populationsmaks. XX %-fraktil: \nAngiver, med den valgte sikkerhed i form af konfidensniveauet, den nedre, hhv. den øvre grænse for populationens fraktilhastighed, dvs. den ”rigtige” fraktilhastighed, som ville fremkomme ved at observere samtlige enheder i populationen. \n \nMinimumandel over XX km/t og maksimumandel over XX km/t: \nAngiver, med den valgte sikkerhed i form af konfidensniveauet, den nedre, hhv. den øvre grænse for andelen af populationens trafikanter, der kører stærkere end hastighedsgrænsen plus overskridelsesmarginen, dvs. den ”rigtige” andel, som ville fremkomme ved at observere samtlige enheder i populationen. \n \nÆndring af middelhastighed: \nAngiver forskellen mellem den tidligere målings hastighed og den aktuelle målings hastighed. Et negativt fortegn angiver, at middelhastigheden er faldet. \n \nNedre grænse for ændring: \nAngiver, med den valgte sikkerhed i form af konfidensniveauet, den reelle nedre grænse for den aktuelle middelhastigheds ændring fra den tidligere middelhastighed. Den nedre grænse vil, i tilfælde af, at den aktuelle målings middelhastighed er mindre end den tidligere målings middelhastighed, udgøre den numerisk største forskel. \n \nØvre grænse for ændring: \nAngiver, med den valgte sikkerhed i form af konfidensniveauet, den reelle øvre grænse for den aktuelle middelhastigheds ændring fra den tidligere middelhastighed. Den øvre grænse vil, i tilfælde af, at den aktuelle målings middelhastighed er mindre end den tidligere målings middelhastighed, udgøre den numerisk mindste forskel. \n \nKonklusion: \nKonkluderende sætninger der fortæller, hvad konklusionen er for den aktuelle middelhastighed relativt til hastighedsgrænsen og relativt til en tidligere middelhastighed. Sidstnævnte vises kun i tilfælde af, at data for en tidligere måling er indtastet under fanen ”Inputs”.");
GUI.EndScrollView ();

if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Luk hjælp")) {
tab = 4;
}

}

//Tidligere målinger
else if(tab == 9){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Tidligere målinger til sammenligning");
if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Tilbage")) {
tab = 2;
}

scrollPosition3 = GUI.BeginScrollView (Rect (0,hoejde*15,bredde*100,hoejde*65),
scrollPosition3, Rect (0, 0, bredde*95, hoejde * 95));

GUI.Label (new Rect (bredde*13,hoejde*1,bredde*50,hoejde*7), datanavn1 + "  " + datatid1);
if (GUI.Button (Rect (bredde*70,hoejde*0,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal1();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*11,bredde*50,hoejde*7), datanavn2 + "  " + datatid2);
if (GUI.Button (Rect (bredde*70,hoejde*10,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal2();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*21,bredde*50,hoejde*7), datanavn3 + "  " + datatid3);
if (GUI.Button (Rect (bredde*70,hoejde*20,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal3();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*31,bredde*50,hoejde*7), datanavn4 + "  " + datatid4);
if (GUI.Button (Rect (bredde*70,hoejde*30,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal4();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*41,bredde*50,hoejde*7), datanavn5 + "  " + datatid5);
if (GUI.Button (Rect (bredde*70,hoejde*40,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal5();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*51,bredde*50,hoejde*7), datanavn6 + "  " + datatid6);
if (GUI.Button (Rect (bredde*70,hoejde*50,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal6();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*61,bredde*50,hoejde*7), datanavn7 + "  " + datatid7);
if (GUI.Button (Rect (bredde*70,hoejde*60,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal7();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*71,bredde*50,hoejde*7), datanavn8 + "  " + datatid8);
if (GUI.Button (Rect (bredde*70,hoejde*70,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal8();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*81,bredde*50,hoejde*7), datanavn9 + "  " + datatid9);
if (GUI.Button (Rect (bredde*70,hoejde*80,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal9();
tab = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*91,bredde*50,hoejde*7), datanavn10 + "  " + datatid10);
if (GUI.Button (Rect (bredde*70,hoejde*90,bredde*20,hoejde*5), "Anvend")) {
loadnoegletal10();
tab = 2;
}

GUI.EndScrollView ();

}

//Data
else if(tab == 10){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Data");

if (GUI.Button (Rect (bredde*7,hoejde*90,bredde*43,hoejde*7), "Tilbage")) {
tab = 3;
tidstest1 ();
tidstest2 ();
}

if (GUI.Button (Rect (bredde*50,hoejde*90,bredde*43,hoejde*7), "Mere")) {
tab = 16;
}

GUI.Label (Rect (bredde*5,hoejde*14,bredde*25,hoejde*15), "Observation #");
GUI.Label (Rect (bredde*29,hoejde*14,bredde*25,hoejde*15), "Tid [s]");
GUI.Label (Rect (bredde*43,hoejde*14,bredde*30,hoejde*15), "Hastighed [km/t]");
GUI.Label (Rect (bredde*78,hoejde*14,bredde*25,hoejde*15), "Slet?");

scrollPosition3 = GUI.BeginScrollView (Rect (0,hoejde*20,bredde*100,hoejde*65),
scrollPosition3, Rect (0, 0, bredde*95, antal * hoejde * 6));

var datahoejde = antal * hoejde*6 - hoejde * 5;

for(var n = 0; n < antal; n++){
var nr = n + 1;
visfart = fartarr[n];
tidstemp = tidarr[n];
GUI.Label (new Rect (bredde*11,datahoejde,bredde*35,hoejde*5), nr + "");
GUI.Label (new Rect (bredde*30,datahoejde,bredde*35,hoejde*5), Mathf.Round(tidstemp * 100f) / 100f + "");
GUI.Label (new Rect (bredde*50,datahoejde,bredde*35,hoejde*5), Mathf.Round(visfart * 10f) / 10f  + "");
if (GUI.Button (Rect (bredde*70,datahoejde,bredde*20,hoejde*4), "Slet")) {
tidarr.RemoveAt(n);
tidlogarr.RemoveAt(n);
gpslogarrlat.RemoveAt(n);
gpslogarrlong.RemoveAt(n);
fartarr.RemoveAt(n);
beregn1 ();
}
datahoejde = datahoejde - hoejde*6;
}

GUI.EndScrollView ();
}

//Tidligere målinger
else if(tab == 11){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Tidligere målinger");
if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Tilbage")) {
tab = 0;
}

scrollPosition3 = GUI.BeginScrollView (Rect (0,hoejde*15,bredde*100,hoejde*65),
scrollPosition3, Rect (0, 0, bredde*95, hoejde * 95));

GUI.Label (new Rect (bredde*13,hoejde*1,bredde*50,hoejde*7), datanavn1 + "  " + datatid1);
if (GUI.Button (Rect (bredde*70,0,bredde*20,hoejde*5), "Åbn")) {
load1 ();
tab = 1;
slot = 1;
}
GUI.Label (new Rect (bredde*13,hoejde*11,bredde*50,hoejde*7), datanavn2 + "  " + datatid2);
if (GUI.Button (Rect (bredde*70,hoejde*10,bredde*20,hoejde*5), "Åbn")) {
load2 ();
tab = 1;
slot = 2;
}
GUI.Label (new Rect (bredde*13,hoejde*21,bredde*50,hoejde*7), datanavn3 + "  " + datatid3);
if (GUI.Button (Rect (bredde*70,hoejde*20,bredde*20,hoejde*5), "Åbn")) {
load3 ();
tab = 1;
slot = 3;
}
GUI.Label (new Rect (bredde*13,hoejde*31,bredde*50,hoejde*7), datanavn4 + "  " + datatid4);
if (GUI.Button (Rect (bredde*70,hoejde*30,bredde*20,hoejde*5), "Åbn")) {
load4 ();
tab = 1;
slot = 4;
}
GUI.Label (new Rect (bredde*13,hoejde*41,bredde*50,hoejde*7), datanavn5 + "  " + datatid5);
if (GUI.Button (Rect (bredde*70,hoejde*40,bredde*20,hoejde*5), "Åbn")) {
load5 ();
tab = 1;
slot = 5;
}
GUI.Label (new Rect (bredde*13,hoejde*51,bredde*50,hoejde*7), datanavn6 + "  " + datatid6);
if (GUI.Button (Rect (bredde*70,hoejde*50,bredde*20,hoejde*5), "Åbn")) {
load6 ();
tab = 1;
slot = 6;
}
GUI.Label (new Rect (bredde*13,hoejde*61,bredde*50,hoejde*7), datanavn7 + "  " + datatid7);
if (GUI.Button (Rect (bredde*70,hoejde*60,bredde*20,hoejde*5), "Åbn")) {
load7 ();
tab = 1;
slot = 7;
}
GUI.Label (new Rect (bredde*13,hoejde*71,bredde*50,hoejde*7), datanavn8 + "  " + datatid8);
if (GUI.Button (Rect (bredde*70,hoejde*70,bredde*20,hoejde*5), "Åbn")) {
load8 ();
tab = 1;
slot = 8;
}
GUI.Label (new Rect (bredde*13,hoejde*81,bredde*50,hoejde*7), datanavn9 + "  " + datatid9);
if (GUI.Button (Rect (bredde*70,hoejde*80,bredde*20,hoejde*5), "Åbn")) {
load9 ();
tab = 1;
slot = 9;
}
GUI.Label (new Rect (bredde*13,hoejde*91,bredde*50,hoejde*7), datanavn10 + "  " + datatid10);
if (GUI.Button (Rect (bredde*70,hoejde*90,bredde*20,hoejde*5), "Åbn")) {
load10 ();
tab = 1;
slot = 10;
}

GUI.EndScrollView ();

}


else if(tab == 12){
customGuiStyle.label.fontSize = 4*hoejde;
GUI.Label (Rect (bredde*15,hoejde*15,bredde*80,hoejde*15), "Vil du gemme dine data?");
customGuiStyle.label.fontSize = 2.3*hoejde;

if (GUI.Button (Rect (bredde*30,hoejde*30,bredde*40,hoejde*7), "Gem")) {
gemforside ();
}

if (GUI.Button (Rect (bredde*30,hoejde*50,bredde*40,hoejde*7), "Gem ikke")) {
ryd ();
tab = 0;
}

if (GUI.Button (Rect (bredde*30,hoejde*70,bredde*40,hoejde*7), "Annuler")) {
tab = 1;
}


}

else if(tab == 13){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Gem målinger");
if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Tilbage")) {
tab = 1;
}

scrollPosition3 = GUI.BeginScrollView (Rect (0,hoejde*15,bredde*100,hoejde*65),
scrollPosition3, Rect (0, 0, bredde*95, hoejde * 95));

GUI.Label (new Rect (bredde*13,hoejde*1,bredde*50,hoejde*7), datanavn1 + "  " + datatid1);
if (GUI.Button (Rect (bredde*70,hoejde*0,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem1();
slot = 1;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*11,bredde*50,hoejde*7), datanavn2 + "  " + datatid2);
if (GUI.Button (Rect (bredde*70,hoejde*10,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem2();
slot = 2;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*21,bredde*50,hoejde*7), datanavn3 + "  " + datatid3);
if (GUI.Button (Rect (bredde*70,hoejde*20,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem3();
slot = 3;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*31,bredde*50,hoejde*7), datanavn4 + "  " + datatid4);
if (GUI.Button (Rect (bredde*70,hoejde*30,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem4();
slot = 4;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*41,bredde*50,hoejde*7), datanavn5 + "  " + datatid5);
if (GUI.Button (Rect (bredde*70,hoejde*40,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem5();
slot = 5;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*51,bredde*50,hoejde*7), datanavn6 + "  " + datatid6);
if (GUI.Button (Rect (bredde*70,hoejde*50,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem6();
slot = 6;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*61,bredde*50,hoejde*7), datanavn7 + "  " + datatid7);
if (GUI.Button (Rect (bredde*70,hoejde*60,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem7();
slot = 7;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*71,bredde*50,hoejde*7), datanavn8 + "  " + datatid8);
if (GUI.Button (Rect (bredde*70,hoejde*70,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem8();
slot = 8;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*81,bredde*50,hoejde*7), datanavn9 + "  " + datatid9);
if (GUI.Button (Rect (bredde*70,hoejde*80,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem9();
slot = 9;
tab = 1;
}
}
GUI.Label (new Rect (bredde*13,hoejde*91,bredde*50,hoejde*7), datanavn10 + "  " + datatid10);
if (GUI.Button (Rect (bredde*70,hoejde*90,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem10();
slot = 10;
tab = 1;
}
}
GUI.EndScrollView ();

}

else if(tab == 14){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Gem målinger");
if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Tilbage")) {
tab = 1;
}

scrollPosition3 = GUI.BeginScrollView (Rect (0,hoejde*15,bredde*100,hoejde*65),
scrollPosition3, Rect (0, 0, bredde*95, hoejde * 95));


GUI.Label (new Rect (bredde*13,hoejde*1,bredde*50,hoejde*7), datanavn1 + "  " + datatid1);
if (GUI.Button (Rect (bredde*70,hoejde*0,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem1();
slot = 1;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*11,bredde*50,hoejde*7), datanavn2 + "  " + datatid2);
if (GUI.Button (Rect (bredde*70,hoejde*10,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem2();
slot = 2;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*21,bredde*50,hoejde*7), datanavn3 + "  " + datatid3);
if (GUI.Button (Rect (bredde*70,hoejde*20,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem3();
slot = 3;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*31,bredde*50,hoejde*7), datanavn4 + "  " + datatid4);
if (GUI.Button (Rect (bredde*70,hoejde*30,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem4();
slot = 4;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*41,bredde*50,hoejde*7), datanavn5 + "  " + datatid5);
if (GUI.Button (Rect (bredde*70,hoejde*40,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem5();
slot = 5;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*51,bredde*50,hoejde*7), datanavn6 + "  " + datatid6);
if (GUI.Button (Rect (bredde*70,hoejde*50,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem6();
slot = 6;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*61,bredde*50,hoejde*7), datanavn7 + "  " + datatid7);
if (GUI.Button (Rect (bredde*70,hoejde*60,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem7();
slot = 7;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*71,bredde*50,hoejde*7), datanavn8 + "  " + datatid8);
if (GUI.Button (Rect (bredde*70,hoejde*70,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem8();
slot = 8;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*81,bredde*50,hoejde*7), datanavn9 + "  " + datatid9);
if (GUI.Button (Rect (bredde*70,hoejde*80,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem9();
slot = 9;
tab = 0;
ryd ();
}
}
GUI.Label (new Rect (bredde*13,hoejde*91,bredde*50,hoejde*7), datanavn10 + "  " + datatid10);
if (GUI.Button (Rect (bredde*70,hoejde*90,bredde*20,hoejde*5), "Gem")) {
if (go2 != "" && go2 != " "){
gem10();
slot = 10;
tab = 0;
ryd ();
}
}

GUI.EndScrollView ();

}

//About
else if(tab == 15){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Om applikationen");

scrollPosition = GUI.BeginScrollView (Rect (0,hoejde*12,bredde*100,hoejde*74),
scrollPosition, Rect (0, 0, bredde*95, hoejde*105));
GUI.Label (new Rect (bredde*7,hoejde*2,bredde*86,hoejde*100), "Live Speed Analysis er et softwareværktøj der benyttes til hastighedsbestemmelse af køretøjer samt sammenligning af hastighedsmålinger. Hastighedsbestemmelsen foregår vha. den såkaldte spejlmetode, som der kræves kendskab til for at kunne benytte applikationen. Der henvises til Hjælp-funktionen på de enkelte faner for yderligere information omkring indholdet af applikationen. \n \nApplikationen er udarbejdet som del af 6. semesters bachelorprojektet på uddannelsen Vej og Trafik ved Aalborg Universitet i perioden 1. februar 2013 til 6. juni 2013, hvorfor der til applikationen også medfølger en projektrapport. Rapporten kan findes, ved at søge på ”Hastighedsbestemmelse ved spejlmetoden - metodeforbedring gennem softwareudvikling” på projektbiblioteket for Aalborg Universitet, på hjemmesiden; http://projekter.aau.dk/projekter/ \n\nProjektet er udarbejdet af: \n\nAnders Kusk - akusk10@student.aau.dk \n\nAsbjørn Halskov-Sørensen - ahalsk10@student.aau.dk \n\nPeter Muhlig Christensen - pmch10@student.aau.dk \n\n\nApplikationen er beskyttet under creative commons license: http://creativecommons.org/licenses/by-nc-nd/2.5/dk/");
GUI.EndScrollView ();

if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Tilbage")) {
tab = 0;
}
}

//GPS og tid
else if(tab == 16){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Mere data");
if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Tilbage")) {
tab = 10;
}


GUI.Label (Rect (bredde*2,hoejde*14,bredde*25,hoejde*15), "Observation #");
GUI.Label (Rect (bredde*30,hoejde*14,bredde*25,hoejde*15), "Tid");
GUI.Label (Rect (bredde*70,hoejde*14,bredde*30,hoejde*15), "Koordinater");

scrollPosition3 = GUI.BeginScrollView (Rect (0,hoejde*20,bredde*100,hoejde*65),
scrollPosition3, Rect (0, 0, bredde*95, antal * hoejde * 6));

var datahoejde2 = antal * hoejde*6 - hoejde * 5;

for(var nn = 0; nn < antal; nn++){
var nr2 = nn + 1;
var vistid = tidlogarr[nn];
var visgpslat = gpslogarrlat[nn];
var visgpslong = gpslogarrlong[nn];
GUI.Label (new Rect (bredde*5,datahoejde2,bredde*35,hoejde*5), nr2 + "");
GUI.Label (new Rect (bredde*15,datahoejde2,bredde*35,hoejde*5), vistid + "");
GUI.Label (new Rect (bredde*55,datahoejde2,bredde*45,hoejde*5), visgpslat + " // " + visgpslong);
datahoejde2 = datahoejde2 - hoejde*6;
}

GUI.EndScrollView ();
}

else if(tab == 17){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Din GPS er ikke slået til");
GUI.Label (new Rect (bredde*10,hoejde*30,bredde*80,hoejde*20), "Målinger foretaget uden GPS slået til vil ikke kunne uploades til livespeedanalysis.aau.dk. GPS slåes til under status baren, øverst på telfonen. Det skal dog bemærkes at det stadig er muligt at foretage målinger uden GPS slået til.");

if (GUI.Button (Rect (bredde*40,hoejde*55,bredde*20,hoejde*7), "Ok")) {
tab = 0;
}

}

else if(tab == 18){
GUI.Box (Rect (bredde * 5,hoejde*5,bredde * 90,hoejde * 5), "Upload måling");

GUI.Label (new Rect (bredde*10,hoejde*30,bredde*50,hoejde*20), "Grundlæggende oplysninger:");

if (gokontrolvar == 1) {
GUI.contentColor = Color.green;
GUI.Label (new Rect (bredde*70,hoejde*30,bredde*20,hoejde*20), "Ok");
}

else{
GUI.contentColor = Color.red;
GUI.Label (new Rect (bredde*70,hoejde*30,bredde*20,hoejde*20), "Ikke ok");
}

GUI.contentColor = Color.white;

if (gokontrolvar == 1) {

GUI.Label (new Rect (bredde*10,hoejde*35,bredde*50,hoejde*20), "Inputs:");
if (inputkontrolvar == 1) {
GUI.contentColor = Color.green;
GUI.Label (new Rect (bredde*70,hoejde*35,bredde*20,hoejde*20), "Ok");
}

else{
GUI.contentColor = Color.red;
GUI.Label (new Rect (bredde*70,hoejde*35,bredde*20,hoejde*20), "Ikke ok");
}
GUI.contentColor = Color.white;

if(inputkontrolvar == 1){

GUI.Label (new Rect (bredde*10,hoejde*40,bredde*50,hoejde*20), "Datasæt:");
if(normaltest == 1){
GUI.contentColor = Color.green;
GUI.Label (new Rect (bredde*70,hoejde*40,bredde*20,hoejde*20), "Ok");

}
else{
if (antal < 20) {
GUI.contentColor = Color.red;
GUI.Label (new Rect (bredde*70,hoejde*40,bredde*20,hoejde*20), "Ikke nok data");
}
else{
GUI.contentColor = Color.red;
GUI.Label (new Rect (bredde*70,hoejde*40,bredde*20,hoejde*20), "Ikke ok");
}
}
GUI.contentColor = Color.white;

if(normaltest == 1){
GUI.Label (new Rect (bredde*10,hoejde*45,bredde*50,hoejde*20), "GPS koordinater:");
if(gpslogcheck == 0){
GUI.contentColor = Color.green;
GUI.Label (new Rect (bredde*70,hoejde*45,bredde*20,hoejde*20), "Ok");
GUI.contentColor = Color.white;

if (go11 == "") {
if (GUI.Button (Rect (bredde*25,hoejde*78,bredde*50,hoejde*7), "Upload til server")) {
uploadToServer();
}
}
else {
GUI.Label (new Rect (bredde*45,hoejde*70,bredde*30,hoejde*20), "Denne måling er allerede blevet uploadet" );
}

//GUI.Label (new Rect (bredde*70,hoejde*55,bredde*20,hoejde*20), "Upload: " + uploadstatus);

}
else{
GUI.contentColor = Color.red;
GUI.Label (new Rect (bredde*70,hoejde*45,bredde*20,hoejde*20), "Ikke ok");
}
GUI.contentColor = Color.white;

}
}
}

GUI.Label (new Rect (bredde*25,hoejde*55,bredde*50,hoejde*20), "Længde inputstring: " + fisk3);
GUI.Label (new Rect (bredde*25,hoejde*60,bredde*50,hoejde*20), "Længde: " + fisk2);
GUI.Label (new Rect (bredde*25,hoejde*65,bredde*50,hoejde*20), "Fejl: " + fisk);
if (GUI.Button (Rect (bredde*25,hoejde*78,bredde*50,hoejde*7), "Upload til server")) {
uploadToServer();
}

GUI.Label (new Rect (bredde*45,hoejde*70,bredde*30,hoejde*20), "Upload: " + uploadstatus);

if (GUI.Button (Rect (bredde*25,hoejde*90,bredde*50,hoejde*7), "Tilbage")) {
tab = 1;
uploadstatus = "";
}

}

}

var input1kontrol = 0.0; //Måleafstand
var input2kontrol = 0.0; //Hastighedsgrænse
var input3kontrol = 0.0; //Margin
var input4kontrol = 0.0; //Fraktil

function inputkontrol () {

inputkontrolvar = 0;
input1 = input1.Replace(",","."); 
input2 = input2.Replace(",","."); 
input3 = input3.Replace(",","."); 
input4 = input4.Replace(",","."); 

if (float.TryParse(input1, afstand) && afstand > 0.0){
input1kontrol = 1;
}
else {
input1 = "";
input1kontrol = 0;
}
if (float.TryParse(input2, fartgraense) && fartgraense > 0.0){
input2kontrol = 1;
}
else {
input2 = "";
input2kontrol = 0;
}
if (float.TryParse(input3, hastmargin)){
input3kontrol = 1;
}
else {
input3 = "";
input3kontrol = 0;
}
if (float.TryParse(input4, fraktilstr) && fraktilstr >= 0.1 && fraktilstr <= 99.9){
input4kontrol = 1;
}
else {
input4 = "";
input4kontrol = 0;
}

if (input1kontrol == 1 && input2kontrol == 1 && input3kontrol == 1 && input4kontrol == 1){
inputkontrolvar = 1;
}
else {
inputkontrolvar = 0;
}

float.TryParse(input5, konfidensniveau);
float.TryParse(input6, signifikansniveauchi);
float.TryParse(input7, signifikansniveauhyp);

}

    
         
function tidligeredatakontrol (){
tidligeredatakontrolvar = 0;
input8 = input8.Replace(",","."); 
input9 = input9.Replace(",","."); 
input10 = input10.Replace(",","."); 
if (float.TryParse(input8, preantal) && preantal > 0.0){
tidligeredatakontrolvar = tidligeredatakontrolvar + 1;
if (preantal > 1001){
preantal = 1000;
input8 = "1000";
}
}
else{
tidligeredatakontrolvar = tidligeredatakontrolvar - 1;
input8 = "";
}
if (float.TryParse(input9, pregnms) && pregnms > 0.0){
tidligeredatakontrolvar = tidligeredatakontrolvar + 1;
}
else{
input9 = "";
tidligeredatakontrolvar = tidligeredatakontrolvar - 1;
}
if (float.TryParse(input10, prespred) && prespred > 0.0){
tidligeredatakontrolvar = tidligeredatakontrolvar + 1;
}
else{
input10 = "";
tidligeredatakontrolvar = tidligeredatakontrolvar - 1;
}
}

var gokontrolvar = 0.0; //Tjek for funktion
var go13kontrol = 0.0; //Dato
var go2kontrol = 0.0; //Filnavn
var go4kontrol = 0.0; //Vej
var hejkontrol = 0.0; //Køretøjstype

function gokontrol () {

if (go13 != "" && go2 != "" && go4 != "" && hej != "Vælg"){
gokontrolvar = 1;
}
else {
gokontrolvar = 0;;
}

if (go13 != ""){
go13kontrol = 1;
}
else{
go13kontrol = 0;
}

if (go2 != ""){
go2kontrol = 1;
}
else{
go2kontrol = 0;
}

if (go4 != ""){
go4kontrol = 1;
}
else{
go4kontrol = 0;
}

if (hej != "Vælg"){
hejkontrol = 1;
}
else{
hejkontrol = 0;
}

}     


function bestemfart () {
fartarr.Clear();
for(var n = 0; n < antal; n++){
farttemp = tidarr[n];
fart = Mathf.Round((afstand/farttemp)*360f) / 100f;
fartarr[n] = fart;
}
}


function summer () {
sortarr = new Array (fartarr);
sortarr = sortarr.Sort();
sum = 0;
gnms = 0;
for(var n = 0; n < antal; n++){
	sumtemp = fartarr[n];
    sum = sum + sumtemp;
    }
gnms = Mathf.Round((sum / antal) * 100f) / 100f;
fartmin = sortarr[0];
fartmax = sortarr[antal-1];
}


function spredning () {
if(antal > 1){
xi2 = 0;
for(var n = 0; n < antal; n++){
	xitemp = fartarr[n];
	xi2 = Mathf.Pow(xitemp - gnms, 2) + xi2;
    }	
    spred = Mathf.Sqrt(xi2 / (antal - 1));
    visspred = Mathf.Round(spred * 100f) / 100f;
}
else{
visspred = 0.0;
    }    
}

function chitest () {
if (antal > 19){
antalinterval = 1 + 1.8 * Mathf.Log10(antal) * Mathf.Log10(antal);
antalinterval = Mathf.Round(antalinterval);
chifrihedsgrader = antalinterval - 3;

delintervalarr.Clear();
for(var n = 0; n < antalinterval; n++){
delintervalarr[n] = n + 1;
}

for(var n2 = 0; n2 < antalinterval; n2++){
tempinterval = delintervalarr[n2];
tempinterval = tempinterval * 1000 / antalinterval;
oensketfraktilarr[n2] = tempinterval;
}

for(var n3 = 0; n3 < antalinterval; n3++){
aflaesningnedarr[n3] = Mathf.Floor(oensketfraktilarr[n3]);
aflaesningoparr[n3] = Mathf.Ceil(oensketfraktilarr[n3]);
tempaflaesningned = aflaesningnedarr[n3];
tempinterpolation = oensketfraktilarr[n3];
tempinterpolation = tempinterpolation - tempaflaesningned;
interpolationsdeci1larr[n3] = tempinterpolation;
}


zvaerdifraktil.Clear();
for(var n4 = 0; n4 < antalinterval; n4++){
if (n4 < antalinterval - 1){
chitemp1 = aflaesningoparr[n4];
chitemp2 = invnormalarr[chitemp1 -1];
chitemp3 = aflaesningnedarr[n4];
chitemp3 = invnormalarr[chitemp3 - 1];
chitemp4 = interpolationsdeci1larr[n4];
chitemp5 = (chitemp2 - chitemp3) * chitemp4 + chitemp3;
zvaerdifraktil[n4] = chitemp5;
}
else{
zvaerdifraktil[antalinterval-1] = 20;
}
}


oevregraensearr.Clear();
for(var n5 = 0; n5 < antalinterval; n5++){
chitemp1 = zvaerdifraktil[n5];
chitemp2 = chitemp1 * spred + gnms;
oevregraensearr[n5] = chitemp2;
}

nedregraensearr.Clear();
for(var n6 = 0; n6 < antalinterval; n6++){
if (n6 == 0){
nedregraensearr[0] = 0; }
else{
nedregraensearr[n6] = oevregraensearr[n6 - 1];
}
}

antaliintervalarr.Clear();
for(var n7 = 0; n7 < antalinterval; n7++){
chitemp1 = nedregraensearr[n7];
chitemp2 = oevregraensearr[n7];
chitemp4 = 0;
for(var n8 = 0; n8 < antal; n8++){
chitemp3 = fartarr[n8];
if(chitemp3 > chitemp1 && chitemp3 <= chitemp2){
chitemp4++;
}
}
antaliintervalarr[n7] = chitemp4;
}

forventetfrekvens = (1.0/antalinterval)*antal;

oieiarr.Clear();
sumoiei = 0.0;
for(var n9 = 0; n9 < antalinterval; n9++){
chitemp1 = antaliintervalarr[n9];
chitemp2 = (Mathf.Pow(chitemp1 - forventetfrekvens,2))/forventetfrekvens;
oieiarr[n9] = chitemp2;
sumoiei = sumoiei + chitemp2;
}

if (signifikansniveauchi == 0.005){
forkastgraense = chi005arr[chifrihedsgrader - 1];
}
else if(signifikansniveauchi == 0.01){
forkastgraense = chi01arr[chifrihedsgrader - 1];
}
else if(signifikansniveauchi == 0.025){
forkastgraense = chi025arr[chifrihedsgrader - 1];
}
else if(signifikansniveauchi == 0.05){
forkastgraense = chi05arr[chifrihedsgrader - 1];
}
else if(signifikansniveauchi == 0.1){
forkastgraense = chi1arr[chifrihedsgrader - 1];
}
else if(signifikansniveauchi == 0.25){
forkastgraense = chi25arr[chifrihedsgrader - 1];
}

if(antal > 19){
if(sumoiei <= forkastgraense && forventetfrekvens >= 5){
testbesked = "Ja";
normaltest = 1;
}
else{
testbesked = "Nej";
normaltest = 0;
} 
}
else{
testbesked = "Ikke nok data";
normaltest = 0;
}

}
else{
testbesked = "Ikke nok data";
normaltest = 0;
}
}

function test() {
fraktilstr = fraktilstr / 100.0;
testtemp1 = invnormalarr[fraktilstr * 1000.0 - 1];
normfraktilvaerdi = spred * testtemp1 + gnms;
overraekke = ((Mathf.Round(((fartgraense + hastmargin - gnms) / spred) * 100f)) / 100f) * 100 + 490;

if(overraekke >= 0 && overraekke <= 980){
testtemp1 = normalarr[overraekke];
overskridelsesandel = (1 - testtemp1)*100.0;
}
else if(overraekke < 0){
overskridelsesandel = 100.0;
}
else{
overskridelsesandel = 0.0;
}

alfakonf = (100.0 - konfidensniveau) / 200.0;

if (alfakonf == 0.005){
kritisktalfa = t005arr[antal - 2];
}
else if(alfakonf == 0.01){
kritisktalfa = t01arr[antal - 2];
}
else if(alfakonf == 0.025){
kritisktalfa = t025arr[antal - 2];
}
else if(alfakonf == 0.05){
kritisktalfa = t05arr[antal - 2];
}
else if(alfakonf == 0.1){
kritisktalfa = t1arr[antal - 2];
}
else if(alfakonf == 0.25){
kritisktalfa = t25arr[antal - 2];
}

midnedre = gnms - (kritisktalfa * spred / Mathf.Sqrt(antal));
midoevre = gnms + (kritisktalfa * spred / Mathf.Sqrt(antal));

testtemp1 = invnormalarr[fraktilstr * 1000.0 - 1];
normfraktilvaerdinedre = spred * testtemp1 + midnedre;
normfraktilvaerdioevre = spred * testtemp1 + midoevre;

overraekkenedre = ((Mathf.Round(((fartgraense + hastmargin - midnedre) / spred) * 100f)) / 100f) * 100 + 490;

if(overraekkenedre >= 0 && overraekkenedre <= 980){
testtemp1 = normalarr[overraekkenedre];
overskridelsesandelnedre = (1 - testtemp1)*100.0;
}
else if(overraekkenedre < 0){
overskridelsesandelnedre = 100.0;
}
else{
overskridelsesandelnedre = 0.0;
}

overraekkeoevre = ((Mathf.Round(((fartgraense + hastmargin - midoevre) / spred) * 100f)) / 100f) * 100 + 490;

if(overraekkeoevre >= 0 && overraekkeoevre <= 980){
testtemp1 = normalarr[overraekkeoevre];
overskridelsesandeloevre = (1 - testtemp1)*100.0;
}
else if(overraekkeoevre < 0){
overskridelsesandeloevre = 100.0;
}
else{
overskridelsesandeloevre = 0.0;
}

visnormfraktilvaerdi =  Mathf.Round(normfraktilvaerdi * 100f) / 100f;
visoverskridelsesandel =  Mathf.Round(overskridelsesandel * 100f) / 100f;
vismidnedre =  Mathf.Round(midnedre * 100f) / 100f;
vismidoevre =  Mathf.Round(midoevre * 100f) / 100f;

test12t = (gnms - fartgraense) / (spred / Mathf.Sqrt(antal));

if ((signifikansniveauhyp / 2) == 0.005){
test12alfa = t005arr[antal - 2];
}
else if((signifikansniveauhyp / 2) == 0.01){
test12alfa = t01arr[antal - 2];
}
else if((signifikansniveauhyp / 2) == 0.025){
test12alfa = t025arr[antal - 2];
}
else if((signifikansniveauhyp / 2) == 0.05){
test12alfa = t05arr[antal - 2];
}
else if((signifikansniveauhyp / 2) == 0.1){
test12alfa = t1arr[antal - 2];
}

if(gnms >= fartgraense){
if(test12t <= test12alfa){
test1 = 2;
}
else{
test1 = 1;
}
}
else{
test1 = 0;
}

if(gnms < fartgraense){
if(test12t >= - test12alfa){
test2 = 2;
}
else{
test2 = 1;
}
}
else{
test2 = 0;
}

if(test1 == 1){
fartgraensetestvar = 1;
fartgraensetest = "Hastigheden er signifikant større end hastighedsgrænsen";
}
else if(test2 == 1){
fartgraensetestvar = 2;
fartgraensetest = "Hastigheden er signifikant mindre end hastighedsgrænsen";
}
else{
fartgraensetestvar = 3;
fartgraensetest = "Hastigheden er ikke signifikant forskellig fra hastighedsgrænsen";
}

if(tidligeredatakontrolvar == 3){

if (alfakonf == 0.005){
kritisktalfa1 = t005arr[antal + preantal - 3];
}
else if(alfakonf == 0.01){
kritisktalfa1 = t01arr[antal + preantal - 3];
}
else if(alfakonf == 0.025){
kritisktalfa1 = t025arr[antal + preantal - 3];
}
else if(alfakonf == 0.05){
kritisktalfa1 = t05arr[antal + preantal - 3];
}
else if(alfakonf == 0.1){
kritisktalfa1 = t1arr[antal + preantal - 3];
}
else if(alfakonf == 0.25){
kritisktalfa1 = t25arr[antal + preantal - 3];
}

gnmsforskel = gnms - pregnms;

sp = Mathf.Sqrt(((antal - 1) * spred * spred + (preantal - 1.0) * prespred * prespred) / (antal + preantal - 2));

fornedre = (gnms - pregnms) - kritisktalfa1 * Mathf.Sqrt(sp * sp / antal + sp * sp / preantal);
foroevre = (gnms - pregnms) + kritisktalfa1 * Mathf.Sqrt(sp * sp / antal + sp * sp / preantal);

visfornedre =  Mathf.Round(fornedre * 100f) / 100f;
visforoevre =  Mathf.Round(foroevre * 100f) / 100f;
visgnmsforskel = Mathf.Round(gnmsforskel * 100f) / 100f;


if ((signifikansniveauhyp / 2) == 0.005){
test34alfa = t005arr[antal + preantal - 3];
}
else if((signifikansniveauhyp / 2) == 0.01){
test34alfa = t01arr[antal + preantal - 3];
}
else if((signifikansniveauhyp / 2) == 0.025){
test34alfa = t025arr[antal + preantal - 3];
}
else if((signifikansniveauhyp / 2) == 0.05){
test34alfa = t05arr[antal + preantal - 3];
}
else if((signifikansniveauhyp / 2) == 0.1){
test34alfa = t1arr[antal + preantal - 3];
}

test34t = (gnms - pregnms) / Mathf.Sqrt(sp * sp / antal + sp * sp / preantal);

if(gnms >= pregnms){
if(test34t <= test34alfa){
test3 = 2;
}
else{
test3 = 1;
}
}

if(gnms < pregnms){
if(test34t >= - test34alfa){
test4 = 2;
}
else{
test4 = 1;
}
}

if(test3 == 1){
forskelstestvar = 1;
forskelstest = "Hastigheden er signifikant større end tidligere måling";
}
else if(test4 == 1){
forskelstestvar = 2;
forskelstest = "Hastigheden er signifikant mindre end tidligere måling";
}
else{
forskelstestvar = 3;
forskelstest = "Hastigheden er ikke signifikant forskellig fra tidligere måling";
}

}
else{
visfornedre = 0.0;
visforoevre = 0.0;
visgnmsforskel = 0.0;
forskelstest = "";
}
}



function beregn1 () {
antal = tidarr.length;

if (!(antal > 0)) {
	tidarr.Add(0.0);
}

if (!(tidarr[0] == 0.0)){
antal = tidarr.length;
bestemfart ();
summer ();
spredning ();
chitest ();
senestehastighed = fartarr[antal - 1];
}
else {
antal = 0;
tidarr.Clear();
fartmin = 0.0;
fartmax = 0.0;
gnms = 0.0;
visspred = 0.0;
senestehastighed = 0.0;
}
}


function beregn2 () {
beregn1();
test();
}

function beregn3 () {

}

function gem1 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger1 = new String[14];
grundoplysninger1[0] = go1;
grundoplysninger1[1] = go2;
grundoplysninger1[2] = go3;
grundoplysninger1[3] = go4;
grundoplysninger1[4] = go5;
grundoplysninger1[5] = go6;
grundoplysninger1[6] = go7;
grundoplysninger1[7] = go8;
grundoplysninger1[8] = go9;
grundoplysninger1[9] = go10;
grundoplysninger1[10] = go11;
grundoplysninger1[11] = go12;
grundoplysninger1[12] = hej;
grundoplysninger1[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger1", grundoplysninger1);
inputs1 = new String[10];
inputs1[0] = input1;
inputs1[1] = input2;
inputs1[2] = input3;
inputs1[3] = input4;
inputs1[4] = input5;
inputs1[5] = input6;
inputs1[6] = input7;
inputs1[7] = input8;
inputs1[8] = input9;
inputs1[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs1", inputs1);
noegletal1 = new float[3];
noegletal1[0] = antal;
noegletal1[1] = gnms;
noegletal1[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal1", noegletal1);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers1", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr1", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat1", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong1", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers1", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr1", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat1", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong1", gpsloglong2);
}
}
}

function gem2 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger2 = new String[14];
grundoplysninger2[0] = go1;
grundoplysninger2[1] = go2;
grundoplysninger2[2] = go3;
grundoplysninger2[3] = go4;
grundoplysninger2[4] = go5;
grundoplysninger2[5] = go6;
grundoplysninger2[6] = go7;
grundoplysninger2[7] = go8;
grundoplysninger2[8] = go9;
grundoplysninger2[9] = go10;
grundoplysninger2[10] = go11;
grundoplysninger2[11] = go12;
grundoplysninger2[12] = hej;
grundoplysninger2[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger2", grundoplysninger2);
inputs2 = new String[10];
inputs2[0] = input1;
inputs2[1] = input2;
inputs2[2] = input3;
inputs2[3] = input4;
inputs2[4] = input5;
inputs2[5] = input6;
inputs2[6] = input7;
inputs2[7] = input8;
inputs2[8] = input9;
inputs2[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs2", inputs2);
noegletal2 = new float[3];
noegletal2[0] = antal;
noegletal2[1] = gnms;
noegletal2[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal2", noegletal2);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers2", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr2", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat2", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong2", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers2", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr2", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat2", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong2", gpsloglong2);
}
}
}

function gem3 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger3 = new String[14];
grundoplysninger3[0] = go1;
grundoplysninger3[1] = go2;
grundoplysninger3[2] = go3;
grundoplysninger3[3] = go4;
grundoplysninger3[4] = go5;
grundoplysninger3[5] = go6;
grundoplysninger3[6] = go7;
grundoplysninger3[7] = go8;
grundoplysninger3[8] = go9;
grundoplysninger3[9] = go10;
grundoplysninger3[10] = go11;
grundoplysninger3[11] = go12;
grundoplysninger3[12] = hej;
grundoplysninger3[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger3", grundoplysninger3);
inputs3 = new String[10];
inputs3[0] = input1;
inputs3[1] = input2;
inputs3[2] = input3;
inputs3[3] = input4;
inputs3[4] = input5;
inputs3[5] = input6;
inputs3[6] = input7;
inputs3[7] = input8;
inputs3[8] = input9;
inputs3[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs3", inputs3);
noegletal3 = new float[3];
noegletal3[0] = antal;
noegletal3[1] = gnms;
noegletal3[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal3", noegletal3);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers3", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr3", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat3", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong3", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers3", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr3", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat3", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong3", gpsloglat2);
}
}
}

function gem4 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger4 = new String[14];
grundoplysninger4[0] = go1;
grundoplysninger4[1] = go2;
grundoplysninger4[2] = go3;
grundoplysninger4[3] = go4;
grundoplysninger4[4] = go5;
grundoplysninger4[5] = go6;
grundoplysninger4[6] = go7;
grundoplysninger4[7] = go8;
grundoplysninger4[8] = go9;
grundoplysninger4[9] = go10;
grundoplysninger4[10] = go11;
grundoplysninger4[11] = go12;
grundoplysninger4[12] = hej;
grundoplysninger4[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger4", grundoplysninger4);
inputs4 = new String[10];
inputs4[0] = input1;
inputs4[1] = input2;
inputs4[2] = input3;
inputs4[3] = input4;
inputs4[4] = input5;
inputs4[5] = input6;
inputs4[6] = input7;
inputs4[7] = input8;
inputs4[8] = input9;
inputs4[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs4", inputs4);
noegletal4 = new float[3];
noegletal4[0] = antal;
noegletal4[1] = gnms;
noegletal4[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal4", noegletal4);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers4", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr4", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat4", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong4", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers4", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr4", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat4", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong4", gpsloglong2);
}
}
}

function gem5 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger5 = new String[14];
grundoplysninger5[0] = go1;
grundoplysninger5[1] = go2;
grundoplysninger5[2] = go3;
grundoplysninger5[3] = go4;
grundoplysninger5[4] = go5;
grundoplysninger5[5] = go6;
grundoplysninger5[6] = go7;
grundoplysninger5[7] = go8;
grundoplysninger5[8] = go9;
grundoplysninger5[9] = go10;
grundoplysninger5[10] = go11;
grundoplysninger5[11] = go12;
grundoplysninger5[12] = hej;
grundoplysninger5[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger5", grundoplysninger5);
inputs5 = new String[10];
inputs5[0] = input1;
inputs5[1] = input2;
inputs5[2] = input3;
inputs5[3] = input4;
inputs5[4] = input5;
inputs5[5] = input6;
inputs5[6] = input7;
inputs5[7] = input8;
inputs5[8] = input9;
inputs5[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs5", inputs5);
noegletal5 = new float[3];
noegletal5[0] = antal;
noegletal5[1] = gnms;
noegletal5[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal5", noegletal5);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers5", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr5", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat5", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong5", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers5", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr5", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat5", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong5", gpsloglong2);
}
}
}

function gem6 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger6 = new String[14];
grundoplysninger6[0] = go1;
grundoplysninger6[1] = go2;
grundoplysninger6[2] = go3;
grundoplysninger6[3] = go4;
grundoplysninger6[4] = go5;
grundoplysninger6[5] = go6;
grundoplysninger6[6] = go7;
grundoplysninger6[7] = go8;
grundoplysninger6[8] = go9;
grundoplysninger6[9] = go10;
grundoplysninger6[10] = go11;
grundoplysninger6[11] = go12;
grundoplysninger6[12] = hej;
grundoplysninger6[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger6", grundoplysninger6);
inputs6 = new String[10];
inputs6[0] = input1;
inputs6[1] = input2;
inputs6[2] = input3;
inputs6[3] = input4;
inputs6[4] = input5;
inputs6[5] = input6;
inputs6[6] = input7;
inputs6[7] = input8;
inputs6[8] = input9;
inputs6[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs6", inputs6);
noegletal6 = new float[3];
noegletal6[0] = antal;
noegletal6[1] = gnms;
noegletal6[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal6", noegletal6);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers6", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr6", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat6", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong6", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers6", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr6", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat6", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong6", gpsloglong2);
}
}
}

function gem7 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger7 = new String[14];
grundoplysninger7[0] = go1;
grundoplysninger7[1] = go2;
grundoplysninger7[2] = go3;
grundoplysninger7[3] = go4;
grundoplysninger7[4] = go5;
grundoplysninger7[5] = go6;
grundoplysninger7[6] = go7;
grundoplysninger7[7] = go8;
grundoplysninger7[8] = go9;
grundoplysninger7[9] = go10;
grundoplysninger7[10] = go11;
grundoplysninger7[11] = go12;
grundoplysninger7[12] = hej;
grundoplysninger7[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger7", grundoplysninger7);
inputs7 = new String[10];
inputs7[0] = input1;
inputs7[1] = input2;
inputs7[2] = input3;
inputs7[3] = input4;
inputs7[4] = input5;
inputs7[5] = input6;
inputs7[6] = input7;
inputs7[7] = input8;
inputs7[8] = input9;
inputs7[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs7", inputs7);
noegletal7 = new float[3];
noegletal7[0] = antal;
noegletal7[1] = gnms;
noegletal7[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal7", noegletal7);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers7", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr7", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat7", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong7", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers7", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr7", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat7", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong7", gpsloglong2);
}
}
}

function gem8 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger8 = new String[14];
grundoplysninger8[0] = go1;
grundoplysninger8[1] = go2;
grundoplysninger8[2] = go3;
grundoplysninger8[3] = go4;
grundoplysninger8[4] = go5;
grundoplysninger8[5] = go6;
grundoplysninger8[6] = go7;
grundoplysninger8[7] = go8;
grundoplysninger8[8] = go9;
grundoplysninger8[9] = go10;
grundoplysninger8[10] = go11;
grundoplysninger8[11] = go12;
grundoplysninger8[12] = hej;
grundoplysninger8[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger8", grundoplysninger8);
inputs8 = new String[10];
inputs8[0] = input1;
inputs8[1] = input2;
inputs8[2] = input3;
inputs8[3] = input4;
inputs8[4] = input5;
inputs8[5] = input6;
inputs8[6] = input7;
inputs8[7] = input8;
inputs8[8] = input9;
inputs8[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs8", inputs8);
noegletal8 = new float[3];
noegletal8[0] = antal;
noegletal8[1] = gnms;
noegletal8[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal8", noegletal8);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers8", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr8", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat8", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong8", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers8", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr8", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat8", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong8", gpsloglong2);
}
}
}

function gem9 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger9 = new String[14];
grundoplysninger9[0] = go1;
grundoplysninger9[1] = go2;
grundoplysninger9[2] = go3;
grundoplysninger9[3] = go4;
grundoplysninger9[4] = go5;
grundoplysninger9[5] = go6;
grundoplysninger9[6] = go7;
grundoplysninger9[7] = go8;
grundoplysninger9[8] = go9;
grundoplysninger9[9] = go10;
grundoplysninger9[10] = go11;
grundoplysninger9[11] = go12;
grundoplysninger9[12] = hej;
grundoplysninger9[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger9", grundoplysninger9);
inputs9 = new String[10];
inputs9[0] = input1;
inputs9[1] = input2;
inputs9[2] = input3;
inputs9[3] = input4;
inputs9[4] = input5;
inputs9[5] = input6;
inputs9[6] = input7;
inputs9[7] = input8;
inputs9[8] = input9;
inputs9[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs9", inputs9);
noegletal9 = new float[3];
noegletal9[0] = antal;
noegletal9[1] = gnms;
noegletal9[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal9", noegletal9);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers9", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr9", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat9", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong9", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers9", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr9", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat9", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong9", gpsloglong2);
}
}
}

function gem10 () {
if (go2 != "" && go2 != " "){
go12 = System.DateTime.Now.ToString("HH:mm - dd/MM/yyyy");
grundoplysninger10 = new String[14];
grundoplysninger10[0] = go1;
grundoplysninger10[1] = go2;
grundoplysninger10[2] = go3;
grundoplysninger10[3] = go4;
grundoplysninger10[4] = go5;
grundoplysninger10[5] = go6;
grundoplysninger10[6] = go7;
grundoplysninger10[7] = go8;
grundoplysninger10[8] = go9;
grundoplysninger10[9] = go10;
grundoplysninger10[10] = go11;
grundoplysninger10[11] = go12;
grundoplysninger10[12] = hej;
grundoplysninger10[13] = go13;
PlayerPrefsX.SetStringArray ("oplysninger10", grundoplysninger10);
inputs10 = new String[10];
inputs10[0] = input1;
inputs10[1] = input2;
inputs10[2] = input3;
inputs10[3] = input4;
inputs10[4] = input5;
inputs10[5] = input6;
inputs10[6] = input7;
inputs10[7] = input8;
inputs10[8] = input9;
inputs10[9] = input10;
PlayerPrefsX.SetStringArray ("geminputs10", inputs10);
noegletal10 = new float[3];
noegletal10[0] = antal;
noegletal10[1] = gnms;
noegletal10[2] = visspred;
PlayerPrefsX.SetFloatArray ("gemnoegletal10", noegletal10);
if (tidarr.length > 0){
var values : float[] = tidarr.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("Numbers10", values);
var tidlog : String[] = tidlogarr.ToBuiltin(String) as String[];
PlayerPrefsX.SetStringArray ("tidlogarr10", tidlog);
var gpsloglat : float[] = gpslogarrlat.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlat10", gpsloglat);
var gpsloglong : float[] = gpslogarrlong.ToBuiltin(float) as float[];
PlayerPrefsX.SetFloatArray ("gpslogarrlong10", gpsloglong);
}
else {
var values2 : float[] = [0.0];
PlayerPrefsX.SetFloatArray ("Numbers10", values2);
var tidlog2 : String[] = [""];
PlayerPrefsX.SetStringArray ("tidlogarr10", tidlog2);
var gpsloglat2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlat10", gpsloglat2);
var gpsloglong2 : String[] = [""];
PlayerPrefsX.SetStringArray ("gpslogarrlong10", gpsloglong2);
}
}
}

function gem () {
if (slot == 0) {
tab = 13;
loadset ();
}
else if (slot == 1) {
gem1 ();
}
else if (slot == 2) {
gem2 ();
}
else if (slot == 3) {
gem3 ();
}
else if (slot == 4) {
gem4 ();
}
else if (slot == 5) {
gem5 ();
}
else if (slot == 6) {
gem6 ();
}
else if (slot == 7) {
gem7 ();
}
else if (slot == 8) {
gem8 ();
}
else if (slot == 9) {
gem9 ();
}
else if (slot == 10) {
gem10 ();
}
}

function autogem () {
if (slot == 0) {
//print("Du har ikke valgt slot");
}
else if (slot == 1) {
gem1 ();
}
else if (slot == 2) {
gem2 ();
}
else if (slot == 3) {
gem3 ();
}
else if (slot == 4) {
gem4 ();
}
else if (slot == 5) {
gem5 ();
}
else if (slot == 6) {
gem6 ();
}
else if (slot == 7) {
gem7 ();
}
else if (slot == 8) {
gem8 ();
}
else if (slot == 9) {
gem9 ();
}
else if (slot == 10) {
gem10 ();
}
}

function gemforside () {
if (slot == 0) {
tab = 14;
loadset ();
}
else if (slot == 1) {
gem1 ();
ryd ();
tab = 0;
}
else if (slot == 2) {
gem2 ();
ryd ();
tab = 0;
}
else if (slot == 3) {
gem3 ();
ryd ();
tab = 0;
}
else if (slot == 4) {
gem4 ();
ryd ();
tab = 0;
}
else if (slot == 5) {
gem5 ();
ryd ();
tab = 0;
}
else if (slot == 6) {
gem6 ();
ryd ();
tab = 0;
}
else if (slot == 7) {
gem7 ();
ryd ();
tab = 0;
}
else if (slot == 8) {
gem8 ();
ryd ();
tab = 0;
}
else if (slot == 9) {
gem9 ();
ryd ();
tab = 0;
}
else if (slot == 10) {
gem10 ();
ryd ();
tab = 0;
}
}

function load1 () {
grundoplysninger1 = new PlayerPrefsX.GetStringArray ("oplysninger1");
go1 = grundoplysninger1[0];
go2 = grundoplysninger1[1];
go3 = grundoplysninger1[2];
go4 = grundoplysninger1[3];
go5 = grundoplysninger1[4];
go6 = grundoplysninger1[5];
go7 = grundoplysninger1[6];
go8 = grundoplysninger1[7];
go9 = grundoplysninger1[8];
go10 = grundoplysninger1[9];
go11 = grundoplysninger1[10];
go12 = grundoplysninger1[11];
hej = grundoplysninger1[12];
go13 = grundoplysninger1[13];
inputs1 = new PlayerPrefsX.GetStringArray ("geminputs1");
input1 = inputs1[0];
input2 = inputs1[1];
input3 = inputs1[2];
input4 = inputs1[3];
input5 = inputs1[4];
input6 = inputs1[5];
input7 = inputs1[6];
input8 = inputs1[7];
input9 = inputs1[8];
input10 = inputs1[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers1");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr1");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat1");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong1");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load2 () {
grundoplysninger2 = new PlayerPrefsX.GetStringArray ("oplysninger2");
go1 = grundoplysninger2[0];
go2 = grundoplysninger2[1];
go3 = grundoplysninger2[2];
go4 = grundoplysninger2[3];
go5 = grundoplysninger2[4];
go6 = grundoplysninger2[5];
go7 = grundoplysninger2[6];
go8 = grundoplysninger2[7];
go9 = grundoplysninger2[8];
go10 = grundoplysninger2[9];
go11 = grundoplysninger2[10];
go12 = grundoplysninger2[11];
hej = grundoplysninger2[12];
go13 = grundoplysninger2[13];
inputs2 = new PlayerPrefsX.GetStringArray ("geminputs2");
input1 = inputs2[0];
input2 = inputs2[1];
input3 = inputs2[2];
input4 = inputs2[3];
input5 = inputs2[4];
input6 = inputs2[5];
input7 = inputs2[6];
input8 = inputs2[7];
input9 = inputs2[8];
input10 = inputs2[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers2");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr2");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat2");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong2");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load3 () {
grundoplysninger3 = new PlayerPrefsX.GetStringArray ("oplysninger3");
go1 = grundoplysninger3[0];
go2 = grundoplysninger3[1];
go3 = grundoplysninger3[2];
go4 = grundoplysninger3[3];
go5 = grundoplysninger3[4];
go6 = grundoplysninger3[5];
go7 = grundoplysninger3[6];
go8 = grundoplysninger3[7];
go9 = grundoplysninger3[8];
go10 = grundoplysninger3[9];
go11 = grundoplysninger3[10];
go12 = grundoplysninger3[11];
hej = grundoplysninger3[12];
go13 = grundoplysninger3[13];
inputs3 = new PlayerPrefsX.GetStringArray ("geminputs3");
input1 = inputs3[0];
input2 = inputs3[1];
input3 = inputs3[2];
input4 = inputs3[3];
input5 = inputs3[4];
input6 = inputs3[5];
input7 = inputs3[6];
input8 = inputs3[7];
input9 = inputs3[8];
input10 = inputs3[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers3");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr3");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat3");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong3");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load4 () {
grundoplysninger4 = new PlayerPrefsX.GetStringArray ("oplysninger4");
go1 = grundoplysninger4[0];
go2 = grundoplysninger4[1];
go3 = grundoplysninger4[2];
go4 = grundoplysninger4[3];
go5 = grundoplysninger4[4];
go6 = grundoplysninger4[5];
go7 = grundoplysninger4[6];
go8 = grundoplysninger4[7];
go9 = grundoplysninger4[8];
go10 = grundoplysninger4[9];
go11 = grundoplysninger4[10];
go12 = grundoplysninger4[11];
hej = grundoplysninger4[12];
go13 = grundoplysninger4[13];
inputs4 = new PlayerPrefsX.GetStringArray ("geminputs4");
input1 = inputs4[0];
input2 = inputs4[1];
input3 = inputs4[2];
input4 = inputs4[3];
input5 = inputs4[4];
input6 = inputs4[5];
input7 = inputs4[6];
input8 = inputs4[7];
input9 = inputs4[8];
input10 = inputs4[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers4");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr4");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat4");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong4");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load5 () {
grundoplysninger5 = new PlayerPrefsX.GetStringArray ("oplysninger5");
go1 = grundoplysninger5[0];
go2 = grundoplysninger5[1];
go3 = grundoplysninger5[2];
go4 = grundoplysninger5[3];
go5 = grundoplysninger5[4];
go6 = grundoplysninger5[5];
go7 = grundoplysninger5[6];
go8 = grundoplysninger5[7];
go9 = grundoplysninger5[8];
go10 = grundoplysninger5[9];
go11 = grundoplysninger5[10];
go12 = grundoplysninger5[11];
hej = grundoplysninger5[12];
go13 = grundoplysninger5[13];
inputs5 = new PlayerPrefsX.GetStringArray ("geminputs5");
input1 = inputs5[0];
input2 = inputs5[1];
input3 = inputs5[2];
input4 = inputs5[3];
input5 = inputs5[4];
input6 = inputs5[5];
input7 = inputs5[6];
input8 = inputs5[7];
input9 = inputs5[8];
input10 = inputs5[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers5");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr5");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat5");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong5");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load6 () {
grundoplysninger6 = new PlayerPrefsX.GetStringArray ("oplysninger6");
go1 = grundoplysninger6[0];
go2 = grundoplysninger6[1];
go3 = grundoplysninger6[2];
go4 = grundoplysninger6[3];
go5 = grundoplysninger6[4];
go6 = grundoplysninger6[5];
go7 = grundoplysninger6[6];
go8 = grundoplysninger6[7];
go9 = grundoplysninger6[8];
go10 = grundoplysninger6[9];
go11 = grundoplysninger6[10];
go12 = grundoplysninger6[11];
hej = grundoplysninger6[12];
go13 = grundoplysninger6[13];
inputs6 = new PlayerPrefsX.GetStringArray ("geminputs6");
input1 = inputs6[0];
input2 = inputs6[1];
input3 = inputs6[2];
input4 = inputs6[3];
input5 = inputs6[4];
input6 = inputs6[5];
input7 = inputs6[6];
input8 = inputs6[7];
input9 = inputs6[8];
input10 = inputs6[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers6");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr6");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat6");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong6");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load7 () {
grundoplysninger7 = new PlayerPrefsX.GetStringArray ("oplysninger7");
go1 = grundoplysninger7[0];
go2 = grundoplysninger7[1];
go3 = grundoplysninger7[2];
go4 = grundoplysninger7[3];
go5 = grundoplysninger7[4];
go6 = grundoplysninger7[5];
go7 = grundoplysninger7[6];
go8 = grundoplysninger7[7];
go9 = grundoplysninger7[8];
go10 = grundoplysninger7[9];
go11 = grundoplysninger7[10];
go12 = grundoplysninger7[11];
hej = grundoplysninger7[12];
go13 = grundoplysninger7[13];
inputs7 = new PlayerPrefsX.GetStringArray ("geminputs7");
input1 = inputs7[0];
input2 = inputs7[1];
input3 = inputs7[2];
input4 = inputs7[3];
input5 = inputs7[4];
input6 = inputs7[5];
input7 = inputs7[6];
input8 = inputs7[7];
input9 = inputs7[8];
input10 = inputs7[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers7");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr7");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat7");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong7");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load8 () {
grundoplysninger8 = new PlayerPrefsX.GetStringArray ("oplysninger8");
go1 = grundoplysninger8[0];
go2 = grundoplysninger8[1];
go3 = grundoplysninger8[2];
go4 = grundoplysninger8[3];
go5 = grundoplysninger8[4];
go6 = grundoplysninger8[5];
go7 = grundoplysninger8[6];
go8 = grundoplysninger8[7];
go9 = grundoplysninger8[8];
go10 = grundoplysninger8[9];
go11 = grundoplysninger8[10];
go12 = grundoplysninger8[11];
hej = grundoplysninger8[12];
go13 = grundoplysninger8[13];
inputs8 = new PlayerPrefsX.GetStringArray ("geminputs8");
input1 = inputs8[0];
input2 = inputs8[1];
input3 = inputs8[2];
input4 = inputs8[3];
input5 = inputs8[4];
input6 = inputs8[5];
input7 = inputs8[6];
input8 = inputs8[7];
input9 = inputs8[8];
input10 = inputs8[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers8");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr8");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat8");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong8");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load9 () {
grundoplysninger9 = new PlayerPrefsX.GetStringArray ("oplysninger9");
go1 = grundoplysninger9[0];
go2 = grundoplysninger9[1];
go3 = grundoplysninger9[2];
go4 = grundoplysninger9[3];
go5 = grundoplysninger9[4];
go6 = grundoplysninger9[5];
go7 = grundoplysninger9[6];
go8 = grundoplysninger9[7];
go9 = grundoplysninger9[8];
go10 = grundoplysninger9[9];
go11 = grundoplysninger9[10];
go12 = grundoplysninger9[11];
hej = grundoplysninger9[12];
go13 = grundoplysninger9[13];
inputs9 = new PlayerPrefsX.GetStringArray ("geminputs9");
input1 = inputs9[0];
input2 = inputs9[1];
input3 = inputs9[2];
input4 = inputs9[3];
input5 = inputs9[4];
input6 = inputs9[5];
input7 = inputs9[6];
input8 = inputs9[7];
input9 = inputs9[8];
input10 = inputs9[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers9");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr9");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat9");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong9");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}

function load10 () {
grundoplysninger10 = new PlayerPrefsX.GetStringArray ("oplysninger10");
go1 = grundoplysninger10[0];
go2 = grundoplysninger10[1];
go3 = grundoplysninger10[2];
go4 = grundoplysninger10[3];
go5 = grundoplysninger10[4];
go6 = grundoplysninger10[5];
go7 = grundoplysninger10[6];
go8 = grundoplysninger10[7];
go9 = grundoplysninger10[8];
go10 = grundoplysninger10[9];
go11 = grundoplysninger10[10];
go12 = grundoplysninger10[11];
hej = grundoplysninger10[12];
go13 = grundoplysninger10[13];
inputs10 = new PlayerPrefsX.GetStringArray ("geminputs10");
input1 = inputs10[0];
input2 = inputs10[1];
input3 = inputs10[2];
input4 = inputs10[3];
input5 = inputs10[4];
input6 = inputs10[5];
input7 = inputs10[6];
input8 = inputs10[7];
input9 = inputs10[8];
input10 = inputs10[9];
var values = new PlayerPrefsX.GetFloatArray ("Numbers10");
tidarr = new Array (values);
if (tidarr[0] == 0.0){
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
}
else{
var tidlog = new PlayerPrefsX.GetStringArray ("tidlogarr10");
tidlogarr = new Array (tidlog);
var gpsloglat = new PlayerPrefsX.GetFloatArray ("gpslogarrlat10");
gpslogarrlat = new Array (gpsloglat);
var gpsloglong = new PlayerPrefsX.GetFloatArray ("gpslogarrlong10");
gpslogarrlong = new Array (gpsloglong);
}
beregn1 ();
gokontrol ();
}



function loadnoegletal1 () {
noegletal1 = new PlayerPrefsX.GetFloatArray ("gemnoegletal1");
input8 = noegletal1[0].ToString("f0");
input9 = noegletal1[1].ToString("f2");
input10 = noegletal1[2].ToString("f1");
}

function loadnoegletal2 () {
noegletal2 = new PlayerPrefsX.GetFloatArray ("gemnoegletal2");
input8 = noegletal2[0].ToString("f0");
input9 = noegletal2[1].ToString("f2");
input10 = noegletal2[2].ToString("f1");
}

function loadnoegletal3 () {
noegletal3 = new PlayerPrefsX.GetFloatArray ("gemnoegletal3");
input8 = noegletal3[0].ToString("f0");
input9 = noegletal3[1].ToString("f2");
input10 = noegletal3[2].ToString("f1");
}

function loadnoegletal4 () {
noegletal4 = new PlayerPrefsX.GetFloatArray ("gemnoegletal4");
input8 = noegletal4[0].ToString("f0");
input9 = noegletal4[1].ToString("f2");
input10 = noegletal4[2].ToString("f1");
}

function loadnoegletal5 () {
noegletal5 = new PlayerPrefsX.GetFloatArray ("gemnoegletal5");
input8 = noegletal5[0].ToString("f0");
input9 = noegletal5[1].ToString("f2");
input10 = noegletal5[2].ToString("f1");
}

function loadnoegletal6 () {
noegletal6 = new PlayerPrefsX.GetFloatArray ("gemnoegletal6");
input8 = noegletal6[0].ToString("f0");
input9 = noegletal6[1].ToString("f2");
input10 = noegletal6[2].ToString("f1");
}

function loadnoegletal7 () {
noegletal7 = new PlayerPrefsX.GetFloatArray ("gemnoegletal7");
input8 = noegletal7[0].ToString("f0");
input9 = noegletal7[1].ToString("f2");
input10 = noegletal7[2].ToString("f1");
}

function loadnoegletal8 () {
noegletal8 = new PlayerPrefsX.GetFloatArray ("gemnoegletal8");
input8 = noegletal8[0].ToString("f0");
input9 = noegletal8[1].ToString("f2");
input10 = noegletal8[2].ToString("f1");
}

function loadnoegletal9 () {
noegletal9 = new PlayerPrefsX.GetFloatArray ("gemnoegletal9");
input8 = noegletal9[0].ToString("f0");
input9 = noegletal9[1].ToString("f2");
input10 = noegletal9[2].ToString("f1");
}

function loadnoegletal10 () {
noegletal10 = new PlayerPrefsX.GetFloatArray ("gemnoegletal10");
input8 = noegletal10[0].ToString("f0");
input9 = noegletal10[1].ToString("f2");
input10 = noegletal10[2].ToString("f1");
}

function loadset () {
grundoplysninger1 = new PlayerPrefsX.GetStringArray ("oplysninger1");
datanavn1 = grundoplysninger1[1];
datatid1 = grundoplysninger1[11];

grundoplysninger2 = new PlayerPrefsX.GetStringArray ("oplysninger2");
datanavn2 = grundoplysninger2[1];
datatid2 = grundoplysninger2[11];

grundoplysninger3 = new PlayerPrefsX.GetStringArray ("oplysninger3");
datanavn3 = grundoplysninger3[1];
datatid3 = grundoplysninger3[11];

grundoplysninger4 = new PlayerPrefsX.GetStringArray ("oplysninger4");
datanavn4 = grundoplysninger4[1];
datatid4 = grundoplysninger4[11];

grundoplysninger5 = new PlayerPrefsX.GetStringArray ("oplysninger5");
datanavn5 = grundoplysninger5[1];
datatid5 = grundoplysninger5[11];

grundoplysninger6 = new PlayerPrefsX.GetStringArray ("oplysninger6");
datanavn6 = grundoplysninger6[1];
datatid6 = grundoplysninger6[11];

grundoplysninger7 = new PlayerPrefsX.GetStringArray ("oplysninger7");
datanavn7 = grundoplysninger7[1];
datatid7 = grundoplysninger7[11];

grundoplysninger8 = new PlayerPrefsX.GetStringArray ("oplysninger8");
datanavn8 = grundoplysninger8[1];
datatid8 = grundoplysninger8[11];

grundoplysninger9 = new PlayerPrefsX.GetStringArray ("oplysninger9");
datanavn9 = grundoplysninger9[1];
datatid9 = grundoplysninger9[11];

grundoplysninger10 = new PlayerPrefsX.GetStringArray ("oplysninger10");
datanavn10 = grundoplysninger10[1];
datatid10 = grundoplysninger10[11];
}

function ryd () {
dgps = 0.0;
uploadstatus = "";
gpslogcheck = 0.0;
gokontrolvar = 0.0;
go13kontrol = 0.0;
go2kontrol = 0.0;
go4kontrol = 0.0;
hejkontrol = 0.0;
slot = 0;
normaltest = 0;
tidarr.Clear();
tidlogarr.Clear();
gpslogarrlat.Clear();
gpslogarrlong.Clear();
beregn1 ();
input1 = "";
input2 = "";
input3 = "10";
input4 = "85";
input5 = "99";
input6 = "0.05";
input7 = "0.01";
input8 = "";
input9 = "";
input10 = "";
go1 = "";
go2 = "";
go3 = "";
go4 = "";
go5 = "";
go6 = "";
go7 = "";
go8 = "";
go9 = "ja";
go10 = "";
go11 = "";
go13 = "";
picked1 = false;
picked5 = false;
picked6 = false;
hej = "Vælg";
testbesked = "Ikke nok data";
retningID = 0;
tidtaget1 = 0.0;
tidtaget2 = 0.0;

}

	function bestemretning () {
	
		var temp:float;
		
		//Input.location.Start ();

		temp = Input.compass.trueHeading;
		
		if (temp > 22.5 && temp < 67.5){
		retning = "Nordøst";
		retningID = 2;
		}
		else if (temp > 67.5 && temp < 112.5){
		retning = "Øst";
		retningID = 3;
		}
		else if (temp > 112.5 && temp < 157.5){
		retning = "Sydøst";
		retningID = 4;
		}
		else if (temp > 157.5 && temp < 202.5){
		retning = "Syd";
		retningID = 5;
		}
		else if (temp > 202.5 && temp < 247.5){
		retning = "Sydvest";
		retningID = 6;
		}				
		else if (temp > 247.5 && temp < 292.5){
		retning = "Vest";
		retningID = 7;
		}
		else if (temp > 292.5 && temp < 337.5){
		retning = "Nordvest";
		retningID = 8;
		}
		else {
		retning = "Nord";
		retningID = 1;
		}		
	
		if (Input.location.status == LocationServiceStatus.Running) {
		go7 = ""+Input.location.lastData.latitude;
		go8 = ""+Input.location.lastData.longitude;
		}
		else {
		go7 = "0.0";
		go8 = "0.0";
		}
		
		/*
		var gpsTime = System.DateTime(1970, 1, 1, 0, 0, 0, 0).AddSeconds(Input.location.lastData.timestamp);
		print(gpsTime);

		var tmpTid = System.DateTime.UtcNow;
		print(tmpTid);

		var gpsforskel = (tmpTid - gpsTime).TotalSeconds;
		
		print(gpsforskel);
		
		//go10 = "" + gpsTime.ToString("HH:mm:ss dd/MM/yyyy");
		go10 = "" + gpsforskel;
		*/


	}


/*	function gpsfis () {
		// First, check if user has location service enabled
		if (!Input.location.isEnabledByUser){
			go9 = "GPS'en er ikke tændt!";
			return;
			}

		// Start service before querying location
		Input.location.Start ();
			
		// Wait until service initializes
		var maxWait : int = 20;
		while (Input.location.status
		       == LocationServiceStatus.Initializing && maxWait > 0) {
			yield WaitForSeconds (1);
			maxWait--;
		}

		// Service didn't initialize in 20 seconds
		if (maxWait < 1) {
			print ("Timed out");
			return;
		}

		// Connection has failed
		if (Input.location.status == LocationServiceStatus.Failed) {
			print ("Unable to determine device location");
			return;
		}
		// Access granted and location value could be retrieved
		else {
		if (Input.location.status != LocationServiceStatus.Running) {
			go9 = "Ikke klar :(";
		
		} else {
		go9 = "Klar :)";
		}

		}

		// Stop service if there is no need to query location updates continuously
		Input.location.Stop ();
	} */
	
	var dgps : float;
	
	function gpsafstand () {
	var tmpantal = gpslogarrlat.length;
	
	if (tmpantal > 1){
	var R = 6371; // km
	
	var lat1 : double = gpslogarrlat[0];
	var lat2 : double = gpslogarrlat[tmpantal-1];
	
	var lon1 : double = gpslogarrlong[0];
	var lon2 : double = gpslogarrlong[tmpantal-1];
	if (lat1 != 0.0 && lat2 != 0.0  && lon1 != 0.0  && lon2 != 0.0){
	
	var dLat = (lat2-lat1) * (Mathf.PI / 180);
	var dLon = (lon2-lon1) * (Mathf.PI / 180);
	lat1 = lat1 * (Mathf.PI / 180);
	lat2 = lat2 * (Mathf.PI / 180);

	var a = Math.Sin(dLat/2) * Math.Sin(dLat/2) + Math.Sin(dLon/2) * Math.Sin(dLon/2) * Math.Cos(lat1) * Math.Cos(lat2); 
	var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1-a)); 
	dgps = R * c * 1000;
	}
	else {
	dgps = 0.0;
	}
	}
	else {
	dgps = 0.0;
	}	
	}
	
	
	var gpsstatus = "";
	
	function gpscheck () {
	
	if (!Input.location.isEnabledByUser){
	gpsstatus = "Off";
	return;
	}
	else {
	if (Input.location.status != LocationServiceStatus.Running) {
	Input.location.Start ();
	var tmpgps = Input.location.lastData.latitude;	
	gpsstatus = "Ikke klar";
	} 
	else {
	gpsstatus = "Klar";
	}	
	
	}
	}
	
	function afbrydmaaling () {
	if(counter == true) {
	counter = !counter;
	startstop = "Start";
	timer = 0;
	return true;
	}
	else{
	return false;
	}
	}
	
	
//Tidstest total 14400s
var tidtaget1 = 0.0;
var format = "HH:mm:ss dd/MM/yyyy";

function tidstest1 (){
	if (antal > 1){
    var starttid1:System.DateTime;
    var datestring:String = tidlogarr[0];
    starttid1 = System.DateTime.ParseExact(datestring, format, System.Globalization.CultureInfo.InvariantCulture);  
	var sluttid1 = System.DateTime.Now;
	tidtaget1 = (sluttid1 - starttid1).TotalSeconds;
	if (tidtaget1 > timelimit1){
	print("Total udløbet");
	}
    }
	else{
	tidtaget1 = 0.0;
	}


}

//Tidstest seneste 3600s
var tidtaget2 = 0.0;

function tidstest2 (){
	if (antal > 0){
	var starttid2:System.DateTime;
	var datestring:String = tidlogarr[antal-1];
	starttid2 = System.DateTime.ParseExact(datestring, format, System.Globalization.CultureInfo.InvariantCulture);
	var sluttid2 = System.DateTime.Now;
	tidtaget2 = (sluttid2 - starttid2).TotalSeconds;
	if (tidtaget2 > timelimit2){
	print("Senest udløbet");
	}
	}
	else{
	tidtaget2 = 0.0;
	}
}

var gpslogcheck;

function uploadcheck () {

gokontrol (); //Tjekker grundlæggende oplysninger
if (gokontrolvar == 1) {
print("GO kontrol OK");

inputkontrol (); //Tjekker inputs
if (inputkontrolvar  == 1) {
print("Input kontrol OK");

beregn1 (); //Tjekker for normalfordeling
if (normaltest  == 1) {
print("Fordeling OK");

//Tjekker for GPS koordinater
gpslogcheck = 0.0;
for(var n = 0; n < antal; n++){
var gpslattmp = gpslogarrlat[n];
var gpslongtmp = gpslogarrlong[n];
if (gpslattmp == 0.0 && gpslongtmp == 0.0) {
gpslogcheck = 1.0;
}
}

}
}
}




}

var uploadstatus = "";
var retningID;
var vehicleID;
var fisk;
var fisk2;
var fisk3;

function uploadToServer() {
	var measureString;
	for(var n = 0; n < tidarr.length; n++) {
		if (n == 0) {
			measureString = tidarr[0];
		} else {
			measureString = measureString + "," + tidarr[n];
		}
	}
	var timeOfMeasureString;
	for(var j = 0; j < tidlogarr.length; j++) {
		if (j == 0) {
			timeOfMeasureString = "\"" + tidlogarr[0] + "\"";
		} else {
			timeOfMeasureString = timeOfMeasureString + ",\"" + tidlogarr[j] + "\"";
		}
	}
	
	var latString;
	for(var k = 0; k < gpslogarrlat.length; k++) {
		if (k == 0) {
			latString = gpslogarrlat[0];
		} else {
			latString = latString + "," + gpslogarrlat[k];
		}
	}
	
	var longString;
	for(var l = 0; l < gpslogarrlong.length; l++) {
		if (l == 0) {
			longString = gpslogarrlong[0];
		} else {
			longString = longString + "," + gpslogarrlong[l];
		}
	}
	
	
	var inputString = "{ " +
						"\"Note\": \"" + go6 + "\", " +
						"\"Filename\": \"" + go2 + "\", " +
						"\"City\": \"" + go3 + "\", " +
						"\"Street\": \"" + go4 + "\", " +
						"\"ConductTime\": \"" + go13 + "\", " +
						"\"VehicleID\": \"" + vehicleID + "\", " +
						"\"Latitude\": \"" + go7 + "\", " +
						"\"Longitude\": \"" + go8 + "\", " +
						"\"DirectionID\": \"" + retningID + "\", " +
						"\"MeasureDistance\": \"" + input1 + "\", " +
						"\"Speedlimit\": \"" + input2 + "\", " +
						"\"Measure\": [" + measureString + "], " +
						"\"TimeOfMeasures\": [" + timeOfMeasureString + "]," + 
						"\"Lat\": [" + latString + "]," + 
						"\"Lng\": [" + longString + "]" + 
						"}"
						;
	print(inputString);
	var url = "http://speedanalysis.aau.dk/rest/api";
	var encoding = new System.Text.UTF8Encoding();
	var postHeader = new Hashtable();

	postHeader.Add("Content-Type", "application/json");
	postHeader.Add("Content-Length", encoding.GetBytes(inputString).Length);
	fisk3 = inputString.Length;
	fisk2 = encoding.GetBytes(inputString).Length;
	 // Start a download of the given URL
	var www : WWW = WWW(url, encoding.GetBytes(inputString), postHeader); 
	// Wait for download to complete
	yield www;
	
	print("Output: " + www.text);
	
	 if (!String.IsNullOrEmpty(www.error)) {
	 print("error server "+www.error);
	 uploadstatus = "Failed";
	 fisk = www.error;
	 }
	 else {
	 uploadstatus = "Succes";
	 go11 = "1";
	 autogem ();
	 }
	
}

